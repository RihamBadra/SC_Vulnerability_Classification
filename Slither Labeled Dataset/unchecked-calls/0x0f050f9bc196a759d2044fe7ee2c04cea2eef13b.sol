



pragma solidity 0.8.7;

interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount)
        external
        returns (bool);

    
    function allowance(address owner, address spender)
        external
        view
        returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(
        address indexed owner,
        address indexed spender,
        uint256 value
    );
}


contract Context {
  
  
  constructor () { }

  function _msgSender() internal view returns (address payable) {
    return payable(msg.sender);
  }

  function _msgData() internal view returns (bytes memory) {
    this; 
    return msg.data;
  }
}


library SafeMath {
  
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    
    
    
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    
    require(b > 0, errorMessage);
    uint256 c = a / b;
    

    return c;
  }

  
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}


contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  
  constructor () {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  
  function owner() public view returns (address) {
    return _owner;
  }

  
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }

  
  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

contract Claiming is Ownable{
    
    using SafeMath for uint256;
    
    
    struct allowedUser {
        address wallet;
        uint256 amount;
    }

    IERC20 public token;
    bool internal isClaimOpen;
    uint256 internal totalUnclaimed;

    mapping(address => uint256) allowanceAmounts;

    constructor(IERC20 _token){
        token = _token;
        isClaimOpen = false;
        totalUnclaimed = 0;
    }

    event UnsuccessfulTransfer(address recipient);

    
    modifier openClaiming() {
        require(
            isClaimOpen,
            "Claiming tokens is not currently allowed."
        );
        _;
    }

    
    modifier userHasEnoughClaimableTokens (uint256 amount) {
        require(
            allowanceAmounts[msg.sender] >= amount,
            "The users token amount is smaller than the requested."
        );
        _;
    }

    
    modifier enoughContractAmount(uint256 amount) {
        require(
            token.balanceOf(address(this)) >= amount, 
            "Owned token amount is too small."
        );
        _;
    }
    
    
    modifier userHasClaimableTokens() {
        require(
            allowanceAmounts[msg.sender] > 0,
            "There is no tokens for the user to claim or the user is not allowed to do so."
        );
        _;
    }
    
    modifier hasContractTokens() {
        require(
            token.balanceOf(address(this)) > 0,
            "There is no tokens for the user to claim or the user is not allowed to do so."
        );
        _;
    }

    
    function claimCustomAmountTokens(uint256 amount)
        public 
        openClaiming 
        userHasEnoughClaimableTokens(amount)
        enoughContractAmount(amount)
    {
        require(msg.sender != address(0), "Sender is address zero");
        allowanceAmounts[msg.sender] = allowanceAmounts[msg.sender].sub(amount);
        token.approve(address(this), amount);
        if (!token.transferFrom(address(this), msg.sender, amount)){
            allowanceAmounts[msg.sender].add(amount);
            emit UnsuccessfulTransfer(msg.sender);
        }
        else {
            totalUnclaimed = totalUnclaimed.sub(amount);
        }
    }

    
    function claimRemainingTokens()
        public
        openClaiming
        userHasClaimableTokens   
    {   
        
        require(msg.sender != address(0), "Sender is address zero");
        uint256 amount = allowanceAmounts[msg.sender];
        
        require(token.balanceOf(address(this)) >= amount, "Insufficient amount of tokens in contract");
        
        allowanceAmounts[msg.sender] = 0;
        token.approve(address(this), amount);
        if (!token.transferFrom(address(this), msg.sender, amount)){
            allowanceAmounts[msg.sender] = amount;
            emit UnsuccessfulTransfer(msg.sender);
        }
        else{
            totalUnclaimed = totalUnclaimed.sub(amount);
        }
    }

    
    function addToAllowanceListSingle(address addAddress, uint256 amount) 
        public 
        onlyOwner 
    {
        allowanceAmounts[addAddress] = allowanceAmounts[addAddress].add(amount);
        totalUnclaimed = totalUnclaimed.add(amount);
    }
    
    
    function substractFromAllowanceListSingle(address subAddress, uint256 amount) 
        public 
        onlyOwner 
    {
        require(allowanceAmounts[subAddress] != 0, "The address does not have allowance to substract from.");
        allowanceAmounts[subAddress] = allowanceAmounts[subAddress].sub(amount);
        totalUnclaimed = totalUnclaimed.sub(amount);
    }


    
    function addToAllowanceListMultiple(allowedUser[] memory addAddresses)
        public
        onlyOwner
    {
        for (uint256 i = 0; i < addAddresses.length; i++) {
            allowanceAmounts[addAddresses[i].wallet] = allowanceAmounts[addAddresses[i].wallet].add(addAddresses[i].amount);
            totalUnclaimed = totalUnclaimed.add(addAddresses[i].amount);
        }
    }
    
    
    function removeFromAllowanceList(address remAddress) 
        public 
        onlyOwner 
    {
        totalUnclaimed = totalUnclaimed.sub(allowanceAmounts[remAddress]);
        delete allowanceAmounts[remAddress];
    }

    
    function turnClaimingOn() 
        public 
        onlyOwner
    {
        isClaimOpen = true;
    }

    
    function turnClaimingOff() 
        public 
        onlyOwner
    {
        isClaimOpen = false;
    }

    
    function withdrawAllTokensOwner() 
        public 
        onlyOwner
    {
        token.approve(address(this), token.balanceOf(address(this)));
        if (!token.transferFrom(address(this), msg.sender, token.balanceOf(address(this)))){
            emit UnsuccessfulTransfer(msg.sender);
        }
    }
    
    
     function withdrawCustomTokensOwner(uint256 amount) 
        public 
        onlyOwner 
        enoughContractAmount(amount)
    {
        token.approve(address(this), amount);
        if (!token.transferFrom(address(this), msg.sender, amount)){
            emit UnsuccessfulTransfer(msg.sender);
        }
    }
    
    
     function withdrawResidualTokensOwner() 
        public 
        onlyOwner 
    {
        uint256 amount = token.balanceOf(address(this)).sub(totalUnclaimed);
        require(token.balanceOf(address(this)) >= amount, "Insufficient amount of tokens in contract");
        token.approve(address(this), amount);
        if (!token.transferFrom(address(this), msg.sender, amount)){
            emit UnsuccessfulTransfer(msg.sender);
        }
    }
    
    
    function withdrawAnyContractTokens(IERC20 tokenAddress, address recipient) 
        public 
        onlyOwner 
    {
        require(msg.sender != address(0), "Sender is address zero");
        require(recipient != address(0), "Receiver is address zero");
        tokenAddress.approve(address(this), tokenAddress.balanceOf(address(this)));
        if(!tokenAddress.transferFrom(address(this), recipient, tokenAddress.balanceOf(address(this)))){
            emit UnsuccessfulTransfer(msg.sender);
        }
    } 
    
    
    function totalUnclaimedTokens() 
        public 
        view 
        onlyOwner
        returns (uint256)
    {
        return totalUnclaimed;
    }
    
    
    function myResidualTokens() 
        public
        view
        returns (uint256)
    {
        return allowanceAmounts[msg.sender];
    } 
    
    
    function residualTokensOf(address user) 
        public  
        view
        onlyOwner 
        returns (uint256)
    {
        return allowanceAmounts[user];
    }

    
    function tokenBalance() 
        public 
        view 
        returns (uint256)
    {
        return token.balanceOf(address(this));
    }

    
    function isClaimingOn() 
        public
        view 
        returns (bool)
    {
        return isClaimOpen;
    }
    
}