





pragma solidity ^0.8.2;





library Base64 {
  bytes internal constant TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

  
  function encode(bytes memory data) internal pure returns (string memory) {
    uint256 len = data.length;
    if (len == 0) return "";

    
    uint256 encodedLen = 4 * ((len + 2) / 3);

    
    bytes memory result = new bytes(encodedLen + 32);

    bytes memory table = TABLE;

    assembly {
      let tablePtr := add(table, 1)
      let resultPtr := add(result, 32)

      for {
        let i := 0
      } lt(i, len) {

      } {
        i := add(i, 3)
        let input := and(mload(add(data, i)), 0xffffff)

        let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))
        out := shl(8, out)
        out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))
        out := shl(8, out)
        out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))
        out := shl(8, out)
        out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))
        out := shl(224, out)

        mstore(resultPtr, out)

        resultPtr := add(resultPtr, 4)
      }

      switch mod(len, 3)
      case 1 {
        mstore(sub(resultPtr, 2), shl(240, 0x3d3d))
      }
      case 2 {
        mstore(sub(resultPtr, 1), shl(248, 0x3d))
      }

      mstore(result, encodedLen)
    }

    return string(result);
  }
}





pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity ^0.8.0;



interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}






pragma solidity ^0.8.0;


library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}






pragma solidity ^0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}






pragma solidity ^0.8.0;


interface IERC721Receiver {
    
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}






pragma solidity ^0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}






pragma solidity ^0.8.0;



abstract contract ERC165 is IERC165 {
    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}






pragma solidity ^0.8.0;



interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}






pragma solidity ^0.8.0;



interface IERC721Enumerable is IERC721 {
    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}






pragma solidity ^0.8.0;



interface IERC721Metadata is IERC721 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function tokenURI(uint256 tokenId) external view returns (string memory);
}






pragma solidity ^0.8.0;


library Counters {
    struct Counter {
        
        
        
        uint256 _value; 
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}






pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;





contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}






pragma solidity ^0.8.0;









contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    
    string private _name;

    
    string private _symbol;

    
    mapping(uint256 => address) private _owners;

    
    mapping(address => uint256) private _balances;

    
    mapping(uint256 => address) private _tokenApprovals;

    
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}






pragma solidity ^0.8.0;




abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    
    mapping(uint256 => uint256) private _ownedTokensIndex;

    
    uint256[] private _allTokens;

    
    mapping(uint256 => uint256) private _allTokensIndex;

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; 
            _ownedTokensIndex[lastTokenId] = tokenIndex; 
        }

        
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        
        
        
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; 
        _allTokensIndex[lastTokenId] = tokenIndex; 

        
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}






pragma solidity ^0.8.0;


abstract contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}






pragma solidity ^0.8.0;








contract MuniGolfClub is ERC721Enumerable, ReentrancyGuard, Ownable {

    using Counters for Counters.Counter;
    uint256 public constant MAX_SUPPLY = 5400;
    uint256 public constant MAX_PUBLIC_MINT = 9;
    uint256 public constant MAX_RESERVE_COUNT = 180;
    uint256 private TOTAL_RESERVED = 0;
    
    uint256 public PRICE_PER_TOKEN = 0.05 ether;

    string private DESCRIPTION = "Randomly generated, fully on-chain golf balls.";

    function getDescription() public view returns (string memory) {
        return DESCRIPTION;
    }

    function setDescription( string memory description ) public onlyOwner {
        DESCRIPTION = description;
    }

    address private _owner;
    string private _seed;

    bool public mintingActive = false;
    bool public contractLocked = false;
    string private _contractURI;

    struct MuniLayerData {
        string name;
        string svgData;
    }

    struct MuniColorData {
        string name;
        string color;
    }

    MuniLayerData private groundBall;
    MuniLayerData private inHoleBall;
    MuniLayerData private distanceBall;
    MuniLayerData private inHoleHole;
    MuniLayerData private ground;

    MuniColorData[] private ballColors;
    MuniColorData[] private groundColors;
    
    MuniLayerData[] private skies;
    MuniLayerData[] private backgrounds;
    MuniLayerData[] private ballLogos;
    MuniLayerData[] private holes;
    MuniLayerData[] private foregrounds;
    MuniLayerData[] private creatures;

     modifier whenContractNotLocked() {
        require(!contractLocked, 'Contract is locked');
        _;
    }


    constructor() ERC721( "Municipal", "MUNI" ) Ownable() {
        _owner = msg.sender;

        _seed = string(abi.encodePacked(block.timestamp));

        loadData();
    }

    function loadData() internal {

        groundBall.name = "Ball on Ground";
        groundBall.svgData = '<circle cx="250.5" cy="250.5" r="137.5" fill="';

        inHoleBall.name = "Ball in Hole";
        inHoleBall.svgData = '<path d="M364 494C330 498 291 500 250 500C209 500 171 498 137 494C162 458 202 434 250 434C298 434 339 458 364 494Z" fill="';

        distanceBall.name = "Ball in the Distance";
        distanceBall.svgData = '<circle cx="346" cy="310" r="78" fill="';

        ground.name = "Ground";
        ground.svgData = '<rect y="388" width="500" height="112" fill="';

        inHoleHole.name = "Hole";
        inHoleHole.svgData = '<ellipse cx="250" cy="444" rx="250" ry="56" fill="#141B19" fill-opacity="0.75"/>';

    }

    function toggleMinting() public onlyOwner {
        mintingActive = !mintingActive;
    }

    function _baseURI() override internal view virtual returns ( string memory ) {
        return _contractURI;
    }

    function contractURI() public view returns ( string memory ) {
        return _contractURI;
    }

    function setContractURI( string memory prefix ) public onlyOwner {
        _contractURI = prefix;
    }

    function setPrice( uint256 newPrice ) public onlyOwner {
        PRICE_PER_TOKEN = newPrice;
    }

    function lockContract() public onlyOwner {
        contractLocked = true; 
    }

    function mint(uint numberOfTokens) public payable {
        uint256 ts = totalSupply();
        require(mintingActive, "Sale must be active to mint tokens.");
        require(numberOfTokens <= MAX_PUBLIC_MINT, "Exceeded max token purchase.");
        require(numberOfTokens > 0, "Cannot mint less than 1 token.");
        require(ts + numberOfTokens <= MAX_SUPPLY, "Purchase would exceed max tokens.");
        require(PRICE_PER_TOKEN * numberOfTokens <= msg.value, "Ether value sent is not correct.");

        for (uint256 i = 0; i < numberOfTokens; i++) {
            _safeMint(msg.sender, ts + i + 1); 
        }
    }

    function reserve( uint256 numberOfTokens ) public onlyOwner {
        uint256 supply = totalSupply();
        require(supply + numberOfTokens <= MAX_SUPPLY, "Reserve would exceed max tokens");
        require(TOTAL_RESERVED + numberOfTokens <= MAX_RESERVE_COUNT, "Cannot exceed max team reserve allotment");

        for (uint256 i = 0; i < numberOfTokens; i++) {
            _safeMint(msg.sender, supply + i + 1); 
        }
        TOTAL_RESERVED += numberOfTokens;
    }

    function tokensOfOwner(address _ballowner) external view returns( uint256[] memory ) {
        uint256 tokenCount = balanceOf(_ballowner);
        if (tokenCount == 0) {
            
            return new uint256[](0);
        } else {
            uint256[] memory result = new uint256[](tokenCount);
            uint256 index;
            for (index = 0; index < tokenCount; index++) {
                result[index] = tokenOfOwnerByIndex(_ballowner, index);
            }
            return result;
        }
    }

    function random(string memory input) internal pure returns ( uint256 ) {
        return uint256(keccak256(abi.encodePacked(input)));
    }

    function withdrawAll() public payable onlyOwner {
        require(payable(msg.sender).send(address(this).balance));
    }

    

    function getNumberOfSkies() public view returns ( uint256 ) {
        return skies.length;
    }

    function getNumberOfBackgrounds() public view returns ( uint256 ) {
        return backgrounds.length;
    }

    function getNumberOfForegrounds() public view returns ( uint256 ) {
        return foregrounds.length;
    }

    function getNumberOfCreatures() public view returns ( uint256 ) {
        return creatures.length;
    }

    function getNumberOfHoles() public view returns ( uint256 ) {
        return holes.length;
    }

    function getNumberOfBallLogos() public view returns ( uint256 ) {
        return ballLogos.length;
    }

    function getNumberOfGroundColors() public view returns ( uint256 ) {
        return groundColors.length;
    }

    function getNumberOfBallColors() public view returns ( uint256 ) {
        return ballColors.length;
    }

    

    function registerSkyData( MuniLayerData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        skies.push(dataEntry);
    }

    function registerHoleData( MuniLayerData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        holes.push(dataEntry);
    }

    function registerGroundColor( MuniColorData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        groundColors.push(dataEntry);
    }

    function registerBallColor( MuniColorData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        ballColors.push(dataEntry);
    }

    function registerBackgroundData(MuniLayerData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        backgrounds.push(dataEntry);
    }

    function registerForegroundData(MuniLayerData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        foregrounds.push(dataEntry);
    }

    function registerCreatureData(MuniLayerData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        creatures.push(dataEntry);
    }

    function registerBallLogoData(MuniLayerData calldata dataEntry ) public onlyOwner whenContractNotLocked {
        ballLogos.push(dataEntry);
    }

    

    function registerMultipleSkyData(MuniLayerData[] calldata dataEntries) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            skies.push(dataEntries[i]);
        }
    }

    function registerMultipleBallColor(MuniColorData[] calldata dataEntries) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            ballColors.push(dataEntries[i]);
        }
    }

    function registerMultipleGroundColor(MuniColorData[] calldata dataEntries) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            groundColors.push(dataEntries[i]);
        }
    }

    function registerMultipleBackgroundData( MuniLayerData[] calldata dataEntries ) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            backgrounds.push(dataEntries[i]);
        }
    }

    function registerHoleBackgroundData( MuniLayerData[] calldata dataEntries ) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            holes.push(dataEntries[i]);
        }
    }

    function registerMultipleForegroundData( MuniLayerData[] calldata dataEntries ) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            foregrounds.push(dataEntries[i]);
        }
    }

    function registerMultipleCreatureData( MuniLayerData[] calldata dataEntries ) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            creatures.push(dataEntries[i]);
        }
    }

    function registerMultipleBallLogoData( MuniLayerData[] calldata dataEntries ) public onlyOwner whenContractNotLocked {
        for (uint256 i = 0; i < dataEntries.length; i++) {
            ballLogos.push(dataEntries[i]);
        }
    }

    

    function tokenURI( uint256 tokenId ) public view override returns (string memory) {
        require(tokenId <= totalSupply(), "Ball doesn't exist.");
        require(tokenId > 0, "Ball doesn't exist.");
        string memory output;
        string memory attributes;

        string[23] memory parts;
        parts[0]  = '<svg width="500" height="500" viewBox="0 0 500 500" fill="none" xmlns="http:
        parts[1]  = getSky(tokenId).svgData;
        parts[2]  = getBackground(tokenId).svgData;
        parts[3]  = ground.svgData;
        parts[4]  = getGround(tokenId).color;
        parts[5]  = '"/>';
        parts[6]  = getHole(tokenId).svgData;
        parts[7]  = getBall(tokenId).svgData;
        parts[8]  = getBallColor(tokenId).color;
        parts[9]  = '"/>';
        parts[10] = getLogo(tokenId).svgData;
        parts[11] = getCreature(tokenId).svgData;
        parts[12] = getForeground(tokenId).svgData;
        parts[13] = '</svg>';

        output = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7]));
        output = string(abi.encodePacked(output, parts[8], parts[9], parts[10], parts[11], parts[12], parts[13]));

        parts[0] = '"attributes" : [{ "trait_type" : "Score", "value" : "';
        parts[1] = getScore(tokenId);
        parts[2] = '" }, { "trait_type" : "Yardage", "value" : "';
        parts[3] = getYardage(tokenId);
        parts[4] = '" }, { "trait_type" : "Sky", "value" : "';
        parts[5] = getSky(tokenId).name;
        parts[6] = '" }, { "trait_type" : "Background", "value" : "';
        parts[7] = getBackground(tokenId).name;
        parts[8] = '" }, { "trait_type" : "Ground", "value" : "';
        parts[9] = getGround(tokenId).name;
        parts[10] = '" }, { "trait_type" : "Ball", "value" : "';
        parts[11] = getBallAttribute(tokenId);
        parts[12] = '" }, { "trait_type" : "Ball Color", "value" : "';
        parts[13] = getBallColor(tokenId).name;
        parts[14] = '" }, { "trait_type" : "Ball Brand", "value" : "';
        parts[15] = getLogo(tokenId).name;
        parts[16] = '" }, { "trait_type" : "Creature", "value" : "';
        parts[17] = getCreature(tokenId).name;
        parts[18] = '" }, { "trait_type" : "Foreground", "value" : "';
        parts[19] = getForeground(tokenId).name;
        parts[20] = '" }, { "trait_type" : "Landed", "value" : "';
        parts[21] = getHole(tokenId).name;
        parts[22] = '"} ]';

        attributes = string(abi.encodePacked(parts[0], parts[1], parts[2], parts[3], parts[4], parts[5], parts[6], parts[7], parts[8]));
        attributes = string(abi.encodePacked(attributes, parts[9], parts[10], parts[11], parts[12], parts[13], parts[14]));
        attributes = string(abi.encodePacked(attributes, parts[15], parts[16], parts[17], parts[18], parts[19], parts[20], parts[21], parts[22]));

        output = Base64.encode(bytes(string(abi.encodePacked('{"name":"Ball #', toString(tokenId), '", "description" : "', DESCRIPTION, '", "image" : "data:image/svg+xml;base64,', Base64.encode(bytes(output)), '", ', attributes, '}'))));
        output = string(abi.encodePacked("data:application/json;base64,", output));

        return output;
    }

    function getYardageInRange(uint256 tokenId, uint256 low, uint256 high) internal view returns ( uint256 ) {
        uint256 rand = random(string(abi.encodePacked("YardageInRange", toString(tokenId), _seed)));
        uint256 gap = high - low;
        uint256 greatness = rand % gap;
        return greatness + low;
    }

    function getYardage(uint256 tokenId) internal view returns (string memory) {
        uint256 rand = random(string(abi.encodePacked("Yardage", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        string memory output;
        output = toString(getYardageInRange(tokenId, 2, 25));
        if (greatness > 100) {
            output = toString(getYardageInRange(tokenId, 25, 50));
        }
        if ( greatness > 200) {
            output = toString(getYardageInRange(tokenId, 50, 75));
        }
        if ( greatness > 400) {
            output = toString(getYardageInRange(tokenId, 75, 150));
        }
        if ( greatness > 850) {
            output = toString(getYardageInRange(tokenId, 150, 225));
        }
        if ( greatness > 900) {
            output = toString(getYardageInRange(tokenId, 225, 275));
        }
        if ( greatness > 990) {
            output = toString(getYardageInRange(tokenId, 275, 350));
        }
        if ( greatness > 998) {
            output = toString(getYardageInRange(tokenId, 350, 475));
        }
        return output;
    }

    function getScore(uint256 tokenId) internal view returns ( string memory) {
        uint256 rand = random(string(abi.encodePacked("Ball", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        string memory output;
        output = "Snowman";
        if (greatness > 100) {
            output = "Double Bogey";
        }
        if ( greatness > 200) {
            output = "Bogey";
        }
        if ( greatness > 400) {
            output = "Par";
        }
        if ( greatness > 700) {
            output = "Birdie";
        }
        if ( greatness > 800) {
            output = "Eagle";
        }
        if ( greatness > 900) {
            output = "Double Eagle";
        }
        if ( greatness > 990) {
            output = "Ace";
        }
        return output;
    }

    
    function getSky(uint256 tokenId) internal view returns (MuniLayerData memory) {
        uint256 rand = random(string(abi.encodePacked("Sky", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        if (greatness > 400) {
            return skies[rand % skies.length];
        }
        return skies[0];
    }

    
    function getBackground(uint256 tokenId) internal view returns (MuniLayerData memory) {
        return pluck(tokenId, "Backgrounds", backgrounds, 50);
    }

    
    function getGround(uint256 tokenId) internal view returns (MuniColorData memory) {
        uint256 rand = random(string(abi.encodePacked("Ground", toString(tokenId), _seed)));
        return groundColors[rand % groundColors.length];
    }

    
    function getHole(uint256 tokenId) internal view returns ( MuniLayerData memory ) {
        uint256 rand = random(string(abi.encodePacked("Ball", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        if (greatness > 990) {
            return inHoleHole;
        }
        return holes[rand % holes.length];
    }

    
    function getBallColor(uint256 tokenId) internal view returns (MuniColorData memory) {
        uint256 rand = random(string(abi.encodePacked("Ball", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        if (greatness > 400) {
            return ballColors[rand % ballColors.length];
        }
        return ballColors[0];
    }

    function getBall(uint256 tokenId) internal view returns (MuniLayerData memory) {
        uint256 rand = random(string(abi.encodePacked("Ball", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        if (greatness < 100) {
            return distanceBall;
        }
        if (greatness > 990) {
            return inHoleBall;
        }
        return groundBall;
    }

    function getBallAttribute(uint256 tokenId) internal view returns (string memory) {
        uint256 rand = random(string(abi.encodePacked("Ball", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        if (greatness < 100) {
            return "Long Ball";
        }
        if (greatness > 990) {
            return "In Hole";
        }
        return "Standard";
    }

    
    function getLogo(uint256 tokenId) internal view returns (MuniLayerData memory) {
        MuniLayerData memory output;

        uint256 rand = random(string(abi.encodePacked("Ball", toString(tokenId), _seed)));
        uint256 greatness = rand % 1000;
        
        output.name = "None";
        output.svgData = '';
        
        if (greatness >= 100 ) {
            output = pluck(tokenId, "Logos", ballLogos, 80);
        }
        
        if ( greatness > 990 ) {
            output.svgData = '';
        }
        
        return output;
    }

    
    function getCreature(uint256 tokenId) internal view returns (MuniLayerData memory) {
        return pluck(tokenId, "Creature", creatures, 90);
    }

    
    function getForeground(uint256 tokenId) internal view returns (MuniLayerData memory) {
        return pluck(tokenId, "Foregrounds", foregrounds, 70);
    }

    function pluck(uint256 tokenId, string memory key, MuniLayerData[] memory sourceArray, uint256 threshold) internal view returns (MuniLayerData memory) {
        MuniLayerData memory output;

        if ( sourceArray.length == 0 ) {
            output.name = "None";
            output.svgData = "";

            return output;
        }

        uint256 rand = random(string(abi.encodePacked(key, toString(tokenId), _seed)));
        output = sourceArray[rand % sourceArray.length];
        uint256 greatness = rand % 100;
        
        if (greatness > threshold) {
            return output;
        }

        output.name = "None";
        output.svgData = "";
        
        return output;
    }

    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }
}