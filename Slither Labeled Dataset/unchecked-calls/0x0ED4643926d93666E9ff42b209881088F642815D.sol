

pragma solidity ^0.5.12;



library MerkleProof {
    
    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {
        bytes32 computedHash = leaf;

        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];

            if (computedHash <= proofElement) {
                
                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
            } else {
                
                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
            }
        }

        
        return computedHash == root;
    }
}


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


interface IDPR {
    function transferFrom(address _spender, address _to, uint256 _amount) external returns(bool);
    function transfer(address _to, uint256 _amount) external returns(bool);
    function balanceOf(address _owner) external view returns(uint256);
    function approve(address _spender, uint256 _amount) external returns(bool);
}

interface ILockingContract {
    function lock(address _addr, uint256 _amount) external;
}

contract InstanceClaim {
    using SafeMath for uint256;

    bytes32 public root;
    IDPR public dpr;
    
    address public owner;
    ILockingContract new_locking_contract;
    mapping(bytes32=>bool) public claimMap;
    mapping(address=>bool) public userMap;
    
    event distribute(address _addr, uint256 _amount);
    event OwnerTransfer(address _newOwner);

    
    modifier onlyOwner(){
        require(owner == msg.sender);
        _;
    }

    constructor(address _token) public{
        dpr = IDPR(_token);
        owner = msg.sender;
    }

    function transferOwnerShip(address _newOwner) onlyOwner external {
        require(_newOwner != address(0), "MerkleClaim: Wrong owner");
        owner = _newOwner;
        emit OwnerTransfer(_newOwner);
    }

    function setRoot(bytes32 _root) external onlyOwner{
        root = _root;
    }

    function setClaim(bytes32 node) private {
        claimMap[node] = true;
    }


    function setLockContract(ILockingContract lockContract) external onlyOwner{
        require(address(lockContract) != address(0), "DPRBridge: Zero address");
        dpr.approve(address(lockContract), uint256(-1));
        new_locking_contract = lockContract;
    }
    function distributeAndLock(uint256 _amount, bytes32[]  memory proof, bool need_move) public{
        require(!userMap[msg.sender], "MerkleClaim: Account is already claimed");
        bytes32 node = keccak256(abi.encodePacked(msg.sender, _amount));
        require(!claimMap[node], "MerkleClaim: Account is already claimed");
        require(MerkleProof.verify(proof, root, node), "MerkleClaim: Verify failed");
        
        setClaim(node);
        
        
        if(need_move){
            new_locking_contract.lock(msg.sender, _amount);
        }else{
            dpr.transfer(msg.sender, _amount);
        }
        
        userMap[msg.sender] = true;
        emit distribute(msg.sender, _amount);
    }

    function withdraw(address _to) external onlyOwner{
        require(dpr.transfer(_to, dpr.balanceOf(address(this))), "MerkleClaim: Transfer Failed");
    }

    function pullTokens(uint256 _amount) external{
        require(dpr.transferFrom(msg.sender, address(this), _amount), "MerkleClaim: TransferFrom failed");
    }
}