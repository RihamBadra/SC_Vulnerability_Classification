







pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; 
        return msg.data;
    }
}





pragma solidity ^0.8.0;


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}





pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




pragma solidity ^0.8.0;



contract TokenLock is Ownable {

    event BeneficiaryUpdated(address account);

    event ReleaseInfoCreated(uint256 time, uint256 amount);
    event ReleaseInfoUpdated(uint256 time, uint256 amount);
    event Released(address account, uint256 amount, uint256 indexFrom, uint256 indexTo);

    struct ReleaseInfo {
        uint128 time;
        uint128 amount;
    }

    IERC20 private _token;

    address private _beneficiary;

    uint256 private _releaseIndex;

    uint256 private _totalReleases;

    mapping(uint256 => ReleaseInfo) private _releases; 

    
    constructor(address token, address beneficiary)
    {
        _token = IERC20(token);

        _beneficiary = beneficiary;
    }

    
    function updateBeneficiary(address account)
        external
        onlyOwner
    {
        require(account != address(0), "TokenLock: address is invalid");

        _beneficiary = account;

        emit BeneficiaryUpdated(account);
    }

    
    function getContractInfo()
        external
        view
        returns (address, address, uint256, uint256, uint256)
    {
        return (address(_token), _beneficiary, _totalReleases, _token.balanceOf(address(this)), _releaseIndex);
    }

    
    function createReleaseInfo(uint128[] memory times, uint128[] memory amounts)
        external
        onlyOwner
    {
        uint256 length = times.length;

        require(length == amounts.length, "TokenLock: array length is invalid");

        uint256 index = _totalReleases;

        uint128 lastTime = index == 0 ? 0 : _releases[index - 1].time;

        for (uint256 i = 0; i < length; i++) {
            uint128 time = times[i];
            uint128 amount = amounts[i];

            require(lastTime < time, "TokenLock: time is invalid");

            _releases[index++] = ReleaseInfo(time, amount);

            lastTime = time;

            emit ReleaseInfoCreated(time, amount);
        }

        if (_totalReleases != index) {
            _totalReleases = index;
        }
    }

    
    
    
    
    
    
    
    

    

    

    

    

    

    
    

    
    

    
    function getReleaseInfo(uint256 indexFrom, uint256 indexTo)
        external
        view
        returns (ReleaseInfo[] memory)
    {
        uint256 cnt = 0;
        uint256 size = indexTo - indexFrom + 1;

        ReleaseInfo[] memory tmps = new ReleaseInfo[](size);

        for (uint256 i = indexFrom; i <= indexTo; i++) {
            if (_releases[i].time == 0) {
                break;
            }

            tmps[cnt++] = _releases[i];
        }

        ReleaseInfo[] memory releases = new ReleaseInfo[](cnt);

        for (uint256 i = 0; i < cnt; i++) {
            releases[i] = tmps[i];
        }

        return releases;
    }

    
    function getReleaseBalance()
        public
        view
        returns (uint256, uint256, uint256)
    {
        uint256 balance;
        uint256 length = _totalReleases;
        uint256 currentTime = block.timestamp;
        uint256 indexFrom = _releaseIndex;
        uint256 indexTo = indexFrom;

        for (uint256 i = indexFrom; i < length; i++) {
            ReleaseInfo memory info = _releases[i];

            if (currentTime < info.time) {
                break;
            }

            balance += info.amount;
            indexTo++;
        }

        return (indexFrom, indexTo, balance);
    }

    
    function release()
        external
    {
        (uint256 indexFrom, uint256 indexTo, uint256 balance) = getReleaseBalance();

        require(indexTo > indexFrom, "TokenLock: can not release");

        _releaseIndex = indexTo;

        if (balance > 0) {
            _token.transfer(_beneficiary, balance);
        }

        emit Released(_beneficiary, balance, indexFrom, indexTo);
    }

}