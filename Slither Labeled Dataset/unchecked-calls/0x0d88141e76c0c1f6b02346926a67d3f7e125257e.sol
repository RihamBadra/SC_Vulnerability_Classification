




pragma solidity ^0.7.0;
pragma experimental ABIEncoderV2;



library Types {
    enum AssetDenomination { Wei, Par }
    enum AssetReference { Delta, Target }
    struct AssetAmount {
        bool sign;
        AssetDenomination denomination;
        AssetReference ref;
        uint256 value;
    }
}

library Account {
    struct Info {
        address owner;
        uint256 number;
    }
}

library Actions {
    enum ActionType {
        Deposit, Withdraw, Transfer, Buy, Sell, Trade, Liquidate, Vaporize, Call
    }
    struct ActionArgs {
        ActionType actionType;
        uint256 accountId;
        Types.AssetAmount amount;
        uint256 primaryMarketId;
        uint256 secondaryMarketId;
        address otherAddress;
        uint256 otherAccountId;
        bytes data;
    }
}

interface ISoloMargin {
    function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;
}


interface ICallee {
    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external;
}


interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


interface IWETH is IERC20 {
    function deposit() external payable;
    function withdraw(uint wad) external;
}

interface Cryptopunks {
    function punkIndexToAddress (uint256 punkIndex) external view returns (address);
    function punkBids (uint256 punkIndex) external view returns ( bool , uint256 , address , uint256 );
    function enterBidForPunk (uint256 punkIndex) external payable;
    function withdrawBidForPunk (uint256 punkIndex) external;
    function withdraw () external;
}

interface ENS{
    function setName(string memory name) external returns (bytes32);
}

contract declineBid is ICallee {
    
    IWETH private WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    
    
    ISoloMargin private soloMargin = ISoloMargin(0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e);
    Cryptopunks constant punkContract=Cryptopunks(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);
    ENS constant ensRegistar=ENS(0x084b1c3C81545d370f3634392De611CaaBFf8148);
    address private owner;

    constructor() {
        
        
        
        WETH.approve(address(soloMargin), uint(-1));
        owner= msg.sender;
    }
    
    
    function declineBidOnPunk(uint256 punkIndex) external {
        
        
        (,,,uint loanAmount) = punkContract.punkBids(punkIndex) ; 
        require (loanAmount!=0,"No bid on this punk!");
        require (msg.sender==owner || msg.sender==punkContract.punkIndexToAddress(punkIndex),"Not your punk!"); 
        loanAmount+=1;

        Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);

        operations[0] = Actions.ActionArgs({
            actionType: Actions.ActionType.Withdraw,
            accountId: 0,
            amount: Types.AssetAmount({
                sign: false,
                denomination: Types.AssetDenomination.Wei,
                ref: Types.AssetReference.Delta,
                value: loanAmount 
            }),
            primaryMarketId: 0, 
            secondaryMarketId: 0,
            otherAddress: address(this),
            otherAccountId: 0,
            data: ""
        });
        
        operations[1] = Actions.ActionArgs({
                actionType: Actions.ActionType.Call,
                accountId: 0,
                amount: Types.AssetAmount({
                    sign: false,
                    denomination: Types.AssetDenomination.Wei,
                    ref: Types.AssetReference.Delta,
                    value: 0
                }),
                primaryMarketId: 0,
                secondaryMarketId: 0,
                otherAddress: address(this),
                otherAccountId: 0,
                data: abi.encode(
                    
                    
                    msg.sender,
                    loanAmount,
                    punkIndex
                )
            });
        
        operations[2] = Actions.ActionArgs({
            actionType: Actions.ActionType.Deposit,
            accountId: 0,
            amount: Types.AssetAmount({
                sign: true,
                denomination: Types.AssetDenomination.Wei,
                ref: Types.AssetReference.Delta,
                value: loanAmount + 2 
            }),
            primaryMarketId: 0, 
            secondaryMarketId: 0,
            otherAddress: address(this),
            otherAccountId: 0,
            data: ""
        });

        Account.Info[] memory accountInfos = new Account.Info[](1);
        accountInfos[0] = Account.Info({owner: address(this), number: 1});

        soloMargin.operate(accountInfos, operations);
    }
    
    
    function callFunction(address sender, Account.Info memory accountInfo, bytes memory data) external override {
        
        (
            
            address payable actualSender,
            uint loanAmount,
            uint256 punkIndex

        ) = abi.decode(data, (
            address, uint, uint256
        ));
        
        
        
        
        WETH.withdraw(loanAmount);
        punkContract.enterBidForPunk{value:loanAmount}(punkIndex);
        punkContract.withdrawBidForPunk(punkIndex);
        punkContract.withdraw();
        WETH.deposit{value: loanAmount}();
        
        
        require(WETH.balanceOf(address(this)) > loanAmount + 2, "CANNOT REPAY LOAN");
    }

    function setReverseRecord(string memory _name) external 
    {
        require (msg.sender==owner);
        ensRegistar.setName(_name);
    }
}