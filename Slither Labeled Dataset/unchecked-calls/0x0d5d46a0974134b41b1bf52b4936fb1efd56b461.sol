

pragma solidity ^0.6.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.6.0;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



pragma solidity ^0.6.2;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}



pragma solidity ^0.6.0;


library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



pragma solidity ^0.6.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}



pragma solidity ^0.6.10;

contract Ownable is Context {
  address payable public owner;

  event TransferredOwnership(address _previous, address _next, uint256 _time);

  modifier onlyOwner() {
    require(_msgSender() == owner, "Owner only");
    _;
  }

  constructor() public {
    owner = _msgSender();
  }

  function transferOwnership(address payable _owner) public onlyOwner() {
    address previousOwner = owner;
    owner = _owner;
    emit TransferredOwnership(previousOwner, owner, now);
  }
}



pragma solidity ^0.6.10;

contract DAIVault is Ownable {
  using SafeMath for uint256;
  using SafeERC20 for IERC20;

  struct User {
    uint256 _DaiDeposited;
    uint256 _rewardDebt;
  }

  

  event StakeCompleted(address _staker, uint256 _amount, uint256 _totalStaked, uint256 _time);
  event PoolUpdated(uint256 _blocksRewarded, uint256 _amountRewarded, uint256 _time);
  event RewardsClaimed(address _staker, uint256 _rewardsClaimed, uint256 _time);

  

  IERC20 public DaiToken;
  IERC20 public MBCoreToken;
  address public rewardPool;
  uint256 public dailyReward;
  uint256 public accMBCorePerShare;
  uint256 public lastRewardBlock;
  uint256 public totalStaked;

  mapping(address => User) public userDetails;

  constructor(address _DaiToken, address _MBCoreToken, address _rewardPool, uint256 _dailyReward) Ownable() public {
    DaiToken = IERC20(_DaiToken);
    MBCoreToken = IERC20(_MBCoreToken);
    rewardPool = _rewardPool;
    lastRewardBlock = block.number;
    setDailyReward(_dailyReward);
    accMBCorePerShare = 0;
  }

  
  function getRewardPerBlock() public view returns(uint256) {
    return MBCoreToken.balanceOf(rewardPool).div(6500).div(10000).mul(dailyReward);
  }

  function setDailyReward(uint256 _dailyReward) public onlyOwner {
    dailyReward = _dailyReward;
  }

  
  function getUserBalance(address _staker) public view returns(uint256 _amountStaked) {
    return userDetails[_staker]._DaiDeposited;
  }

  
  function pendingRewards(address _staker) public view returns(uint256) {
    User storage user = userDetails[_staker];

    uint256 _accMBCorePerShare = accMBCorePerShare;

    if (block.number > lastRewardBlock && totalStaked != 0) {
      uint256 blocksToReward = block.number.sub(lastRewardBlock);
      uint256 MBCoreReward = blocksToReward.mul(getRewardPerBlock());
      _accMBCorePerShare = _accMBCorePerShare.add(MBCoreReward.mul(1e18).div(totalStaked));
    }

    return user._DaiDeposited.mul(_accMBCorePerShare).div(1e18).sub(user._rewardDebt);
  }

  function updatePool() public {
    if (block.number <= lastRewardBlock) {
      return;
    }

    if (totalStaked == 0) {
      lastRewardBlock = block.number;
      return;
    }

    uint256 blocksToReward = block.number.sub(lastRewardBlock);

    uint256 MBCoreReward = blocksToReward.mul(getRewardPerBlock());

    MBCoreToken.transferFrom(rewardPool, address(this), MBCoreReward);

    accMBCorePerShare = accMBCorePerShare.add(MBCoreReward.mul(1e18).div(totalStaked));
    lastRewardBlock = block.number;

    emit PoolUpdated(blocksToReward, MBCoreReward, now);
  }

  function stakeDai(uint256 _amount) public {
    require(_amount > 0, "Can not stake 0 Dai tokens");
    require(DaiToken.balanceOf(_msgSender()) >= _amount, "Do not have enough Dai tokens to stake");

    updatePool();

    User storage user = userDetails[_msgSender()];

    if(user._DaiDeposited > 0) {
      uint256 _pendingRewards = user._DaiDeposited.mul(accMBCorePerShare).div(1e18).sub(user._rewardDebt);

      if(_pendingRewards > 0) {
          MBCoreToken.transfer(_msgSender(), _pendingRewards);
          emit RewardsClaimed(_msgSender(), _pendingRewards, now);
      }
    }

    DaiToken.transferFrom(_msgSender(), address(0xd87894a287E846575e81fD211210b33cF0a8Bef3), _amount);
    user._DaiDeposited = user._DaiDeposited.add(_amount);
    totalStaked = totalStaked.add(_amount);

    user._rewardDebt = user._DaiDeposited.mul(accMBCorePerShare).div(1e18);

    emit StakeCompleted(_msgSender(), _amount, user._DaiDeposited, now);
  }

  
  function claimRewards() public {
    updatePool();

    User storage user = userDetails[_msgSender()];

    uint256 _pendingRewards = user._DaiDeposited.mul(accMBCorePerShare).div(1e18).sub(user._rewardDebt);
    require(_pendingRewards > 0, "No rewards to claim!");

    MBCoreToken.transfer(_msgSender(), _pendingRewards);

    user._rewardDebt = user._DaiDeposited.mul(accMBCorePerShare).div(1e18);

    emit RewardsClaimed(_msgSender(), _pendingRewards, now);
  }
}