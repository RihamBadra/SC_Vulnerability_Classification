








pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}






pragma solidity ^0.8.1;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        return account.code.length > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}






pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address to, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity ^0.8.0;






contract BaseledgerUBTSplitter is Context, Ownable {
    event PayeeUpdated(
        address indexed token,
        address indexed revenueAddress,
        string baseledgerValidatorAddress,
        uint256 shares,
        uint256 lastEventNonce
    );

    event UbtPaymentReleased(
        IERC20 indexed token,
        address revenueAddress,
        address stakingAddress,
        uint256 amount
    );

    event UbtDeposited(
        address indexed token,
        address indexed sender,
        string baseledgerDestinationAddress,
        uint256 tokenAmount,
        uint256 lastEventNonce
    );

    uint256 public totalShares;
    uint256 public lastEventNonce = 2;

    mapping(address => uint256) public shares;
    mapping(address => address) public stakingAddresses;
    mapping(address => uint256) public ubtReleased;

    mapping(address => bool) public payees;

    uint256 public ubtTotalReleased;
    mapping(uint256 => mapping(address => uint256))
        public ubtReleasedPerRecipientInPeriods;

    uint256 public ubtToBeReleasedInPeriod;
    uint256 public ubtNotReleasedInPreviousPeriods;
    uint256 public ubtCurrentPeriod;

    address public ubtTokenContractAddress;

    uint256 public minDeposit = 100000000;

    constructor(address token) {
        ubtTokenContractAddress = token;
    }

    
    modifier zeroAddress(address address_) {
        require(address_ != address(0), "address is zero address");
        _;
    }

    
    modifier emptyString(string memory str) {
        bytes memory tempEmptyStringTest = bytes(str);
        require(tempEmptyStringTest.length != 0, "string is empty");
        _;
    }

    
    function deposit(uint256 amount, string memory baseledgerDestinationAddress)
        public
        emptyString(baseledgerDestinationAddress)
    {
        require(amount >= minDeposit, "amount should be above min deposit");

        uint256 allowance = IERC20(ubtTokenContractAddress).allowance(
            msg.sender,
            address(this)
        );

        require(allowance >= amount, "not enough allowance");

        lastEventNonce += 1;
        ubtToBeReleasedInPeriod += amount;

        IERC20(ubtTokenContractAddress).transferFrom(
            msg.sender,
            address(this),
            amount
        );

        emit UbtDeposited(
            ubtTokenContractAddress,
            msg.sender,
            baseledgerDestinationAddress,
            amount,
            lastEventNonce
        );
    }

    
    function release() public virtual {
        require(payees[msg.sender] == true, "msg.sender is not payee");
        require(shares[msg.sender] > 0, "msg.sender has no shares");

        uint256 alreadyReceivedSinceLastPayeeUpdate = ubtReleasedPerRecipientInPeriods[
                ubtCurrentPeriod
            ][msg.sender];
        uint256 toBeReleased = ubtToBeReleasedInPeriod +
            ubtNotReleasedInPreviousPeriods;
        uint256 payment = (shares[msg.sender] * toBeReleased) /
            totalShares -
            alreadyReceivedSinceLastPayeeUpdate;

        ubtReleased[msg.sender] += payment;
        ubtTotalReleased += payment;
        ubtReleasedPerRecipientInPeriods[ubtCurrentPeriod][
            msg.sender
        ] += payment;

        require(payment != 0, "msg.sender is not due payment");
        IERC20(ubtTokenContractAddress).transfer(msg.sender, payment);

        emit UbtPaymentReleased(
            IERC20(ubtTokenContractAddress),
            msg.sender,
            stakingAddresses[msg.sender],
            payment
        );
    }

    
    function addPayee(
        address revenueAddress,
        address stakingAddress,
        uint256 shares_,
        string memory baseledgerValidatorAddress
    )
        public
        onlyOwner
        zeroAddress(revenueAddress)
        zeroAddress(stakingAddress)
        emptyString(baseledgerValidatorAddress)
    {
        require(payees[revenueAddress] == false, "payee already exists");
        require(shares_ > 0, "shares are 0");

        payees[revenueAddress] = true;

        _updatePayeeSharesAndCurrentPeriod(
            revenueAddress,
            stakingAddress,
            shares_
        );

        emit PayeeUpdated(
            ubtTokenContractAddress,
            revenueAddress,
            baseledgerValidatorAddress,
            shares_,
            lastEventNonce
        );
    }

    
    function updatePayee(
        address revenueAddress,
        address stakingAddress,
        uint256 shares_,
        string memory baseledgerValidatorAddress
    )
        public
        onlyOwner
        zeroAddress(revenueAddress)
        zeroAddress(stakingAddress)
        emptyString(baseledgerValidatorAddress)
    {
        require(payees[revenueAddress] == true, "payee does not exist");
        totalShares = totalShares - shares[revenueAddress]; 

        _updatePayeeSharesAndCurrentPeriod(
            revenueAddress,
            stakingAddress,
            shares_
        );

        emit PayeeUpdated(
            ubtTokenContractAddress,
            revenueAddress,
            baseledgerValidatorAddress,
            shares_,
            lastEventNonce
        );
    }

    
    function changeMinDeposit(uint256 minDeposit_) public onlyOwner {
        require(minDeposit_ > 0, "min deposit must be > 0");

        minDeposit = minDeposit_;
    }

    function _updatePayeeSharesAndCurrentPeriod(
        address revenueAddress,
        address stakingAddress,
        uint256 shares_
    ) private {
        stakingAddresses[revenueAddress] = stakingAddress;
        shares[revenueAddress] = shares_;
        totalShares = totalShares + shares_;
        lastEventNonce = lastEventNonce + 1;

        ubtToBeReleasedInPeriod = 0;
        ubtCurrentPeriod += 1;
        ubtNotReleasedInPreviousPeriods = IERC20(ubtTokenContractAddress)
            .balanceOf(address(this));
    }
}