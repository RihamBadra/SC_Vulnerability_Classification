







pragma solidity ^0.8.0;






library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            
            
            
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}




pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




pragma solidity ^0.8.0;


interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}




pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}




pragma solidity ^0.8.0;




contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}




pragma solidity ^0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




pragma solidity ^0.8.0;



library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        
        
        
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}




pragma solidity ^0.8.0;




interface StakingPool {
    function deposit(uint256 poolId, uint256 _depositAmount) external;
    function withdraw(uint256 poolId, uint256 _withdrawAmount) external;
    function claim(uint256 poolId) external;
    function exit(uint256 poolId) external;
    function getStakeTotalUnclaimed(address _account, uint256 poolId) external view returns (uint256);
    function getStakeTotalDeposited(address _account, uint256 poolId) external view returns (uint256);
}


contract AlcxVault is ERC20 {

    
    using SafeERC20 for IERC20;

    event Harvest(address indexed harvester, uint256 fee); 

    event ChangedStrategistFee(uint256 fee);
    event ChangedHarvestFee(uint256 fee);

    address public strategist; 
    uint256 public strategistFee;

    
    uint256 public harvestFee; 
    uint256 constant MAX_BPS = 10000;
    uint256 constant MAX_STRATEGIST_FEE = 200;    
    uint256 constant MAX_HARVEST_FEE = 100;
    uint256 constant MAX_INT = 2 ** 256 - 1;

    
    uint256 constant POOL_ID = 1; 

    address constant ALCX_STAKING_POOL_ADDRESS = 0xAB8e74017a8Cc7c15FFcCd726603790d26d7DeCa;
    StakingPool private alcxStakingPool = StakingPool(ALCX_STAKING_POOL_ADDRESS);    
    address constant ALCX_ADDRESS = 0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF;
    IERC20 private alcx = IERC20(ALCX_ADDRESS);


    modifier onlyStrategist {
        require(msg.sender == strategist);
        _;
    }

    constructor(address _strategist) ERC20("Nuggies AlcxVault", "nALCX") {
        harvestFee = MAX_HARVEST_FEE; 
        strategistFee = MAX_STRATEGIST_FEE;
        strategist = _strategist;     

        
        alcx.approve(ALCX_STAKING_POOL_ADDRESS, MAX_INT); 
    }

    function setStrategistFee(uint256 _strategistFee) external onlyStrategist {
        require(_strategistFee <= MAX_STRATEGIST_FEE, "exceeds maximum fee"); 
        strategistFee = _strategistFee;
        emit ChangedStrategistFee(_strategistFee);
    }

    function setHarvestFee(uint256 _harvestFee) external onlyStrategist {
        require(_harvestFee <= MAX_HARVEST_FEE, "exceeds maximum fee");
        harvestFee = _harvestFee;
        emit ChangedHarvestFee(_harvestFee);
    }

    
    function totalAssets() external view returns (uint256 assets) {
        assets = 
            alcxStakingPool.getStakeTotalDeposited(address(this), POOL_ID) + 
            alcxStakingPool.getStakeTotalUnclaimed(address(this), POOL_ID);
    }

    
    function totalStakedAssets() external view returns (uint256 assets) {
        assets = alcxStakingPool.getStakeTotalDeposited(address(this), POOL_ID);
    }

    
    function totalPendingRewards() external view returns (uint256 rewards) {
        rewards = alcxStakingPool.getStakeTotalUnclaimed(address(this), POOL_ID);
    }

    
    function totalPendingHarvestFees() external view returns (uint256 pendingHarvestFees) {
        pendingHarvestFees = alcxStakingPool.getStakeTotalUnclaimed(address(this), POOL_ID) * harvestFee / MAX_BPS; 
    }

    
    
    function totalStakedAssets(address _user) external view returns(uint256 netAlcxAmount) {
        uint256 assets = _totalDiscountedAssets();
        
        if (totalSupply() == 0) {
            netAlcxAmount = 0;
        } else {
            netAlcxAmount = balanceOf(_user) * assets / totalSupply();
        }
    }

    
    function _totalDiscountedAssets() internal view returns (uint256 assets) {
        uint256 unclaimedRewards = alcxStakingPool.getStakeTotalUnclaimed(address(this), POOL_ID);
        uint256 discountedRewards = unclaimedRewards - (strategistFee + harvestFee) * unclaimedRewards / MAX_BPS;
        assets = alcxStakingPool.getStakeTotalDeposited(address(this), POOL_ID) + discountedRewards;
    }

    
    function deposit(uint256 _alcxAmount) external returns (uint256 shares) {
        require(_alcxAmount > 0, "must deposit nonzero amount");

        if (totalSupply() == 0) {
            shares = _alcxAmount;
        } else {
            
            shares = _alcxAmount * totalSupply() / _totalDiscountedAssets();
        }
        
        _mint(msg.sender, shares);

        alcx.safeTransferFrom(msg.sender, address(this), _alcxAmount);
        alcxStakingPool.deposit(POOL_ID, _alcxAmount); 
    }
 
    
    
    function withdraw(uint _amountShares) external returns (uint256 withdrawnAmount) {
        require(_amountShares > 0, "must withdraw nonzero amount");
        (uint256 strategistFeeAmount, uint256 harvestFeeAmount) = _exitFees();

        alcxStakingPool.exit(POOL_ID);

        
        
        withdrawnAmount = _amountShares * (alcx.balanceOf(address(this)) - harvestFeeAmount - strategistFeeAmount) / totalSupply()
            + harvestFeeAmount;

        _burn(msg.sender, _amountShares);

        alcx.safeTransfer(strategist, strategistFeeAmount); 
        alcx.safeTransfer(msg.sender, withdrawnAmount);

        alcxStakingPool.deposit(POOL_ID, alcx.balanceOf(address(this)));
    }

    
    function harvest() external returns (uint256 harvestFeeAmount) {
        uint256 strategistFeeAmount;
        (strategistFeeAmount, harvestFeeAmount) = _exitFees();

        alcxStakingPool.claim(POOL_ID);

        alcx.safeTransfer(strategist, strategistFeeAmount); 
        alcx.safeTransfer(msg.sender, harvestFeeAmount);

        alcxStakingPool.deposit(POOL_ID, alcx.balanceOf(address(this)));

        emit Harvest(msg.sender, harvestFeeAmount);
    }

    
    function _exitFees() internal view returns (uint256 strategistFeeAmount, uint256 harvestFeeAmount) {
        uint256 rewardAmount = alcxStakingPool.getStakeTotalUnclaimed(address(this), POOL_ID);  
        strategistFeeAmount = rewardAmount * strategistFee / MAX_BPS;
        harvestFeeAmount = rewardAmount * harvestFee / MAX_BPS;
    }

    
    
    
    
    function clearTokens(address token) external onlyStrategist {
        uint balance = IERC20(token).balanceOf(address(this));
        IERC20(token).safeTransfer(strategist, balance);
    }
}