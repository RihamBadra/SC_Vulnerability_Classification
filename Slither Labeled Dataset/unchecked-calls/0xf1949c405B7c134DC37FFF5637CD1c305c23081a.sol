pragma solidity 0.6.10;

interface IERC20 {

    

    function totalSupply() external view returns (uint256);



    

    function balanceOf(address account) external view returns (uint256);



    

    function transfer(address recipient, uint256 amount) external returns (bool);



    

    function allowance(address owner, address spender) external view returns (uint256);



    

    function approve(address spender, uint256 amount) external returns (bool);



    

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    

    event Transfer(address indexed from, address indexed to, uint256 value);



    

    event Approval(address indexed owner, address indexed spender, uint256 value);

}

interface notify {


    function notifyRewardAmount(uint256 reward) external;


}

contract UTap {


    IERC20 public Token;


    notify public Pool;


    uint256 public blocklock;


    address public bucket;





    constructor(


        IERC20 Tokent,


        address buckt,


        notify Poolt


    ) public {


        Token = Tokent;


        bucket = buckt;


        Pool = Poolt;


    }





    function tap() public {


        require(tx.origin == msg.sender, "UTap: External accounts only");


        require(blocklock <= now, "block");


        Token.transfer(bucket, Token.balanceOf(address(this)) / 50);


        blocklock = now + 7 days;


        Pool.notifyRewardAmount(Token.balanceOf(address(this)) / 50);


    }


}
