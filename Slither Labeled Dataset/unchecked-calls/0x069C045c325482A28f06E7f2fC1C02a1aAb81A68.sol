



pragma solidity 0.7.0;
pragma experimental ABIEncoderV2;






library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




library BoostersEnumerableMap {
    
    
    
    
    

    
    struct boosterInfo {
        address owner;
        string _type;
    }

    
    struct MapEntry {
        bytes32 _key;
        boosterInfo _NFT_Value;
    }

    struct Map {
        MapEntry[] _NFTs;                       
        mapping (bytes32 => uint256) _indexes;  
    }

    
    function _set(Map storage map, bytes32 key, boosterInfo memory _NFTvalue) private returns (bool) {
        uint256 keyIndex = map._indexes[key];   

        if (keyIndex == 0) { 
            map._NFTs.push( MapEntry({ _key: key, _NFT_Value: _NFTvalue }) );            
            map._indexes[key] = map._NFTs.length;        
            return true;
        } 
        else {
            map._NFTs[keyIndex - 1]._NFT_Value = _NFTvalue;
            return false;
        }
    }

    
    function _remove(Map storage map, bytes32 key) private returns (bool) {        
        uint256 keyIndex = map._indexes[key];   

        if (keyIndex != 0) { 
            
            

            uint256 toDeleteIndex = keyIndex - 1;
            uint256 lastIndex = map._NFTs.length - 1;

            
            MapEntry storage lastEntry = map._NFTs[lastIndex];
            
            map._NFTs[toDeleteIndex] = lastEntry;            
            map._indexes[lastEntry._key] = toDeleteIndex + 1;   
            
            map._NFTs.pop();                     
            delete map._indexes[key];              

            return true;
        } 
        else {
            return false;
        }
    }

    
    function _contains(Map storage map, bytes32 key) private view returns (bool) {
        return map._indexes[key] != 0;
    }

    
    function _length(Map storage map) private view returns (uint256) {
        return map._NFTs.length;
    }

   
    function _at(Map storage map, uint256 index) private view returns (bytes32, address, string memory) {
        require(map._NFTs.length > index, "EnumerableMap: index out of bounds");

        MapEntry storage entry = map._NFTs[index];
        return (entry._key, entry._NFT_Value.owner, entry._NFT_Value._type );
    }

    
    function _get(Map storage map, bytes32 key) private view returns (address, string memory) {
        return _get(map, key, "EnumerableMap: nonexistent key");
    }

    
    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (address, string memory) {
        uint256 keyIndex = map._indexes[key];
        require(keyIndex != 0, errorMessage); 
        return (map._NFTs[keyIndex - 1]._NFT_Value.owner, map._NFTs[keyIndex - 1]._NFT_Value._type); 
    }

    
    
    

    struct UintToNFTMap {
        Map _inner;
    }

    
    function set(UintToNFTMap storage map, uint256 key, boosterInfo memory _NFT_value) internal returns (bool) {
        return _set(map._inner, bytes32(key), _NFT_value );
    }

    
    function remove(UintToNFTMap storage map, uint256 key) internal returns (bool) {
        return _remove(map._inner, bytes32(key));
    }

    
    function contains(UintToNFTMap storage map, uint256 key) internal view returns (bool) {
        return _contains(map._inner, bytes32(key));
    }

    
    function length(UintToNFTMap storage map) internal view returns (uint256) {
        return _length(map._inner);
    }

   
    function at(UintToNFTMap storage map, uint256 index) internal view returns (uint256, address, string memory) {
        (bytes32 key, address _owner, string memory _type) = _at(map._inner, index);
        return (uint256(key), _owner, _type );
    }

    
    function get(UintToNFTMap storage map, uint256 key) internal view returns (address,string memory) {
        return _get(map._inner, bytes32(key));
    }

    
    function get(UintToNFTMap storage map, uint256 key, string memory errorMessage) internal view returns (address,string memory) {
        return _get(map._inner, bytes32(key), errorMessage);
    }
}




library BoostersEnumerableSet {
    

    
    struct ownedBooster {
        uint boostId;
        string _type;
    }

    struct Set {
        ownedBooster[] _NFTs;   

        
        
        mapping (uint256 => uint256) _indexes;
    }

    
    function _add(Set storage set, ownedBooster memory newNFT) private returns (bool) {
        if (!_contains(set, newNFT)) {
            set._NFTs.push(newNFT);             
            set._indexes[newNFT.boostId] = set._NFTs.length;  
            return true;
        } 
        else {
            return false;
        }
    }

    
    function _remove(Set storage set, ownedBooster memory _NFT) private returns (bool) {
        uint256 valueIndex = set._indexes[_NFT.boostId];  

        if (valueIndex != 0) {
            
            

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._NFTs.length - 1;

            
            

            ownedBooster memory lastvalue = set._NFTs[lastIndex];
            
            set._NFTs[toDeleteIndex] = lastvalue;                 
            set._indexes[lastvalue.boostId] = toDeleteIndex + 1;    

            set._NFTs.pop();              
            delete set._indexes[_NFT.boostId];     

            return true;
        } 
        else {
            return false;
        }
    }

    
    function _contains(Set storage set, ownedBooster memory _NFT) private view returns (bool) {
        return set._indexes[_NFT.boostId] != 0;
    }
    
    function _length(Set storage set) private view returns (uint256) {
        return set._NFTs.length;
    }


   
    function _at(Set storage set, uint256 index) private view returns (ownedBooster memory) {
        require(set._NFTs.length > index, "EnumerableSet: index out of bounds");
        return set._NFTs[index];
    }


    
    
    

    
    struct BoosterSet {
        Set _inner;
    }

    
    function add(BoosterSet storage set, ownedBooster memory _newNFT) internal returns (bool) {
        return _add(set._inner, _newNFT );
    }

    
    function remove(BoosterSet storage set, ownedBooster memory _NFT) internal returns (bool) {
        return _remove(set._inner, _NFT );
    }

    
    function contains(BoosterSet storage set, ownedBooster storage _NFT) internal view returns (bool) {
        return _contains(set._inner, _NFT );
    }

    
    function length(BoosterSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(BoosterSet storage set, uint256 index) internal view returns (ownedBooster memory) {
        return _at(set._inner, index) ;
    }
}



library BoostersStringUtils {

    
    
    
    function compare(string memory _a, string memory _b) internal pure returns (int) {
        bytes memory a = bytes(_a);
        bytes memory b = bytes(_b);
        uint minLength = a.length;
        if (b.length < minLength) minLength = b.length;
        
        for (uint i = 0; i < minLength; i ++)
            if (a[i] < b[i])
                return -1;
            else if (a[i] > b[i])
                return 1;
        if (a.length < b.length)
            return -1;
        else if (a.length > b.length)
            return 1;
        else
            return 0;
    }

    
    function equal(string memory _a, string memory _b)  internal pure returns (bool) {
        return compare(_a, _b) == 0;
    }

    
    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int) {
    	bytes memory h = bytes(_haystack);
    	bytes memory n = bytes(_needle);
    	if(h.length < 1 || n.length < 1 || (n.length > h.length)) 
    		return -1;
    	else if(h.length > (2**128 -1)) 
    		return -1;									
    	else
    	{
    		uint subindex = 0;
    		for (uint i = 0; i < h.length; i ++)
    		{
    			if (h[i] == n[0]) 
    			{
    				subindex = 1;
    				while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) 
    				{
    					subindex++;
    				}	
    				if(subindex == n.length)
    					return int(i);
    			}
    		}
    		return -1;
    	}	
    }
}




abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}




interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}




interface IERC721Receiver {
    
    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);
}



interface ISIGHBoosters {

    
    
    

    event baseURIUpdated(string baseURI);
    event newCategoryAdded(string _type, uint256 _platformFeeDiscount_, uint256 _sighPayDiscount_, uint256 _maxBoosters);
    event BoosterMinted(address _owner, string _type,string boosterURI,uint256 newItemId,uint256 totalBoostersOfThisCategory);
    event boosterURIUpdated(uint256 boosterId, string _boosterURI);
    event discountMultiplierUpdated(string _type,uint256 _platformFeeDiscount_,uint256 _sighPayDiscount_ );

    event BoosterWhiteListed(uint256 boosterId);
    event BoosterBlackListed(uint256 boosterId);

    
    
    
    
    function addNewBoosterType(string memory _type, uint256 _platformFeeDiscount_, uint256 _sighPayDiscount_, uint256 _maxBoosters) external returns (bool) ;
    function createNewBoosters(address _owner, string[] memory _type,  string[] memory boosterURI) external returns (uint256);
    function createNewSIGHBooster(address _owner, string memory _type,  string memory boosterURI, bytes memory _data ) external returns (uint256) ;
    function _updateBaseURI(string memory baseURI )  external ;
    function updateBoosterURI(uint256 boosterId, string memory boosterURI )  external returns (bool) ;
    function updateDiscountMultiplier(string memory _type, uint256 _platformFeeDiscount_,uint256 _sighPayDiscount_)  external returns (bool) ;

    function blackListBooster(uint256 boosterId) external;
    function whiteListBooster(uint256 boosterId) external;
    
    
    

    function name() external view  returns (string memory) ;
    function symbol() external view  returns (string memory) ;
    function totalSupply() external view  returns (uint256) ;
    function baseURI() external view returns (string memory) ;

    function tokenByIndex(uint256 index) external view  returns (uint256) ;

    function balanceOf(address _owner) external view returns (uint256 balance) ;    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view  returns (uint256) ; 

    function ownerOfBooster(uint256 boosterId) external view returns (address owner) ; 
    function tokenURI(uint256 boosterId) external view  returns (string memory) ;   

    function approve(address to, uint256 boosterId) external ;  
    function setApprovalForAll(address operator, bool _approved) external;


    function getApproved(uint256 boosterId) external view  returns (address);   
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    function transferFrom(address from, address to, uint256 boosterId) external;
    function safeTransferFrom(address from, address to, uint256 boosterId) external;
    function safeTransferFrom(address from, address to, uint256 boosterId, bytes memory data) external;

    
    
    

    function getAllBoosterTypes() external view returns (string[] memory);

    function isCategorySupported(string memory _category) external view returns (bool);
    function getDiscountRatiosForBoosterCategory(string memory _category) external view returns ( uint platformFeeDiscount, uint sighPayDiscount );

    function totalBoostersAvailable(string memory _category) external view returns (uint256);
    function maxBoostersAllowed(string memory _category) external view returns (uint256);

    function totalBoostersOwnedOfType(address owner, string memory _category) external view returns (uint256) ;  

    function isValidBooster(uint256 boosterId) external view returns (bool);
    function getBoosterCategory(uint256 boosterId) external view returns ( string memory boosterType );
    function getDiscountRatiosForBooster(uint256 boosterId) external view returns ( uint platformFeeDiscount, uint sighPayDiscount );
    function getBoosterInfo(uint256 boosterId) external view returns (address farmer, string memory boosterType,uint platformFeeDiscount, uint sighPayDiscount, uint _maxBoosters );

    function isBlacklisted(uint boosterId) external view returns(bool) ;


}




library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}




library Strings {
    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        uint256 index = digits - 1;
        temp = value;
        while (temp != 0) {
            buffer[index--] = byte(uint8(48 + temp % 10));
            temp /= 10;
        }
        return string(buffer);
    }
}




library Counters {
    using SafeMath for uint256;

    struct Counter {
        
        
        
        uint256 _value; 
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        
        counter._value += 1;
    }

    function decrement(Counter storage counter) internal {
        counter._value = counter._value.sub(1);
    }
}




abstract contract ERC165 is IERC165 {
    
    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;

    
    mapping(bytes4 => bool) private _supportedInterfaces;

    constructor () {
        
        
        _registerInterface(_INTERFACE_ID_ERC165);
    }

    
    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {
        return _supportedInterfaces[interfaceId];
    }

    
    function _registerInterface(bytes4 interfaceId) internal virtual {
        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
        _supportedInterfaces[interfaceId] = true;
    }
}




interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(address from, address to, uint256 tokenId) external;

    
    function transferFrom(address from, address to, uint256 tokenId) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;
}




abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}




interface IERC721Enumerable is IERC721 {

    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}




interface IERC721Metadata is IERC721 {

    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function tokenURI(uint256 tokenId) external view returns (string memory);
}



contract SIGHBoosters is ISIGHBoosters, ERC165,IERC721Metadata,IERC721Enumerable, Ownable {

    using Counters for Counters.Counter;
    Counters.Counter private _boosterIds;

    using SafeMath for uint256;
    using Address for address;
    using BoostersEnumerableSet for BoostersEnumerableSet.BoosterSet;
    using BoostersEnumerableMap for BoostersEnumerableMap.UintToNFTMap;
    using Strings for uint256;
    using BoostersStringUtils for string;

    
    
    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;
    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;
    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;
    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;

    string private _name;
    string private _symbol;
    mapping (uint256 => string) private _BoostURIs;
    string private _baseURI;

    struct boosterCategory {
        bool isSupported;
        uint256 totalBoosters;
        uint256 _platformFeeDiscount;
        uint256 _sighPayDiscount;
        uint256 maxBoosters;
    }
    
    string[] private boosterTypesList ;
    mapping (string => boosterCategory) private boosterCategories;

    mapping(uint => bool) blacklistedBoosters;                                    
    mapping (uint256 => string) private _BoosterCategory;
    mapping (uint256 => address) private _BoosterApprovals;                       
    mapping (address => mapping (address => bool)) private _operatorApprovals;    
   
    mapping (address => BoostersEnumerableSet.BoosterSet) private farmersWithBoosts;     
    BoostersEnumerableMap.UintToNFTMap private boostersData;                            


    constructor(string memory name_, string memory symbol_)  {
        _name = name_;
        _symbol = symbol_;

        _registerInterface(_INTERFACE_ID_ERC721);
        _registerInterface(_INTERFACE_ID_ERC721_METADATA);
        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);
    }


    
    
    

    function addNewBoosterType(string memory _type, uint256 _platformFeeDiscount_, uint256 _sighPayDiscount_, uint256 _maxBoosters) public override onlyOwner returns (bool) {
        require(!boosterCategories[_type].isSupported,"BOOSTERS: Type already exists");
        boosterCategories[_type] =  boosterCategory({isSupported: true, totalBoosters:0, _platformFeeDiscount: _platformFeeDiscount_, _sighPayDiscount: _sighPayDiscount_,maxBoosters: _maxBoosters  });
        boosterTypesList.push(_type);
        emit newCategoryAdded(_type,_platformFeeDiscount_,_sighPayDiscount_,_maxBoosters);
        return true;
    }

    function _updateBaseURI(string memory baseURI )  public override onlyOwner {
        _baseURI = baseURI;
        emit baseURIUpdated(baseURI);
     }

    function updateDiscountMultiplier(string memory _type, uint256 _platformFeeDiscount_,uint256 _sighPayDiscount_)  public override onlyOwner returns (bool) {
        require(boosterCategories[_type].isSupported,"BOOSTERS: Type doesn't exist");
        boosterCategories[_type]._platformFeeDiscount = _platformFeeDiscount_;
        boosterCategories[_type]._sighPayDiscount = _sighPayDiscount_;
        emit discountMultiplierUpdated(_type,_platformFeeDiscount_,_sighPayDiscount_ );
        return true;
     }

    function createNewBoosters(address receiver, string[] memory _type,  string[] memory boosterURI) public override onlyOwner returns (uint256) {
        require( _type.length == boosterURI.length, 'Size not equal');
        bytes memory _data;
        uint i;
        for(; i< _type.length; i++) {
            createNewSIGHBooster(receiver, _type[i], boosterURI[i], _data);
        }
        return i;
    }

    function createNewSIGHBooster(address _owner, string memory _type,  string memory boosterURI, bytes memory _data) public override onlyOwner returns (uint256) {
        require(boosterCategories[_type].isSupported,'Not a valid Type');
        require( boosterCategories[_type].maxBoosters > boosterCategories[_type].totalBoosters ,'Max Boosters limit reached');
        require(_boosterIds.current() < 65535, 'Max Booster limit reached');

        _boosterIds.increment();
        uint256 newItemId = _boosterIds.current();

        _safeMint(_owner, newItemId, _type,_data);
        _setBoosterURI(newItemId,boosterURI);
        _setType(newItemId,_type);

        boosterCategories[_type].totalBoosters = boosterCategories[_type].totalBoosters.add(1);

        emit BoosterMinted(_owner,_type,boosterURI,newItemId,boosterCategories[_type].totalBoosters);
        return newItemId;
    }


    
    function updateBoosterURI(uint256 boosterId, string memory boosterURI )  public override onlyOwner returns (bool) {
        require(_exists(boosterId), "Non-existent Booster");
        _setBoosterURI(boosterId,boosterURI);
        return true;
     }



    function blackListBooster(uint256 boosterId) external override onlyOwner {
        require(_exists(boosterId), "Non-existent Booster");
        blacklistedBoosters[boosterId] = true;
        emit BoosterBlackListed(boosterId);
    }

    function whiteListBooster(uint256 boosterId) external override onlyOwner {
        require(_exists(boosterId), "Non-existent Booster");
        require(blacklistedBoosters[boosterId], "Already whitelisted");
        blacklistedBoosters[boosterId] = false;
        emit BoosterWhiteListed(boosterId);
    }

    
    
    

    function name() public view override(IERC721Metadata,ISIGHBoosters) returns (string memory) {
        return _name;
    }

    function symbol() public view override(IERC721Metadata,ISIGHBoosters) returns (string memory) {
        return _symbol;
    }

    
    function balanceOf(address _owner) external view override(IERC721,ISIGHBoosters) returns (uint256 balance) {
        require(_owner != address(0), "ERC721: balance query for the zero address");
        return farmersWithBoosts[_owner].length();
    }

    
    function tokenOfOwnerByIndex(address owner, uint256 index) public view override(IERC721Enumerable,ISIGHBoosters) returns (uint256 id) {
        BoostersEnumerableSet.ownedBooster memory _booster = farmersWithBoosts[owner].at(index);
        return _booster.boostId;
    }

    
    function ownerOf(uint256 boosterId) public view override returns (address owner) {
         owner =  ownerOfBooster(boosterId);
         return owner;
    }

    
    function ownerOfBooster(uint256 boosterId) public view override returns (address owner) {
         ( owner, ) =  boostersData.get(boosterId);
         return owner;
    }

    
    function tokenURI(uint256 boosterId) public view override(IERC721Metadata,ISIGHBoosters) returns (string memory) {
        require(_exists(boosterId), "Non-existent Booster");
        string memory _boostURI = _BoostURIs[boosterId];
        
        if (bytes(_baseURI).length == 0 && bytes(_boostURI).length > 0) {                                  
            return _boostURI;
        }

        if (bytes(_baseURI).length > 0 && bytes(_boostURI).length > 0) {                                  
            return string(abi.encodePacked(_baseURI, _boostURI));
        }
        
        if (bytes(_baseURI).length > 0 && bytes(_boostURI).length == 0) {                                  
            return string(abi.encodePacked(_baseURI, boosterId.toString()));
        }

        return boosterId.toString();
    }

    function baseURI() public view override returns (string memory) {
        return _baseURI;
    }

    function totalSupply() public view override(IERC721Enumerable,ISIGHBoosters) returns (uint256) {
        return boostersData.length();
    }

    function tokenByIndex(uint256 index) public view override(IERC721Enumerable,ISIGHBoosters) returns (uint256) {
        (uint256 _boostId, , ) = boostersData.at(index);
        return _boostId;
    }

    
    function approve(address to, uint256 boosterId) override(IERC721,ISIGHBoosters) external {
        address _owner = ownerOfBooster(boosterId);
        require(to != _owner, "BOOSTERS: Owner cannot be approved");
        require(_msgSender() == _owner || isApprovedForAll(_owner, _msgSender()),"BOOSTERS: Neither owner nor approved");
        _approve(to, boosterId);
    }

    
    function getApproved(uint256 boosterId) public view override(IERC721,ISIGHBoosters) returns (address) {
        require(_exists(boosterId), "BOOSTERS: Non-existent Booster");
        return _BoosterApprovals[boosterId];
    }

    function setApprovalForAll(address operator, bool _approved) public virtual override(IERC721,ISIGHBoosters) {
        require(operator != _msgSender(), "BOOSTERS: Caller cannot be Approved");
        _operatorApprovals[_msgSender()][operator] = _approved;
        emit ApprovalForAll(_msgSender(), operator, _approved);
    }

    function isApprovedForAll(address owner, address operator) public view override(IERC721,ISIGHBoosters) returns (bool) {
       return _operatorApprovals[owner][operator];
    }

    function safeTransferFrom(address from, address to, uint256 boosterId)  public virtual override(IERC721,ISIGHBoosters) {
        safeTransferFrom(from, to, boosterId, "");
    }

    function safeTransferFrom(address from, address to, uint256 boosterId, bytes memory data) public virtual override(IERC721,ISIGHBoosters) {
        require(!blacklistedBoosters[boosterId], "Booster blacklisted");
        require(_isApprovedOrOwner(_msgSender(), boosterId), "BOOSTERS: Neither owner nor approved");
        _safeTransfer(from, to, boosterId, data);
    }


    function transferFrom(address from, address to, uint256 boosterId) public virtual override(IERC721,ISIGHBoosters) {
        require(!blacklistedBoosters[boosterId], "Booster blacklisted");
        require(_isApprovedOrOwner(_msgSender(), boosterId), "BOOSTERS: Neither owner nor approved");
        _transfer(from, to, boosterId);
    }


    
    
    

    
    function totalBoostersOwnedOfType(address owner, string memory _category) external view override returns (uint) {
        require(owner != address(0), "SIGH BOOSTERS: zero address query");
        require(boosterCategories[_category].isSupported, "Not valid Type");

        BoostersEnumerableSet.BoosterSet storage boostersOwned = farmersWithBoosts[owner];

        if (boostersOwned.length() == 0) {
            return 0;
        }

        uint ans;

        for (uint32 i=0; i < boostersOwned.length(); i++ ) {
            BoostersEnumerableSet.ownedBooster memory _booster = boostersOwned.at(i);
            if ( _booster._type.equal(_category) ) {
                ans = ans + 1;
            }
        }

        return ans ;
    }

    
    function getBoosterInfo(uint256 boosterId) external view override returns (address farmer, string memory boosterType, uint platformFeeDiscount, uint sighPayDiscount, uint _maxBoosters ) {
         ( farmer, boosterType ) =  boostersData.get(boosterId);
         platformFeeDiscount = boosterCategories[boosterType]._platformFeeDiscount;
         sighPayDiscount = boosterCategories[boosterType]._sighPayDiscount ;
        _maxBoosters =  boosterCategories[boosterType].maxBoosters ;
    }

    function isCategorySupported(string memory _category) external view override returns (bool) {
        return boosterCategories[_category].isSupported;
    }

    function totalBoostersAvailable(string memory _category) external view override returns (uint256) {
        return boosterCategories[_category].totalBoosters;
    }

    function maxBoostersAllowed(string memory _category) external view override returns (uint256) {
        return boosterCategories[_category].maxBoosters;
    }

    
    function getBoosterCategory(uint256 boosterId) public view override returns ( string memory boosterType ) {
         ( , boosterType ) =  boostersData.get(boosterId);
    }

    
    function getDiscountRatiosForBooster(uint256 boosterId) external view override returns ( uint platformFeeDiscount, uint sighPayDiscount ) {
        require(_exists(boosterId), "Non-existent Booster");
        platformFeeDiscount =  boosterCategories[getBoosterCategory(boosterId)]._platformFeeDiscount;
        sighPayDiscount =  boosterCategories[getBoosterCategory(boosterId)]._sighPayDiscount;
    }

    
    function getDiscountRatiosForBoosterCategory(string memory _category) external view override returns ( uint platformFeeDiscount, uint sighPayDiscount ) {
        require(boosterCategories[_category].isSupported,"BOOSTERS: Type doesn't exist");
        platformFeeDiscount =  boosterCategories[_category]._platformFeeDiscount;
        sighPayDiscount =  boosterCategories[_category]._sighPayDiscount;
    }


    function isValidBooster(uint256 boosterId) external override view returns (bool) {
        return _exists(boosterId);
    }
    
    
    
    function getAllBoosterTypes() external override view returns (string[] memory) {
        return boosterTypesList;
    }   
    
    









    
    function isBlacklisted(uint boosterId) external override view returns(bool) {
        return blacklistedBoosters[boosterId];
    }





    
    
    

    
    function _safeMint(address to, uint256 boosterId, string memory _typeOfBoost, bytes memory _data) internal {
        _mint(to, boosterId, _typeOfBoost);
        require(_checkOnERC721Received(address(0), to, boosterId, _data), "BOOSTERS: Transfer to non ERC721Receiver implementer");
    }


    
    function _mint(address to, uint256 boosterId, string memory _typeOfBoost) internal  {
        require(to != address(0), "BOOSTERS: Cannot mint to zero address");
        require(!_exists(boosterId), "BOOSTERS: Already minted");

        BoostersEnumerableSet.ownedBooster memory newBooster = BoostersEnumerableSet.ownedBooster({ boostId: boosterId, _type: _typeOfBoost });
        BoostersEnumerableMap.boosterInfo memory newBoosterInfo = BoostersEnumerableMap.boosterInfo({ owner: to, _type: _typeOfBoost });

        farmersWithBoosts[to].add(newBooster);
        boostersData.set(boosterId, newBoosterInfo);

        emit Transfer(address(0), to, boosterId);
    }

    
    function _exists(uint256 boosterId) internal view returns (bool) {
        return boostersData.contains(boosterId);
    }


    
    function _setBoosterURI(uint256 boosterId, string memory _boosterURI) internal  {
        _BoostURIs[boosterId] = _boosterURI;
         emit boosterURIUpdated(boosterId,_boosterURI);
    }

    function _setType(uint256 boosterId, string memory _type) internal virtual {
        require(_exists(boosterId), "Non-existent Booster");
        _BoosterCategory[boosterId] = _type;
    }


    function _approve(address to, uint256 boosterId) private {
        _BoosterApprovals[boosterId] = to;
        emit Approval(ownerOfBooster(boosterId), to, boosterId);
    }

    
    function _isApprovedOrOwner(address spender, uint256 boosterId) internal view returns (bool) {
        require(_exists(boosterId), "Non-existent Booster");
        address owner = ownerOfBooster(boosterId);
        return (spender == owner || getApproved(boosterId) == spender || isApprovedForAll(owner, spender));
    }

    function _safeTransfer(address from, address to, uint256 boosterId, bytes memory _data) internal virtual {
        _transfer(from, to, boosterId);
        require(_checkOnERC721Received(from, to, boosterId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    function _transfer(address from, address to, uint256 boosterId) internal virtual {
        require(ownerOfBooster(boosterId) == from, "BOOSTERS: Not owned");
        require(to != address(0), "BOOSTERS: Transfer to the zero address");


        _approve(address(0), boosterId);          
        
        BoostersEnumerableSet.ownedBooster memory _ownedBooster = BoostersEnumerableSet.ownedBooster({boostId: boosterId, _type: _BoosterCategory[boosterId] });

        farmersWithBoosts[from].remove(_ownedBooster);
        farmersWithBoosts[to].add(_ownedBooster);

        BoostersEnumerableMap.boosterInfo memory _boosterInfo = BoostersEnumerableMap.boosterInfo({owner: to, _type: _BoosterCategory[boosterId] });
        boostersData.set(boosterId, _boosterInfo);

        emit Transfer(from, to, boosterId);
    }

    
    function _checkOnERC721Received(address from, address to, uint256 boosterId, bytes memory _data) private returns (bool) {
        if (!to.isContract()) {
            return true;
        }
        bytes memory returndata = to.functionCall(abi.encodeWithSelector( IERC721Receiver(to).onERC721Received.selector, _msgSender(), from, boosterId, _data ), "ERC721: transfer to non ERC721Receiver implementer");
        bytes4 retval = abi.decode(returndata, (bytes4));
        return (retval == _ERC721_RECEIVED);
    }








}