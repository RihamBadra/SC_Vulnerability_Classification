







pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}





pragma solidity ^0.8.0;


interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}





pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}





pragma solidity ^0.8.0;




contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}




pragma solidity ^0.8.0;

contract MockERC20 is ERC20 {
    constructor(uint256 totalSupply) ERC20("TokenT", "TTT") {
        _mint(msg.sender, totalSupply);
    }
}




pragma solidity ^0.8.0;

interface IVaultTransfers {
    function deposit(uint256 _amount) external;

    function depositFor(uint256 _amount, address _for) external;

    function depositAll() external;

    function withdraw(uint256 _amount) external;

    function withdrawAll() external;
}




pragma solidity ^0.8.0;

contract MockVault is IVaultTransfers {
    function deposit(uint256 _amount) external override {
    }

    function depositFor(uint256 _amount, address _for) external override {
    }

    function depositAll() external override {
    }

    function withdraw(uint256 _amount) external override {
    }

    function withdrawAll() external override {
    }
}




pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}




pragma solidity >=0.5.0;

interface IWETH {
    function deposit() external payable;
    function transfer(address to, uint value) external returns (bool);
    function withdraw(uint) external;
}




pragma solidity ^0.8.0;




contract XBERouter {
    IWETH public WETH;
    IERC20 public XBE;
    IUniswapV2Pair  public pair;
    IVaultTransfers  public vault;
    address private smallestTokenAddress;

    modifier ensure(uint256 deadline) {
        require(deadline >= block.timestamp, "EXPIRED");
        _;
    }

    constructor(
        address _vaultAddress,
        address _pair,
        address _WETH,
        address _XBE
    ) {
        pair = IUniswapV2Pair(_pair);
        WETH = IWETH(_WETH);
        XBE = IERC20(_XBE);
        vault = IVaultTransfers(_vaultAddress);
        smallestTokenAddress = _WETH < _XBE ? _WETH : _XBE;

        pair.approve(address(vault), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);
    }

    function addLiquidity(uint256 _deadline, uint256 _tokenOutMin)
        public
        payable
        ensure(_deadline)
    {
        require(msg.value > 0, "ZERO_ETH");
        uint256 half = msg.value / 2;
        require(_getAmountXBE(half) >= _tokenOutMin, "PRICE_CHANGED");
        uint256 XBEfromSwap = _swapETHforXBE(half);
        (
            uint256 liquidityXBE,
            uint256 liquidityWETH,
            uint256 liquidityTokens
        ) = _addLiquidity(XBEfromSwap, half);
        if (XBEfromSwap - liquidityXBE > 0)
            XBE.transfer(msg.sender, XBEfromSwap - liquidityXBE);
        if (half - liquidityWETH > 0)
            payable(msg.sender).transfer(half - liquidityWETH);
        vault.depositFor(liquidityTokens, msg.sender);
    }

    function getMinSwapAmountXBE(uint256 _amountETH)
        public
        view
        returns (uint256)
    {
        return _getAmountXBE(_amountETH);
    }

    function _swapETHforXBE(uint256 _amountETH)
        internal
        returns (uint256 amountXBE)
    {
        amountXBE = _getAmountXBE(_amountETH);
        WETH.deposit{value: _amountETH}();
        WETH.transfer(address(pair), _amountETH);
        (uint256 amount0Out, uint256 amount1Out) = address(WETH) == smallestTokenAddress
            ? (uint256(0), amountXBE)
            : (amountXBE, uint256(0));
        pair.swap(amount0Out, amount1Out, address(this), new bytes(0));
    }

    function _getAmountXBE(uint256 _amountETH) internal view returns (uint256) {
        address pairAddress = address(pair);
        uint256 reserveETH = IERC20(address(WETH)).balanceOf(pairAddress);
        uint256 reserveXBE = XBE.balanceOf(pairAddress);
        uint256 amountInWithFee = _amountETH * 997;
        uint256 numerator = amountInWithFee * reserveXBE;
        uint256 denominator = reserveETH * 1000 + amountInWithFee;
        return numerator / denominator;
    }

    function _addLiquidity(uint256 _amountXBEdesired, uint256 _amountETHdesired)
        internal
        returns (
            uint256 liquidityXBE,
            uint256 liquidityETH,
            uint256 lpTokens
        )
    {
        uint256 reserveETH = IERC20(address(WETH)).balanceOf(address(pair));
        uint256 reserveXBE = XBE.balanceOf(address(pair));
        uint256 amountETHOptimal = (_amountXBEdesired * reserveETH) /
            reserveXBE;
        if (amountETHOptimal <= _amountETHdesired) {
            (liquidityXBE, liquidityETH) = (
                _amountXBEdesired,
                amountETHOptimal
            );
        } else {
            uint256 amountXBEOptimal = (_amountETHdesired * reserveXBE) /
                reserveETH;
            require(amountXBEOptimal <= _amountXBEdesired);
            (liquidityXBE, liquidityETH) = (
                amountXBEOptimal,
                _amountETHdesired
            );
        }
        XBE.transfer(address(pair), liquidityXBE);
        WETH.deposit{value: liquidityETH}();
        WETH.transfer(address(pair), liquidityETH);
        lpTokens = pair.mint(address(this));
    }
}