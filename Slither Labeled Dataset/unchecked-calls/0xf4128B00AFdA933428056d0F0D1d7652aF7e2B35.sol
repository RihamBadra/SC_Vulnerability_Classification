pragma solidity 0.6.12;

abstract contract Context {

    function _msgSender() internal view virtual returns (address payable) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes memory) {

        this; 

        return msg.data;

    }

}

contract Ownable is Context {

    address private _owner;



    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    

    constructor () internal {

        address msgSender = _msgSender();

        _owner = msgSender;

        emit OwnershipTransferred(address(0), msgSender);

    }



    

    function owner() public view returns (address) {

        return _owner;

    }



    

    modifier onlyOwner() {

        require(_owner == _msgSender(), "Ownable: caller is not the owner");

        _;

    }



    

    function renounceOwnership() public virtual onlyOwner {

        emit OwnershipTransferred(_owner, address(0));

        _owner = address(0);

    }



    

    function transferOwnership(address newOwner) public virtual onlyOwner {

        require(newOwner != address(0), "Ownable: new owner is the zero address");

        emit OwnershipTransferred(_owner, newOwner);

        _owner = newOwner;

    }

}

library SafeMath {

    

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a, "SafeMath: addition overflow");



        return c;

    }



    

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        return sub(a, b, "SafeMath: subtraction overflow");

    }



    

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b <= a, errorMessage);

        uint256 c = a - b;



        return c;

    }



    

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        

        

        

        if (a == 0) {

            return 0;

        }



        uint256 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");



        return c;

    }



    

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        return div(a, b, "SafeMath: division by zero");

    }



    

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        uint256 c = a / b;

        



        return c;

    }



    

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        return mod(a, b, "SafeMath: modulo by zero");

    }



    

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b != 0, errorMessage);

        return a % b;

    }

}

interface IERC20 {

    

    function totalSupply() external view returns (uint256);



    

    function balanceOf(address account) external view returns (uint256);



    

    function transfer(address recipient, uint256 amount) external returns (bool);



    

    function allowance(address owner, address spender) external view returns (uint256);



    

    function approve(address spender, uint256 amount) external returns (bool);



    

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    

    event Transfer(address indexed from, address indexed to, uint256 value);



    

    event Approval(address indexed owner, address indexed spender, uint256 value);

}

library SafeERC20 {

    using SafeMath for uint256;

    using Address for address;



    function safeTransfer(IERC20 token, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));

    }



    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));

    }



    

    function safeApprove(IERC20 token, address spender, uint256 value) internal {

        

        

        

        

        require((value == 0) || (token.allowance(address(this), spender) == 0),

            "SafeERC20: approve from non-zero to non-zero allowance"

        );

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

    }



    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).add(value);

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    

    function _callOptionalReturn(IERC20 token, bytes memory data) private {

        

        

        



        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { 

            

            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

        }

    }

}

library Address {

    

    function isContract(address account) internal view returns (bool) {

        

        

        



        uint256 size;

        

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    

    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");



        

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return _functionCallWithValue(target, data, 0, errorMessage);

    }



    

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        return _functionCallWithValue(target, data, value, errorMessage);

    }



    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {

        require(isContract(target), "Address: call to non-contract");



        

        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);

        if (success) {

            return returndata;

        } else {

            

            if (returndata.length > 0) {

                



                

                assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}

interface IHegicStaking is IERC20 {

    function lockupPeriod() external view returns (uint256);

    function MAX_SUPPLY() external view returns (uint256);

    function lastBoughtTimestamp(address) external view returns (uint256);



    function claimProfit() external returns (uint profit);

    function buy(uint amount) external;

    function sell(uint amount) external;

    function profitOf(address account) external view returns (uint profit);

}

interface IHegicStakingETH is IHegicStaking {

    function sendProfit() external payable;

}

interface IHegicStakingERC20 is IHegicStaking {

    function sendProfit(uint amount) external;

}

contract ERC20 is Context, IERC20 {

    using SafeMath for uint256;

    using Address for address;



    mapping (address => uint256) private _balances;



    mapping (address => mapping (address => uint256)) private _allowances;



    uint256 private _totalSupply;



    string private _name;

    string private _symbol;

    uint8 private _decimals;



    

    constructor (string memory name, string memory symbol) public {

        _name = name;

        _symbol = symbol;

        _decimals = 18;

    }



    

    function name() public view returns (string memory) {

        return _name;

    }



    

    function symbol() public view returns (string memory) {

        return _symbol;

    }



    

    function decimals() public view returns (uint8) {

        return _decimals;

    }



    

    function totalSupply() public view override returns (uint256) {

        return _totalSupply;

    }



    

    function balanceOf(address account) public view override returns (uint256) {

        return _balances[account];

    }



    

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(_msgSender(), recipient, amount);

        return true;

    }



    

    function allowance(address owner, address spender) public view virtual override returns (uint256) {

        return _allowances[owner][spender];

    }



    

    function approve(address spender, uint256 amount) public virtual override returns (bool) {

        _approve(_msgSender(), spender, amount);

        return true;

    }



    

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(sender, recipient, amount);

        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));

        return true;

    }



    

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

        return true;

    }



    

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

        return true;

    }



    

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {

        require(sender != address(0), "ERC20: transfer from the zero address");

        require(recipient != address(0), "ERC20: transfer to the zero address");



        _beforeTokenTransfer(sender, recipient, amount);



        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);

    }



    

    function _mint(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: mint to the zero address");



        _beforeTokenTransfer(address(0), account, amount);



        _totalSupply = _totalSupply.add(amount);

        _balances[account] = _balances[account].add(amount);

        emit Transfer(address(0), account, amount);

    }



    

    function _burn(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: burn from the zero address");



        _beforeTokenTransfer(account, address(0), amount);



        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");

        _totalSupply = _totalSupply.sub(amount);

        emit Transfer(account, address(0), amount);

    }



    

    function _approve(address owner, address spender, uint256 amount) internal virtual {

        require(owner != address(0), "ERC20: approve from the zero address");

        require(spender != address(0), "ERC20: approve to the zero address");



        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);

    }



    

    function _setupDecimals(uint8 decimals_) internal {

        _decimals = decimals_;

    }



    

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

}

contract HegicStakingPool is Ownable, ERC20{

    using SafeMath for uint;

    using SafeERC20 for IERC20;



    

    IERC20 public immutable HEGIC;

    IERC20 public immutable WBTC;



    mapping(Asset => IHegicStaking) public staking; 



    uint public STAKING_LOT_PRICE = 888_000e18;

    uint public ACCURACY = 1e32;



    address payable public FALLBACK_RECIPIENT;

    address payable public FEE_RECIPIENT;

    

    uint public DISCOUNTED_LOTS = 10;

    uint public DISCOUNT_FIRST_LOTS = 20000; 

    uint public DISCOUNT_FIRST_LOT = 50000; 



    uint public performanceFee = 5000;

    bool public depositsAllowed = true;

    uint public lockUpPeriod = 15 minutes;



    uint public totalBalance;

    uint public lockedBalance;

    uint public totalNumberOfStakingLots;

    mapping(Asset => uint) public numberOfStakingLots;

    mapping(Asset => uint) public totalProfitPerToken;



    enum Asset {WBTC, ETH}



    address[] owners;

    mapping(address => uint) public ownerPerformanceFee;

    mapping(address => bool) public isNotFirstTime;

    mapping(address => uint) public lastDepositTime;

    mapping(address => mapping(Asset => uint)) lastProfit;

    mapping(address => mapping(Asset => uint)) savedProfit;



    event Deposit(address account, uint amount);

    event Withdraw(address account, uint amount);

    event BuyLot(uint id, Asset asset, address account);

    event SellLot(uint id, Asset asset, address account);

    event ClaimedProfit(address account, Asset asset, uint netProfit, uint fee);



    constructor(IERC20 _HEGIC, IERC20 _WBTC, IHegicStaking _stakingWBTC, IHegicStaking _stakingETH) public ERC20("Staked HEGIC", "sHEGIC"){

        HEGIC = _HEGIC;

        WBTC = _WBTC;

        staking[Asset.WBTC] = _stakingWBTC;

        staking[Asset.ETH] = _stakingETH;



        FEE_RECIPIENT = msg.sender;

        FALLBACK_RECIPIENT = msg.sender;



        

        _HEGIC.approve(address(staking[Asset.WBTC]), 888e30);

        _HEGIC.approve(address(staking[Asset.ETH]), 888e30);

    }



    

    receive() external payable {}



    

    function allowDeposits(bool _allow) external onlyOwner {

        depositsAllowed = _allow;

    }



    

    function changePerformanceFee(uint _fee) external onlyOwner {

        require(_fee >= 0, "Fee too low");

        require(_fee <= 8000, "Fee too high");

        

        performanceFee = _fee;

    }



    

    function changeFeeRecipient(address _recipient) external onlyOwner {

        FEE_RECIPIENT = payable(_recipient);

    }



    

    function changeFallbackRecipient(address _recipient) external onlyOwner {

        FALLBACK_RECIPIENT = payable(_recipient);

    }



    

    function unlockAllFunds(bool _unlock) external onlyOwner {

        if(_unlock) lockUpPeriod = 0;

        else lockUpPeriod = 15 minutes;

    }



    

    function deposit(uint _amount) external {

        require(_amount > 0, "Amount too low");

        require(depositsAllowed, "Deposits are not allowed at the moment");

        

        

        

        if(ownerPerformanceFee[msg.sender] > performanceFee || !isNotFirstTime[msg.sender]) {

            ownerPerformanceFee[msg.sender] = performanceFee;

            

            if(!isNotFirstTime[msg.sender] && totalNumberOfStakingLots < 1){

                ownerPerformanceFee[msg.sender] = ownerPerformanceFee[msg.sender].mul(uint(100000).sub(DISCOUNT_FIRST_LOT)).div(100000);

            } else if(!isNotFirstTime[msg.sender] && totalNumberOfStakingLots < DISCOUNTED_LOTS){

                ownerPerformanceFee[msg.sender] = ownerPerformanceFee[msg.sender].mul(uint(100000).sub(DISCOUNT_FIRST_LOTS)).div(100000);

            }

            isNotFirstTime[msg.sender] = true;

        }

        lastDepositTime[msg.sender] = block.timestamp;

        

        depositHegic(_amount);



        while(totalBalance.sub(lockedBalance) >= STAKING_LOT_PRICE){

            buyStakingLot();

        }

    }



    

    function withdraw(uint _amount) public {

        require(_amount <= balanceOf(msg.sender), "Not enough balance");

        require(lastDepositTime[msg.sender].add(lockUpPeriod) <= block.timestamp, "You deposited less than 15 mins ago. Your funds are locked");



        while(totalBalance.sub(lockedBalance) < _amount){

            sellStakingLot();

        }



        withdrawHegic(_amount);

    }



    

    function claimProfitAndWithdraw() external {

        claimAllProfit();

        withdraw(balanceOf(msg.sender));

    }



    

    function claimAllProfit() public {

        claimProfit(Asset.WBTC);

        claimProfit(Asset.ETH);

    }



    

    function claimProfit(Asset _asset) public {

        uint profit = saveProfit(msg.sender, _asset);

        savedProfit[msg.sender][_asset] = 0;

        

        _transferProfit(profit, _asset, msg.sender, ownerPerformanceFee[msg.sender]);

    }



    

    function profitOf(address _account, Asset _asset) public view returns (uint profit) {

        return savedProfit[_account][_asset].add(getUnsaved(_account, _asset));

    }



    

    function getHegicStakingETH() public view returns (IHegicStaking HegicStakingETH){

        return staking[Asset.ETH];

    }



    

    function getHegicStakingWBTC() public view returns (IHegicStaking HegicStakingWBTC){

        return staking[Asset.WBTC];

    }



    

    function getUnsaved(address _account, Asset _asset) public view returns (uint profit) {

        profit = totalProfitPerToken[_asset].sub(lastProfit[_account][_asset]).add(getUnreceivedProfitPerToken(_asset)).mul(balanceOf(_account)).div(ACCURACY);

    }



    

    function updateProfit(Asset _asset) internal {

        uint profit;

        profit = staking[_asset].profitOf(address(this));

        if(profit > 0) staking[_asset].claimProfit();

        

        if(totalBalance <= 0) {

            if(_asset == Asset.ETH) FALLBACK_RECIPIENT.transfer(profit);

            else if(_asset == Asset.WBTC) WBTC.safeTransfer(FALLBACK_RECIPIENT, profit);

        } else totalProfitPerToken[_asset] = totalProfitPerToken[_asset].add(profit.mul(ACCURACY).div(totalBalance));

    }



    

    function _transferProfit(uint _amount, Asset _asset, address _account, uint _fee) internal {

        uint netProfit = _amount.mul(uint(100000).sub(_fee)).div(100000);

        uint fee = _amount.sub(netProfit);



        if(_asset == Asset.ETH){

            payable(_account).transfer(netProfit);

            FEE_RECIPIENT.transfer(fee);

        } else if (_asset == Asset.WBTC) {

            WBTC.safeTransfer(_account, netProfit);

            WBTC.safeTransfer(FEE_RECIPIENT, fee);

        }

        emit ClaimedProfit(_account, _asset, netProfit, fee);

    }



    

    function depositHegic(uint _amount) internal {

        totalBalance = totalBalance.add(_amount); 



        HEGIC.safeTransferFrom(msg.sender, address(this), _amount);



        _mint(msg.sender, _amount);

    }



    

    function withdrawHegic(uint _amount) internal {



        emit Withdraw(msg.sender, _amount);



        _burn(msg.sender, _amount);

        HEGIC.safeTransfer(msg.sender, _amount);

        totalBalance = totalBalance.sub(_amount);

    }



    

    function buyStakingLot() internal {

        

        Asset asset = Asset.ETH;

        if(numberOfStakingLots[Asset.ETH] > numberOfStakingLots[Asset.WBTC]){

            asset = Asset.WBTC;

        }



        if(staking[asset].totalSupply() == staking[asset].MAX_SUPPLY()){

            if(asset == Asset.ETH) asset = Asset.WBTC;

            else asset = Asset.ETH;

        }



        require(staking[asset].totalSupply() < staking[asset].MAX_SUPPLY(), "There are no more available lots for purchase");



        lockedBalance = lockedBalance.add(STAKING_LOT_PRICE);

        staking[asset].buy(1);

        emit BuyLot(block.timestamp, asset, msg.sender);

        totalNumberOfStakingLots++;

        numberOfStakingLots[asset]++;

    }



    

    function sellStakingLot() internal {

        Asset asset = Asset.ETH;

        if(numberOfStakingLots[Asset.ETH] < numberOfStakingLots[Asset.WBTC]){

            asset = Asset.WBTC;

        }



        

        

        if(staking[asset].lastBoughtTimestamp(address(this))

                .add(staking[asset].lockupPeriod()) > block.timestamp){

            if(asset == Asset.ETH) asset = Asset.WBTC;

            else asset = Asset.ETH;

        }

        

        if(staking[asset].balanceOf(address(this)) == 0){

            if(asset == Asset.ETH) asset = Asset.WBTC;

            else asset = Asset.ETH;

        }



        require(

            staking[asset].lastBoughtTimestamp(address(this))

                .add(staking[asset].lockupPeriod()) <= block.timestamp,

             "Lot sale is locked by Hegic. Funds should be available in less than 24h"

        );



        lockedBalance = lockedBalance.sub(STAKING_LOT_PRICE);

        staking[asset].sell(1);

        emit SellLot(block.timestamp, asset, msg.sender);

        totalNumberOfStakingLots--;

        numberOfStakingLots[asset]--;

    }



    

    function getUnreceivedProfitPerToken(Asset _asset) public view returns (uint unreceivedProfitPerToken){

        uint profit = staking[_asset].profitOf(address(this));

        

        unreceivedProfitPerToken = profit.mul(ACCURACY).div(totalBalance);

    }



    

    function saveProfit(address _account) internal {

        saveProfit(_account, Asset.WBTC);

        saveProfit(_account, Asset.ETH);

    }



    

    function saveProfit(address _account, Asset _asset) internal returns (uint profit) {

        updateProfit(_asset);

        uint unsaved = getUnsaved(_account, _asset);

        lastProfit[_account][_asset] = totalProfitPerToken[_asset];

        profit = savedProfit[_account][_asset].add(unsaved);

        savedProfit[_account][_asset] = profit;

    }



    

    function _beforeTokenTransfer(address from, address to, uint256) internal override {

        if (from != address(0)) saveProfit(from);

        if (to != address(0)) saveProfit(to);

    }



    

    function canWithdraw(address _account) public view returns (bool) {

        return (lastDepositTime[_account].add(lockUpPeriod) <= block.timestamp);

    }

}
