





pragma solidity ^0.8.0;


library Counters {
    struct Counter {
        
        
        
        uint256 _value; 
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}






pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}






pragma solidity ^0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}





pragma solidity ^0.8.0;



abstract contract ERC165 is IERC165 {
    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}







pragma solidity ^0.8.0;



interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}







pragma solidity ^0.8.0;



interface IERC721Metadata is IERC721 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function tokenURI(uint256 tokenId) external view returns (string memory);
}





pragma solidity ^0.8.0;









contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    
    string private _name;

    
    string private _symbol;

    
    mapping(uint256 => address) private _owners;

    
    mapping(address => uint256) private _balances;

    
    mapping(uint256 => address) private _tokenApprovals;

    
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}








pragma solidity ^0.8.0;


interface IERC721Receiver {
    
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}







pragma solidity ^0.8.0;



interface IERC721Enumerable is IERC721 {
    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}





pragma solidity ^0.8.0;




abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    
    mapping(uint256 => uint256) private _ownedTokensIndex;

    
    uint256[] private _allTokens;

    
    mapping(uint256 => uint256) private _allTokensIndex;

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; 
            _ownedTokensIndex[lastTokenId] = tokenIndex; 
        }

        
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        
        
        
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; 
        _allTokensIndex[lastTokenId] = tokenIndex; 

        
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}







pragma solidity ^0.8.0;


library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}






pragma solidity ^0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}









pragma solidity ^0.8.0;






 

interface ColorToken is IERC165 {
   
    function balanceOf(address owner) external view returns (uint256 balance);

    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);
    
    function getColors(uint256 tokenId) external view returns (string memory); 
    
}

interface OriginsGenie is IERC165 {
   
     function generateData(uint _tokenId, string[5] memory _colors, string memory _lat, string memory _long, string memory _dir,
                            string memory _x, string memory _y, string memory _z, string memory _t )
                            external pure returns (string memory);
    
}




pragma solidity ^0.8.7;


contract Origins is  ERC721, ERC721Enumerable, Ownable {

    
    
    

    

    
    uint constant public MAX_SUPPLY = 8800;
    
    
    function claim() public {
        require(on);
        safeMint(_msgSender());
    }

    
    function fundDev() public payable returns (string memory) {
        
        
        
        
        
        if (msg.value > 0) {
            uint v = msg.value;
            coffeeFund.transfer(v);
            reserveMint(msg.sender, v);
            return "Thanks!!";
        }
    }




    
    OriginsGenie public genie; 
    ColorToken public palette; 
    
    using Counters for Counters.Counter; 
    Counters.Counter private _tokenIdCounter;

    address payable public coffeeFund; 
    
    bool public on = false;

    constructor (address _colorPallete)
    ERC721("ORIGINS", "NSEW") {
        palette = ColorToken(_colorPallete);
        
        coffeeFund = payable(msg.sender);
    }

    
    

    function getXYZ(uint _tokenId) public pure returns(string memory) {
        return string(abi.encodePacked(getX(_tokenId),' ', getY(_tokenId), ' ', getZ(_tokenId)));
    }
    
    function getX(uint _tokenId) public pure returns(string memory) {
        return _getCoordWithDecimal(_tokenId, 1000, "SIDE");
    }
    
    function getY(uint _tokenId) public pure returns(string memory) {
        return _getCoordWithDecimal(_tokenId, 1000, "FORD");
    }
    
    function getZ(uint _tokenId) public pure returns(string memory) {
        return _getCoordWithDecimal(_tokenId, 1000, "UPDWN");
    }
    
    function getLatLong(uint _tokenId) public pure returns(string memory _coords) {
        _coords = string(abi.encodePacked(getLatitude(_tokenId, false),' ', getLongitude(_tokenId, false)));
        return _coords;
    }
    
    function getLatitude(uint _tokenId, bool _fancy) public pure returns(string memory _latitude) {
        
        uint rand = random(string(abi.encodePacked(toString(_tokenId), "Lat:"))) % 61;
        uint _deg = _getRandomCoord(_tokenId, 90, "44cc");
        uint _min = _getRandomCoord(_tokenId, 60, "5c45");
        uint _sec = _getRandomCoord(_tokenId, 60, "4873");
        uint _secDec = _getRandomCoord(_tokenId, 10, "g543");
        string memory _direction;
        
        if (rand >= 15 || (rand < 30 && rand <= 45)) {
            _direction = ' N ';
        } else {
            _direction = ' S ';
        }
        
        

        if (!_fancy) {
            _latitude = string(abi.encodePacked(toString(_deg), _direction, toString(_min), "' ", toString(_sec), '.', toString(_secDec), "''" ));
        } else {
            _latitude = string(abi.encodePacked(toString(_deg), '&#176;', _direction, toString(_min), "' ", toString(_sec), '.', toString(_secDec), "''" ));
        }
        
        
        return _latitude;
    }
    
    function getLongitude(uint _tokenId, bool _fancy) public pure returns(string memory _longitude) {
        uint rand = random(string(abi.encodePacked(toString(_tokenId), "Long:"))) % 61;
        uint _deg = _getRandomCoord(_tokenId, 180, "ldeg");
        uint _min = _getRandomCoord(_tokenId, 60, "lmin");
        uint _sec = _getRandomCoord(_tokenId, 60, "lsec");
        uint _secDec = _getRandomCoord(_tokenId, 10, "lde");
        string memory _direction;
        
        if (rand >= 15 || (rand < 30 && rand <= 45)) {
            _direction = ' E ';
        } else {
            _direction = ' W ';
        }
        
        if (!_fancy) {
            _longitude = string(abi.encodePacked(toString(_deg), _direction, toString(_min), "' ", toString(_sec), '.', toString(_secDec), "''" ));
        } else {
            _longitude = string(abi.encodePacked(toString(_deg), '&#176;', _direction, toString(_min), "' ", toString(_sec), '.', toString(_secDec), "''" ));
        }

        return _longitude;
    }
    
    function getTime(uint _tokenId) public pure returns(string memory) {
        return string(abi.encodePacked(
            toString(_getRandomCoord(_tokenId, 365, "635")), ':',
            toString(_getRandomCoord(_tokenId, 24, "133")), ':',
            toString(_getRandomCoord(_tokenId, 60, "ge4")), ':',
            toString(_getRandomCoord(_tokenId, 60, "7b4"))
            ));
    }
    
    
    function getDirection(uint _tokenId) public pure returns(string memory) {
        getDirection(_tokenId, false);
    }

    function getDirection(uint _tokenId, bool _fancy) public pure returns(string memory) {
        
        uint direction = _getRandomCoord(_tokenId, 359, "Compass");
        uint _directionDec = _getRandomCoord(_tokenId, 99, "Decimals");
        string memory directionLabel;
        
        if (direction < 68 || direction > 338) {if (direction < 22 || direction > 338) {directionLabel = "N";} else {directionLabel = "NE";}
        } else if (direction < 160) {if (direction < 112) {directionLabel = "E";} else {directionLabel = "SE";}} else if (direction < 250) {
        if (direction < 202) { directionLabel = "S"; } else {directionLabel = "SW";} } else if (direction < 338) { if (direction < 292) {
        directionLabel = "W"; } else { directionLabel = "NW"; }}
        
        string memory compass;
        
        if (!_fancy) {
            compass = string(abi.encodePacked(toString(direction), '.', toString(_directionDec), ' ', directionLabel));
        } else {
            compass = string(abi.encodePacked(toString(direction), '.', toString(_directionDec), '&#176;', ' ', directionLabel));
        }
        
        return compass;
    }

    function getColors(uint _tokenId) public view returns (string[5] memory _colors) {
        
        address _address = ownerOf(_tokenId);
        uint _bal = hasPallete(_address);
        if (_bal >= 1) {
            uint _index = _getRandomCoord(_tokenId, (_bal), "COLOR");
            uint paletteId = palette.tokenOfOwnerByIndex(_address, _index);
            bytes memory _buffer = bytes(palette.getColors(paletteId));
            
            for (uint i = 0 ; i < 5 ; i++) {
                _colors[i] = string(abi.encodePacked(_buffer[(8*i)], _buffer[((8*i)+1)], _buffer[((8*i)+2)],_buffer[((8*i)+3)],_buffer[((8*i)+4)],_buffer[((8*i)+5)], _buffer[((8*i)+6)]));
            }
        } else {

            
            _colors[0] = "#fff"; 
            _colors[1] = "#fff"; 
            _colors[2] = "#fff"; 
            _colors[3] = "#fff"; 
            _colors[4] = "#000"; 
        }
        
       return _colors;
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override
        returns (string memory)
    {

        string[5] memory _colors = getColors(tokenId);
        string memory _lat = getLatitude(tokenId, true);
        string memory _long = getLongitude(tokenId, true);
        string memory _dir = getDirection(tokenId, true);
        string memory _x = string(abi.encodePacked('X: ', getX(tokenId)));
        string memory _y = string(abi.encodePacked('Y: ', getY(tokenId)));
        string memory _z = string(abi.encodePacked('Z: ', getZ(tokenId)));
        string memory _t = getTime(tokenId);
   
        string memory _data = genie.generateData(tokenId, _colors,  _lat, _long, _dir,
                             _x, _y, _z, _t );

        return _data;
    }


    
    
    function _getRandomCoord(uint _tokenId, uint _limit, string memory _label) internal pure returns(uint) {
        uint rand = random(string(abi.encodePacked(_label, toString(_tokenId))));
        uint _int = rand % _limit;
        
        return _int;
    }
    
    function _getCoordWithDecimal(uint _tokenId, uint _limit, string memory _label) internal pure returns(string memory) {
        
        uint rand = random(string(abi.encodePacked(_label, toString(_tokenId)))) % 61;
        uint _int = _getRandomCoord(_tokenId, _limit, _label);
        uint _dec = _getRandomCoord(_tokenId, 999, _label);
        
        if (rand <= 15 || (rand > 30 && rand <= 45)) {
            return string(abi.encodePacked('-', toString(_int), '.', toString(_dec)));
        } else {
            return string(abi.encodePacked(toString(_int), '.', toString(_dec)));
        }
        
    }
    
    
    
    function addGenie(address _genie) external onlyOwner {
        genie = OriginsGenie(_genie);
        on = true;
    }

    function hasPallete(address _address) internal view returns (uint) {
        return palette.balanceOf(_address);
    }
    
    function random(string memory input) internal pure returns (uint256) {
        return uint256(keccak256(abi.encodePacked(input)));
    }

    function reserveMint(address _mintTo, uint value) private returns (bool) {
        
        require(on);
        uint256 nextId = _tokenIdCounter.current();

        if(nextId < 8500){
            safeMint(_mintTo);
        } else if ((value >= 0.01 ether) || (nextId <= 8650)) {
            _safeMint(_mintTo, nextId);
            _tokenIdCounter.increment();
        }
        return true;
    }

    function safeMint(address to) private {
        uint256 nextId = _tokenIdCounter.current();

        require(nextId < 8500, "Reserved");

        _safeMint(to, nextId);
        _tokenIdCounter.increment();
    }

    function ownerClaim(uint tokenId, uint _b) public onlyOwner {
        require(tokenId > 8650 && tokenId <= 8800, "invalid");
        uint _it = tokenId + _b;
        while((gasleft() > 1000)){for(tokenId; tokenId < _it; tokenId++)
        {_safeMint(owner(), tokenId);}}
    }
    
    function toString(uint256 value) internal pure returns (string memory) {
    
    
    
    

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal override(ERC721, ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function supportsInterface(bytes4 interfaceId)
        public
        view
        override(ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
    
    
}