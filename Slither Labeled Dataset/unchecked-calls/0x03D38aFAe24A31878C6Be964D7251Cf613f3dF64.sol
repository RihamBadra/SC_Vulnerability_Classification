

pragma solidity ^0.6.12;






contract Context {
    
    
    constructor () internal { }

    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}




interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract Holder is Ownable {
  bytes32 password;
  bool public isPassUsed;
  uint256 public holdTime;

  constructor(bytes32 _password) public {
    password = _password;
    holdTime = now + 365 days;
  }

  function withdrawETH() external onlyOwner {
    require(now >= holdTime, "EARLY");
    uint256 amount = address(this).balance;
    payable(owner()).transfer(amount);
  }

  function withdrawERC20(address _token) external onlyOwner {
    require(now >= holdTime, "EARLY");
    uint256 amount = IERC20(_token).balanceOf(address(this));
    IERC20(_token).transfer(owner(), amount);
  }

  function emergencyWithdrawETH(string calldata _password) external onlyOwner {
     require(keccak256(abi.encodePacked(_password)) == password, "WRONG PASS");
     uint256 amount = address(this).balance;
     payable(owner()).transfer(amount);
     isPassUsed = true;
  }

  function emergencyWithdrawERC20(string calldata _password, address _token) external onlyOwner {
     require(keccak256(abi.encodePacked(_password)) == password, "WRONG PASS");
     uint256 amount = IERC20(_token).balanceOf(address(this));
     IERC20(_token).transfer(owner(), amount);
     isPassUsed = true;
  }

  function setNewPassword(bytes32 _password) external onlyOwner {
     require(isPassUsed, "OLD PASS MUST BE USED");
     password = _password;
     isPassUsed = false;
  }

  
  
  function increaseHoldTime(uint256 _addTime) external onlyOwner {
     require(_addTime <= 365 days, "CAN NOT SET MORE THAN 1 YEAR");
     holdTime = holdTime + _addTime;
  }

  function renounceOwnership() public override onlyOwner {
     revert("NOT ALLOW LEAVE CONTRACT");
  }

  
  receive() external payable{}
}