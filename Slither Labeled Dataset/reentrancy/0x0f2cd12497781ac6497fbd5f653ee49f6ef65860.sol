





pragma solidity ^0.6.0;


contract Context {
    
    
    constructor () internal { }
    

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

interface RMU {
    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;
    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;
    function setApprovalForAll(address _operator, bool _approved) external;
    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);
    function balanceOf(address _owner, uint256 _id) external view returns (uint256);
    function mintBatch(address user, uint256[] calldata ids, uint256[] calldata amounts) external;
    function burn(
        address _account,
        uint256 _id,
        uint256 _amount
    ) external;
}

interface Toshicash {
    function totalSupply() external view returns (uint256);
    function totalClaimed() external view returns (uint256);
    function addClaimed(uint256 _amount) external;
    function setClaimed(uint256 _amount) external;
    function transfer(address receiver, uint numTokens) external returns (bool);
    function transferFrom(address owner, address buyer, uint numTokens) external returns (bool);
    function balanceOf(address owner) external view returns (uint256);
    function mint(address _to, uint256 _amount) external;
    function burn(address _account, uint256 value) external;
}




contract CardKeeper is Ownable {
    using SafeMath for uint256;

    struct CardSet {
        uint256[] cardIds;
        uint256 toshicashPerDayPerCard;
    }

    RMU public ropeMaker;
    Toshicash public toshicash;

    uint256[] public cardSetList;
    uint256 public highestCardId;
    mapping (uint256 => CardSet) public cardSets;
    mapping (uint256 => uint256) public cardToSetMap;

    mapping (address => mapping(uint256 => uint256)) public userCards;
    mapping (address => uint256) public userLastUpdate;
    
    mapping(uint256 => mapping(address => UserInfoERC1155)) public userInfoERC1155;
    mapping(uint256 => uint256) public eRC1155MultiplierIds;
    mapping(address => ERC1155MultiplierUserInfo) public userMultiplier;

    event Stake(address indexed user, uint256[] cardIds,  uint256[] amounts);
    event Unstake(address indexed user, uint256[] cardIds,  uint256[] amounts);
    event Harvest(address indexed user, uint256 amount);
    

        struct UserInfoERC1155 {
        uint256 amountInPool;
        
        
    }
        struct ERC1155Multiplier {
        uint256 id;
        uint256 percentBoost;
       
    }
    struct ERC1155MultiplierUserInfo {
        uint256 multiplier;
        uint256 total;
       
    }

    ERC1155Multiplier[] public eRC1155Multiplier;


    constructor(RMU _ropeMakerAddr, Toshicash _toshicashAddr) public {
        ropeMaker = _ropeMakerAddr;
        toshicash = _toshicashAddr;

    }

    
    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {
        uint256 length = _array.length;
        for (uint256 i = 0; i < length; ++i) {
            if (_array[i] == _value) {
                return true;
            }
        }

        return false;
    }

    
    function getCardsStakedOfAddress(address _user) public view returns(uint256[] memory) {
        uint256[] memory cardsStaked = new uint256[](highestCardId + 1);

        for (uint256 i = 0; i < highestCardId + 1; ++i) {
            cardsStaked[i] = userCards[_user][i];
        }

        return cardsStaked;
    }

    
    function getCardIdListOfSet(uint256 _setId) external view returns(uint256[] memory) {
        return cardSets[_setId].cardIds;
    }


    function addCardSet(uint256 _setId, uint256[] memory _cardIds, uint256 _toshicashPerDayPerCard) public onlyOwner {
       

        uint256 length = _cardIds.length;
        for (uint256 i = 0; i < length; ++i) {
            uint256 cardId = _cardIds[i];

            if (cardId > highestCardId) {
                highestCardId = cardId;
            }

            
            require(cardToSetMap[cardId] == 0, "Card already assigned to a set");

            
            cardToSetMap[cardId] = _setId;
        }

        if (_isInArray(_setId, cardSetList) == false) {
            cardSetList.push(_setId);
        }

        cardSets[_setId] = CardSet({
            cardIds: _cardIds,
            toshicashPerDayPerCard: _toshicashPerDayPerCard
        });
    }



    
    
    function totalPendingToshicashOfAddress(address _user, bool _includeToshicashBooster) public view returns (uint256) {
        uint256 totalToshicashPerDay = 0;

        uint256 length = cardSetList.length;
        for (uint256 i = 0; i < length; ++i) {
            uint256 setId = cardSetList[i];
            CardSet storage set = cardSets[setId];

            uint256 cardLength = set.cardIds.length;

            uint256 setToshicashPerDay = 0;
            for (uint256 j = 0; j < cardLength; ++j) {


                setToshicashPerDay = setToshicashPerDay.add(set.toshicashPerDayPerCard.mul(userCards[_user][set.cardIds[j]]));
            }


            totalToshicashPerDay = totalToshicashPerDay.add(setToshicashPerDay);
        }

        
        if (_includeToshicashBooster) {
            uint256 toAdd = 0;
            totalToshicashPerDay = totalToshicashPerDay.add(toAdd);
        }

        uint256 lastUpdate = userLastUpdate[_user];
        uint256 blockTime = block.timestamp;
        return blockTime.sub(lastUpdate).mul(totalToshicashPerDay.div(86400));
    }


    
    
    

    
    
    function setHighestCardId(uint256 _highestId) public onlyOwner {
        require(_highestId > 0);
        highestCardId = _highestId;
    }




    
    function setToshicashRateOfSets(uint256[] memory _setIds, uint256[] memory _toshicashPerDayPerCard) public onlyOwner {
        require(_setIds.length == _toshicashPerDayPerCard.length, "_setId and _toshicashPerDayPerCard have different length");

        for (uint256 i = 0; i < _setIds.length; ++i) {
            require(cardSets[_setIds[i]].cardIds.length > 0, "Set is empty");
            cardSets[_setIds[i]].toshicashPerDayPerCard = _toshicashPerDayPerCard[i];
        }
    }


    function harvest() public {
        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];
        uint256 pendingToshicash = totalPendingToshicashOfAddress(msg.sender, true);
        userLastUpdate[msg.sender] = block.timestamp;
        pendingToshicash = pendingToshicash.add( pendingToshicash.mul(multiplier.multiplier).div( 100));
        if (pendingToshicash > 0) {
            toshicash.mint(msg.sender, pendingToshicash);
        }

        emit Harvest(msg.sender, pendingToshicash);
    }

    function stake(uint256[] memory _cardIds, uint256[] memory _cardAmounts) public {
        require(_cardIds.length > 0, "_cardIds array empty");

        harvest();

        for (uint256 i = 0; i < _cardIds.length; ++i) {

            require(cardToSetMap[_cardIds[i]] != 0, "Card is not part of any set");
        }

        
        ropeMaker.mintBatch(address(this), _cardIds, _cardAmounts);

        for (uint256 i = 0; i < _cardIds.length; ++i) {
            userCards[msg.sender][_cardIds[i]] = userCards[msg.sender][_cardIds[i]].add(_cardAmounts[i]);
            ropeMaker.burn(msg.sender, _cardIds[i], _cardAmounts[i]);
        }

        emit Stake(msg.sender, _cardIds, _cardAmounts);
    }


    function unstake(uint256[] memory _cardIds, uint256[] memory _cardAmounts) public {
        require(_cardIds.length > 0, "_cardIds array empty");

        harvest();

        for (uint256 i = 0; i < _cardIds.length; ++i) {
            require(userCards[msg.sender][_cardIds[i]] >= _cardAmounts[i], "Card not staked");
            userCards[msg.sender][_cardIds[i]] = userCards[msg.sender][_cardIds[i]].sub(_cardAmounts[i]);
            ropeMaker.burn(address(this), _cardIds[i], _cardAmounts[i]);
        }

        
        ropeMaker.mintBatch(msg.sender, _cardIds, _cardAmounts);
        

        emit Unstake(msg.sender, _cardIds, _cardAmounts);
    }

    
    function emergencyUnstake(uint256[] memory _cardIds, uint256[] memory _cardAmounts) public {
        userLastUpdate[msg.sender] = block.timestamp;

        uint256 length = _cardIds.length;
        for (uint256 i = 0; i < length; ++i) {
            uint256 cardId = _cardIds[i];

            require(userCards[msg.sender][cardId] >= _cardAmounts[i], "Card not staked");
            userCards[msg.sender][cardId] = userCards[msg.sender][cardId].sub(_cardAmounts[i]);
        }

        ropeMaker.safeBatchTransferFrom(address(this), msg.sender, _cardIds, _cardAmounts, "");
    }

    function userMultiplierValue(address user) public view returns (uint256) {

        return userMultiplier[msg.sender].multiplier;
    }
    
    function userERC155StakedTotal(address user) public view returns (uint256) {

        return userMultiplier[msg.sender].total;
    }
    function addERC1155Multiplier(uint256 _id, uint256 _percentBoost) public onlyOwner {
        require(
            eRC1155MultiplierIds[_id] == 0,
            "ToshiCashFarm: Cannot add duplicate Toshimon ERC1155"
        );

        eRC1155Multiplier.push(
            ERC1155Multiplier({
                id:_id,
                percentBoost: _percentBoost
            })
        );

        eRC1155MultiplierIds[_id] = 1;
    }
      
    function depositERC1155(uint256 poolId, uint256 quantity) public {

        ERC1155Multiplier storage erc1155 = eRC1155Multiplier[poolId];
        UserInfoERC1155 storage user = userInfoERC1155[poolId][msg.sender];
        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];
         uint256[] memory cardid = new uint256[](1);
         uint256[] memory cardamount = new uint256[](1);
        cardid[0] = erc1155.id;
        cardamount[0] = quantity;

         
        harvest();
        
        ropeMaker.burn(msg.sender, erc1155.id, quantity);


        
        ropeMaker.mintBatch(address(this), cardid, cardamount);
        
        
        user.amountInPool = user.amountInPool.add(quantity);
        multiplier.multiplier = multiplier.multiplier.add(erc1155.percentBoost.mul(quantity));
        multiplier.total = multiplier.total.add(erc1155.percentBoost.mul(quantity));
        if(multiplier.multiplier > 100){
            multiplier.multiplier = 100;
        }

    }
      
    function withdrawERC1155(uint256 poolId, uint256 quantity) public {

        ERC1155Multiplier storage erc1155 = eRC1155Multiplier[poolId];
        UserInfoERC1155 storage user = userInfoERC1155[poolId][msg.sender];
        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];
        
        
        require(
            user.amountInPool >= quantity,
            "ToshiCoinFarm: User does not have enough NFTS to withdraw from this pool"
        );
        harvest();
        
        user.amountInPool = user.amountInPool.sub(quantity);
        
        
        multiplier.total = multiplier.total.sub(erc1155.percentBoost.mul(quantity));
        multiplier.multiplier = multiplier.total.mul(quantity);
        if(multiplier.multiplier > 100){
            multiplier.multiplier = 100;
        }
        
        ropeMaker.burn(address(this), erc1155.id, quantity);
         uint256[] memory cardid = new uint256[](1);
         uint256[] memory cardamount = new uint256[](1);
        cardid[0] = erc1155.id;
        cardamount[0] = quantity;

        
        ropeMaker.mintBatch(msg.sender, cardid, cardamount);
        


    }



    
    
    

    
    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {
        return 0xf23a6e61;
    }

    
    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {
        return 0xbc197c81;
    }

    
    function supportsInterface(bytes4 interfaceID) external view returns (bool) {
        return  interfaceID == 0x01ffc9a7 ||    
        interfaceID == 0x4e2312e0;      
    }
}