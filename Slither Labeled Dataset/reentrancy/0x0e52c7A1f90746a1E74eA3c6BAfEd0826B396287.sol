






pragma solidity 0.8.9;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}




library Roles {
    struct Role {
        mapping(address => bool) bearer;
    }

    
    function add(Role storage role, address account) internal {
        require(!has(role, account), 'Roles: account already has role');
        role.bearer[account] = true;
    }

    
    function remove(Role storage role, address account) internal {
        require(has(role, account), 'Roles: account does not have role');
        role.bearer[account] = false;
    }

    
    function has(Role storage role, address account) internal view returns (bool) {
        require(account != address(0), 'Roles: account is the zero address');
        return role.bearer[account];
    }
}







contract BlacklistManagerRole is Ownable {
    using Roles for Roles.Role;

    event BlacklistManagerAdded(address indexed _blacklistManager);
    event BlacklistManagerRemoved(address indexed _blacklistManager);

    Roles.Role private _blacklistManagers;

    modifier onlyBlacklistManager() {
        require(isBlacklistManager(msg.sender), 'BlacklistManagerRole: caller does not have the role');
        _;
    }

    function isBlacklistManager(address _blacklistManager) public view returns (bool) {
        return _blacklistManagers.has(_blacklistManager);
    }

    function addBlacklistManager(address _blacklistManager) public onlyOwner {
        _blacklistManagers.add(_blacklistManager);
        emit BlacklistManagerAdded(_blacklistManager);
    }

    function removeBlacklistManager(address _blacklistManager) public onlyOwner {
        _blacklistManagers.remove(_blacklistManager);
        emit BlacklistManagerRemoved(_blacklistManager);
    }
}





interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}






abstract contract Pausable is Context {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    
    constructor() {
        _paused = false;
    }

    
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}




interface IVesting {

    
    event UpdatedTreasury(address newTreasury);
    event UpdatedTeam(address newTeam);
    event UpdatedEcosystemFund(address newEcosystemFund);
    event UpdatedLongTermLockUp(address newLongTermLockUp);
    event TokenSet(address token);
    event InitialDeposit(address _to, uint256 _amount, uint _cliff, uint _vesting);
    event TokensClaimed(address _holder, uint256 _amount);
    event ReferenceDateSet(uint256 _referenceDate);

    
    function setToken(address token) external;
    function initialized() external view returns(bool);
    function treasury() external view returns(address);
    function updateTreasuryWallet(address newTreasury) external;
    function team() external view returns(address);
    function updateTeamWallet(address newTeam) external;
    function ecosystemFund() external view returns(address);
    function updateEcosystemFundWallet(address newEcosystemFund) external;
    function longTermLockUp() external view returns(address);
    function updateLongTermLockUpWallet(address newLongTermLockUp) external;
    function initialDeposit(address _to, uint256 _amount, uint _cliff, uint _vesting) external;
    function claim() external;
    function claimFor(address _holder) external;
    function claimAll() external;
    function getBalances(address _holder) external view returns(uint, uint, uint);

}



contract BOXT is Context, IERC20, IERC20Metadata, BlacklistManagerRole, Pausable {

    
    event Blacklisted(address wallet);
    
    event Whitelisted(address wallet);

    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    
    mapping(address => bool) private _blacklisted;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    address public _vestingContract;


    
    constructor(address owner, address vestingContract) {
        _name = 'BOXTradEx Token';
        _symbol = 'BOXT';
        _vestingContract = vestingContract;
        _transferOwnership(owner);
    }

    
    function initialize() external {
        require(!IVesting(_vestingContract).initialized(), 'already initialized');
        IVesting(_vestingContract).setToken(address(this));
        _mint(address(this), 500000000*10**6);
		
		_approve(address(this), _vestingContract, 450000000*10**6);
        IVesting(_vestingContract).initialDeposit(IVesting(_vestingContract).treasury(), 75000000*10**6, 0, 6);
        IVesting(_vestingContract).initialDeposit(IVesting(_vestingContract).team(), 75000000*10**6, 6, 24);
        IVesting(_vestingContract).initialDeposit(IVesting(_vestingContract).ecosystemFund(), 250000000*10**6, 0, 18);
        IVesting(_vestingContract).initialDeposit(IVesting(_vestingContract).longTermLockUp(), 50000000*10**6, 9, 24);
        _transfer(address(this), IVesting(_vestingContract).treasury(), 50000000*10**6);
		
    }

    
    function pause() public onlyOwner {
        _pause();
    }

    
    function unpause() public onlyOwner {
        _unpause();
    }

    
    function blacklisted(address _wallet) public view returns (bool) {
        return _blacklisted[_wallet];
    }

    
    function blacklist(address _wallet) external onlyBlacklistManager {
        require(!blacklisted(_wallet), 'wallet already blacklisted');
        _blacklisted[_wallet] = true;
        emit Blacklisted(_wallet);
    }

    
    function whitelist(address _wallet) external onlyBlacklistManager {
        require(blacklisted(_wallet), 'wallet not blacklisted');
        _blacklisted[_wallet] = false;
        emit Whitelisted(_wallet);
    }

    
    function burn(uint256 amount) public {
        _burn(_msgSender(), amount);
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 6;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');
    unchecked {
        _approve(sender, _msgSender(), currentAllowance - amount);
    }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');
    unchecked {
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

        return true;
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), 'ERC20: transfer from the zero address');
        require(recipient != address(0), 'ERC20: transfer to the zero address');

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');
    unchecked {
        _balances[sender] = senderBalance - amount;
    }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), 'ERC20: mint to the zero address');

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), 'ERC20: burn from the zero address');

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, 'ERC20: burn amount exceeds balance');
    unchecked {
        _balances[account] = accountBalance - amount;
    }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), 'ERC20: approve from the zero address');
        require(spender != address(0), 'ERC20: approve to the zero address');

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 
    ) internal virtual {
        require(!paused(), 'ERC20Pausable: token transfer while paused');
        require(!blacklisted(to) && !blacklisted(from), 'Cannot transfer tokens to or from blacklisted');
    }

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

}