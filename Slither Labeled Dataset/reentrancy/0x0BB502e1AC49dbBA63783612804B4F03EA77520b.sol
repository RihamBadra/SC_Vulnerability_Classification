



pragma solidity 0.8.2;






library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}




library Counters {
    struct Counter {
        
        
        
        uint256 _value; 
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }

    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }

    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}




interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}




interface IERC721Receiver {
    
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}








library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            
            
            
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}




library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}




contract OwnableDelegateProxy {}




abstract contract ERC165 is IERC165 {
    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}




interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}




abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}




abstract contract Pausable is Context {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    
    constructor() {
        _paused = false;
    }

    
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}




contract ProxyRegistry {
    mapping(address => OwnableDelegateProxy) public proxies;
}




interface IERC721Enumerable is IERC721 {
    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}




interface IERC721Metadata is IERC721 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function tokenURI(uint256 tokenId) external view returns (string memory);
}




contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    
    string private _name;

    
    string private _symbol;

    
    mapping(uint256 => address) private _owners;

    
    mapping(address => uint256) private _balances;

    
    mapping(uint256 => address) private _tokenApprovals;

    
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver(to).onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}




abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    
    mapping(uint256 => uint256) private _ownedTokensIndex;

    
    uint256[] private _allTokens;

    
    mapping(uint256 => uint256) private _allTokensIndex;

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; 
            _ownedTokensIndex[lastTokenId] = tokenIndex; 
        }

        
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        
        
        
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; 
        _allTokensIndex[lastTokenId] = tokenIndex; 

        
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}




abstract contract ERC721URIStorage is ERC721 {
    using Strings for uint256;

    
    mapping(uint256 => string) private _tokenURIs;

    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721URIStorage: URI query for nonexistent token");

        string memory _tokenURI = _tokenURIs[tokenId];
        string memory base = _baseURI();

        
        if (bytes(base).length == 0) {
            return _tokenURI;
        }
        
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked(base, _tokenURI));
        }

        return super.tokenURI(tokenId);
    }

    
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "ERC721URIStorage: URI set of nonexistent token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    
    function _burn(uint256 tokenId) internal virtual override {
        super._burn(tokenId);

        if (bytes(_tokenURIs[tokenId]).length != 0) {
            delete _tokenURIs[tokenId];
        }
    }
}




contract StickyNFT is ERC721, ERC721Enumerable, ERC721URIStorage, Pausable, Ownable {
    
    using Counters for Counters.Counter;
    using SafeMath for uint;
    using SafeMath for uint256;
    using Strings for uint256;
    using Strings for address;

    Counters.Counter private _tokenIdCounter;


    
    struct StkToken {
        uint256 tokenId;
        address owner;

        
        string bgHexCode;
        string fgHexCode;

        
        string message;
    }

    
    
    uint256 public stnLimit;
    
    uint256 public stnBkMaxSupply;

    
    uint public stnRefillPrice;
    uint public stnBkPremiumPrice;

    
    uint256 private _soldCounter;


    
    mapping(uint256 => StkToken) tokenIdToStkStruct;
    
    mapping(uint256 => uint256) tokenIdToAvailableStkCount;
    
    mapping(bytes32 => bool) consumedColorCombination;
    
    mapping(address => uint256[]) public addressToTokenId;
    
    mapping(address => uint256[]) public addressToSentTokenId;

    
    address public proxyRegistryAddress;

    
    event TokenNotBurnable(string message);

    
    event TokenTransferred(address from, address to, uint256 tokenId);

    
    event NotePinned(address from, address to, uint256 newTokenID);

    
    constructor(uint256 _stnBkMaxSupply, uint256 _stnLimit, uint _stnBkPremiumPrice, uint _stnRefillPrice, address _proxyRegistryAddress) public ERC721("StickyNFT", "STX") {
        proxyRegistryAddress = _proxyRegistryAddress;
        stnBkPremiumPrice = _stnBkPremiumPrice;
        stnRefillPrice = _stnRefillPrice;
        stnBkMaxSupply = _stnBkMaxSupply;
        stnLimit = _stnLimit;

        _soldCounter = 0;
    }

    
    function setStnBkPremiumPrice(uint _stnBkPremiumPrice) external onlyOwner {
        stnBkPremiumPrice = _stnBkPremiumPrice;
    }


    
    function setStnRefillPrice(uint _stnRefillPrice) external onlyOwner {
        stnRefillPrice = _stnRefillPrice;
    }

    
    function setOpenseaProxy(address _proxyRegistryAddress) external onlyOwner {
        proxyRegistryAddress = _proxyRegistryAddress;
    }

    
    function getStkNoteInfo(uint256 _tokenId) public view returns (string[3] memory result){
        require(tokenIdToStkStruct[_tokenId].owner != address(0), "Doesn't exist");

        
        result[0] = tokenIdToStkStruct[_tokenId].bgHexCode;
        result[1] = tokenIdToStkStruct[_tokenId].fgHexCode;
        result[2] = tokenIdToAvailableStkCount[_tokenId].toString();

        return result;
    }


    
    function getOwnedStkNotesCount(address account) public view returns (uint){
        return addressToTokenId[account].length;
    }

    
    function getSentStkNotesCount(address account) public view returns (uint){
        return addressToSentTokenId[account].length;
    }

    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "wrong owner");
        return addressToTokenId[owner].length;
    }

    function totalAvailableStkCount(uint256 _tokenId) public view returns (uint256){
        require(msg.sender == tokenIdToStkStruct[_tokenId].owner, "Not owner");
        return tokenIdToAvailableStkCount[_tokenId];
    }

    function refill(address owner, uint256 _tokenId) external payable {
        require(owner != address(0), "wrong owner");
        require(msg.value >= stnRefillPrice, "Price not met");
        require(tokenIdToStkStruct[_tokenId].owner == owner, "wrong owner");
        tokenIdToAvailableStkCount[_tokenId] = tokenIdToAvailableStkCount[_tokenId].add(stnLimit);
    }


    
    function isApprovedForAll(address _owner, address _operator) public view override returns (bool isOperator) {
        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
        if (address(proxyRegistry.proxies(_owner)) == _operator) {
            return true;
        }
        return ERC721.isApprovedForAll(_owner, _operator);
    }


    function send(address _to, uint256 _tokenId, string memory _message) public {
        require(tokenIdToStkStruct[_tokenId].owner == msg.sender, "wrong owner");
        require(tokenIdToAvailableStkCount[_tokenId] > 0, "Notes Spent. refill");
        require(bytes(_message).length < 256, "Large message");

        
        uint256 newTokenId = _tokenIdCounter.current();
        StkToken memory stnStruct = StkToken({
        owner : msg.sender,
        tokenId : newTokenId,
        bgHexCode : tokenIdToStkStruct[_tokenId].bgHexCode,
        fgHexCode : tokenIdToStkStruct[_tokenId].fgHexCode,
        message : _message
        });

        
        addressToSentTokenId[msg.sender].push(newTokenId);

        
        if (tokenIdToAvailableStkCount[_tokenId] > 0) {
            tokenIdToAvailableStkCount[_tokenId] = tokenIdToAvailableStkCount[_tokenId].sub(1);
        }

        
        _safeMint(_to, newTokenId);
        tokenIdToStkStruct[newTokenId] = stnStruct;


        
        _tokenIdCounter.increment();

        emit NotePinned(msg.sender, _to, newTokenId);
    }


    function increaseMaxSupply(uint256 increase) public onlyOwner {
        stnBkMaxSupply = stnBkMaxSupply.add(increase);
    }

    function buyNFT(string memory _bgcolor, string memory _fgcolor) external payable {
        require(_soldCounter < stnBkMaxSupply, "Sold Out");
        require(msg.value >= stnBkPremiumPrice, "Price not met");


        
        
        bytes32 colorHash = hashColor(_bgcolor, _fgcolor);
        require(consumedColorCombination[colorHash] == false, "Combination not available");

        
        uint256 newTokenId = _tokenIdCounter.current();
        StkToken memory stnStruct = StkToken({

        
        bgHexCode : _bgcolor,
        fgHexCode : _fgcolor,

        
        owner : msg.sender,
        tokenId : newTokenId,
        message : ''
        });

        
        _safeMint(msg.sender, newTokenId);
        tokenIdToStkStruct[newTokenId] = stnStruct;
        tokenIdToAvailableStkCount[newTokenId] = stnLimit;
        consumedColorCombination[colorHash] = true;
        addressToTokenId[msg.sender].push(newTokenId);


        
        _soldCounter = _soldCounter.add(1);
        _tokenIdCounter.increment();
    }


    function safeMint(address to, string memory _bgcolor, string memory _fgcolor) external onlyOwner {
        require(_soldCounter < stnBkMaxSupply, "Sold Out");
        require(bytes(_bgcolor).length <= 6, "wrong color format");
        require(bytes(_fgcolor).length <= 6, "wrong color format");

        bytes32 colorHash = hashColor(_bgcolor, _fgcolor);
        require(consumedColorCombination[colorHash] == false, "Combination not available");

        
        uint256 newTokenId = _tokenIdCounter.current();
        StkToken memory stnStruct = StkToken({
        
        bgHexCode : _bgcolor,
        fgHexCode : _fgcolor,

        
        owner : to,
        tokenId : newTokenId,
        message : ''
        });

        
        _safeMint(to, newTokenId);
        tokenIdToStkStruct[newTokenId] = stnStruct;
        tokenIdToAvailableStkCount[newTokenId] = stnLimit;
        consumedColorCombination[colorHash] = true;
        addressToTokenId[to].push(newTokenId);


        
        _soldCounter = _soldCounter.add(1);
        _tokenIdCounter.increment();
    }

    function _baseURI() internal pure override returns (string memory) {
        return "";
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal whenNotPaused override(ERC721, ERC721Enumerable)
    {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    function _burn(uint256) internal override(ERC721, ERC721URIStorage) {
        emit TokenNotBurnable("");
    }

    function baseTokenURI() public pure returns (string memory) {
        return "";
    }



    function tokenURI(uint256 tokenId) public view override(ERC721, ERC721URIStorage) returns (string memory)
    {

        bytes memory byteString;
        StkToken memory stkToken = tokenIdToStkStruct[tokenId];
        string memory ownerAddress = toAsciiString(stkToken.owner);

        byteString = abi.encodePacked(byteString, 'data:application/json;utf8,{');

        
        if (bytes(stkToken.message).length > 0) {
            byteString = abi.encodePacked(byteString, '"name": "Sticky NFT",');
            byteString = abi.encodePacked(byteString, '"displayName": "Sticky NFT",');
            byteString = abi.encodePacked(byteString, '"description": "You received a Sticky NFT, more info https:
        } else {
            byteString = abi.encodePacked(byteString, '"name": "Sticky NFT",');
            byteString = abi.encodePacked(byteString, '"displayName": "Sticky NFT",');
            byteString = abi.encodePacked(byteString, '"description": "This is a Sticky NFT. https:
        }

        byteString = abi.encodePacked(byteString, '"created_by": "0x', ownerAddress, '",');
        byteString = abi.encodePacked(byteString, '"external_url": "https:
        byteString = abi.encodePacked(byteString, '"image": "data:image/svg+xml;utf8,', generateSvg(stkToken), '",');
        byteString = abi.encodePacked(byteString, '"attributes": [');
        byteString = abi.encodePacked(byteString, '{"trait_type":"Birthday","value":', block.timestamp.toString(), ',"display_type":"date"},');
        byteString = abi.encodePacked(byteString, '{"trait_type":"Background","value":"#', stkToken.bgHexCode, '"},');
        byteString = abi.encodePacked(byteString, '{"trait_type":"Font","value":"#', stkToken.fgHexCode, '"},');
        byteString = abi.encodePacked(byteString, '{"trait_type":"Origin","value":"0x', ownerAddress, '"}],');
        byteString = abi.encodePacked(byteString, '"message": "', bytes(stkToken.message), '"}');


        return string(byteString);
    }

    function generateSvg(StkToken memory stk) private view returns (bytes memory svg) {
        svg = abi.encodePacked(svg, "<svg xmlns='http:
        svg = abi.encodePacked(svg, "<rect width='1080' height='1080' fill='#", stk.bgHexCode, "'/>");
        bytes memory messageBytes = bytes(stk.message);

        
        bytes1 space = bytes1(" ");
        bytes1 doubleQuote = bytes1('"');
        bytes1 singleQuote = bytes1("'");
        bytes1 backSlash = bytes1('\\');


        if (bytes(stk.message).length > 0) {
            svg = abi.encodePacked(svg, "<text x='25' y='20' font-family='serif' font-size='32' fill='#", stk.fgHexCode, "' >");
            svg = abi.encodePacked(svg, "<tspan x='15' dy='1.2em' >");
            for (uint256 counter = 0; counter < bytes(stk.message).length; counter++) {
                
                if (messageBytes[counter] != doubleQuote || messageBytes[counter] != singleQuote || messageBytes[counter] != backSlash) {
                    if (counter.mod(35) == 0 && counter > 0) {
                        if (messageBytes[counter] != space) {
                            svg = abi.encodePacked(svg, messageBytes[counter], "_</tspan>");
                        } else {
                            svg = abi.encodePacked(svg, messageBytes[counter], "</tspan>");
                        }
                        svg = abi.encodePacked(svg, "<tspan x='15' dy='1.2em' >");
                    } else {
                        svg = abi.encodePacked(svg, messageBytes[counter]);
                    }
                }
            }
            svg = abi.encodePacked(svg, "</tspan>");
            svg = abi.encodePacked(svg, "</text>");
        } else {
            svg = abi.encodePacked(svg, "<text x='25' y='25' font-family='Verdana' font-size='14' fill='#", stk.fgHexCode, "' >");
            svg = abi.encodePacked(svg, "Owner 0x", toAsciiString(stk.owner), "</text>");
        }
        return abi.encodePacked(svg, "</svg>");
    }

    function supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }

    function withdraw() external onlyOwner {
        payable(msg.sender).transfer(address(this).balance);
    }

    function withdraw(address to) external onlyOwner {
        payable(to).transfer(address(this).balance);
    }

    
    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {
        transferFrom(from, to, tokenId);
    }

    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory) public virtual override {
        transferFrom(from, to, tokenId);
    }


    
    function transferFrom(address from, address to, uint256 tokenId) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        
        if (bytes(tokenIdToStkStruct[tokenId].message).length > 0) {
            revert("cant sell sticky note");
        }
        

        for(uint i=0;i<addressToTokenId[from].length;i++){
            if(addressToTokenId[from][i]==tokenId){
                tokenIdToStkStruct[tokenId].owner = to;
                addressToTokenId[from][i] = addressToTokenId[from][addressToTokenId[from].length - 1];
                addressToTokenId[from].pop();

                
                addressToTokenId[to].push(tokenId);
                _transfer(from, to, tokenId);

                break;
            }
        }

    }

    function generateRandomNum(uint256 seed) private view returns (uint256) {
        return uint256(keccak256(abi.encodePacked(msg.sender, block.timestamp, seed)));
    }

    
    function availableSupply() public view returns (uint256)  {
        return stnBkMaxSupply.sub(_soldCounter);
    }

    
    function maxSupply() public view returns (uint256)  {
        return stnBkMaxSupply;
    }

    function toAsciiString(address x) internal view returns (string memory) {
        bytes memory s = new bytes(40);
        for (uint i = 0; i < 20; i++) {
            bytes1 b = bytes1(uint8(uint(uint160(x)) / (2 ** (8 * (19 - i)))));
            bytes1 hi = bytes1(uint8(b) / 16);
            bytes1 lo = bytes1(uint8(b) - 16 * uint8(hi));
            s[2 * i] = char(hi);
            s[2 * i + 1] = char(lo);
        }
        return string(s);
    }

    function char(bytes1 b) internal pure returns (bytes1 c) {
        if (uint8(b) < 10) return bytes1(uint8(b) + 0x30);
        else return bytes1(uint8(b) + 0x57);
    }

    function isColorAvailable(string memory _bgcolor, string memory _fgcolor) public view returns (bool) {
        require(bytes(_bgcolor).length <= 6, "wrong color format");
        require(bytes(_fgcolor).length <= 6, "wrong color format");

        return !consumedColorCombination[hashColor(_bgcolor, _fgcolor)];

    }

    function hashColor(string memory _bg, string memory _fg) public pure returns (bytes32)
    {
        return keccak256(abi.encodePacked(_bg, _fg));
    }

    
    function renounceOwnership() public virtual onlyOwner override {

    }

    
    fallback() external payable {}

    receive() external payable {}
}