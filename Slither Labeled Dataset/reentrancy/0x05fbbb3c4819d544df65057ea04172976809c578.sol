
pragma solidity ^0.7.1;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}



interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


 
contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

contract YFIECFarm is Ownable {
    using SafeMath for uint256;
    
    uint256 public rewardDuration = 30 days;
    uint256 public rewardRate = 5e8;
    uint256 public allocation;
    uint256 public unclaimedReward;
    uint256 public stakingDecimals;
    IERC20 public rewardsToken;
    IERC20 public stakingToken;
    
    
    struct Stake {
        uint256 createdOn;
        uint256 amount;
        uint256 withdrawn;
    }
    
    mapping(address => Stake) stakes;
    
    constructor() {
        allocation = 4e10;
        unclaimedReward = allocation;
        stakingDecimals = 1e18;
        stakingToken = IERC20(0x8E0Ca451ab23d2f82aA5a6a04470dD6A54d592c9);
        rewardsToken = IERC20(0x2E6E152d29053B6337E434bc9bE17504170f8a5B);
    }
    
    function createdDate(address _stake) external view returns(uint256) {
        return stakes[_stake].createdOn;
    }
    
    function withdrawn(address _stake) external view returns(uint256) {
        return stakes[_stake].withdrawn;
    }
    
    function stakedAmount(address _stake) external view returns(uint256) {
        return stakes[_stake].amount;
    }
    
    function newStake(uint256 _amount) public {
        require(_amount > 0, "Cannot stake zero");
        uint256 prevAmount = stakes[_msgSender()].amount;
        
        if (prevAmount > 0) {
            withdraw();
        }
        _amount = _amount.add(prevAmount);
        uint256 estimate = estimateReward(_amount);
        require(unclaimedReward >= estimate, "Allocation exhausted");
        require(stakingToken.transferFrom(_msgSender(), address(this), _amount), "Could not transfer token");
        unclaimedReward = unclaimedReward.sub(estimate);
        stakes[_msgSender()] = Stake({createdOn: block.timestamp, amount: _amount, withdrawn: 0});
        emit NewStake(_msgSender(), _amount);
    }
    
    function unstake() public {
        Stake memory stake = stakes[_msgSender()];
        uint256 amount = stake.amount;
        uint256 thisReward = _earning(stake);
        uint256 offset = estimateReward(amount).sub(thisReward);
        uint256 finalReward = thisReward.sub(stake.withdrawn);
        unclaimedReward = unclaimedReward.add(offset);
        require(rewardsToken.transfer(_msgSender(), finalReward), "Could not transfer reward token");
        require(stakingToken.transfer(_msgSender(), amount), "Could not transfer staked token");
        
        delete stakes[_msgSender()];
        emit Unstake(_msgSender(), amount);
    }
    
    function withdraw() public {
        Stake storage stake = stakes[_msgSender()];
        if (stake.amount > 0) {
            uint256 thisReward = _earning(stake).sub(stake.withdrawn);
            stake.withdrawn = stake.withdrawn.add(thisReward);
            require(rewardsToken.transfer(_msgSender(), thisReward), "Could not transfer token");
            emit Withdrawal(_msgSender(), thisReward);   
        }
    }
    
    function withrawUnclaimed(uint256 _amount) public onlyOwner {
        require(_amount <= unclaimedReward, "Not enough balance");
        require(rewardsToken.balanceOf(address(this)) >= _amount, "Balance is less than amount");
        require(rewardsToken.transfer(owner(), _amount), "Token transfer failed");
        emit Withdrawal(owner(), _amount);
        unclaimedReward = unclaimedReward.sub(_amount);
    }
    
    function updateRewardRate(uint256 _rate) public onlyOwner {
        rewardRate = _rate;
    }
    
    function earning(address _stake) public view returns(uint256) {
        Stake memory stake = stakes[_stake];
        return _earning(stake);
    }
    
    
    function _earning(Stake memory _stake) internal view returns(uint256) {
        uint256 duration = block.timestamp.sub(_stake.createdOn);
        if (duration > rewardDuration) {
            duration = rewardDuration;
        }
        return duration.mul(_stake.amount).mul(rewardRate).div(86400).div(stakingDecimals);
    }
    
    function estimateReward(uint256 _amount) public view returns(uint256) {
        return _amount.mul(rewardDuration).mul(rewardRate).div(86400).div(stakingDecimals);
    }
    
    event NewStake(address indexed staker, uint256 amount);
    event Unstake(address indexed staker, uint256 amount);
    event Withdrawal(address indexed staker, uint256 amount);
}