

pragma solidity ^0.8.0;


interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);
}

contract Stake_tokens {

    using SafeMath for uint256;

    IERC20 stake_coin;
    IERC20 reward_coin;
    struct Staker {
        address staker_address;
        uint256 withdraw_stamp;
        uint256 staked_amount;
    }

    mapping(address => Staker) private stakers;
    uint256 uni_value;

    constructor(address _token, address _reward) {
        stake_coin = IERC20(_token);
        reward_coin = IERC20(_reward);
        uni_value = 4964;
    }

    function stake_coins(uint256 amount, uint256 period) public {
        require(amount > 0, "0 amount given");
        require(amount <= stake_coin.allowance(msg.sender, address(this)), "approve the contract first");
        require(period > 0, "bad period given");
        require(period < 42, "max staking time exceeded");

        uint256 rate = uni_value.mul(period);
        uint256 reward = rate.mul(amount);

        require(reward <= reward_coin.balanceOf(address(this)), "max staking reward exceeded");

        stake_coin.transferFrom(msg.sender, address(this), amount);
        if(stakers[msg.sender].staked_amount > 0 ){
            revert("already a staker");
        }else{
            stakers[msg.sender] = Staker(msg.sender, block.timestamp.add(period.mul(1 weeks)), amount);
        }
        reward_coin.transfer(msg.sender, reward);
    }

    function withdraw_tokens() public {
        require(stakers[msg.sender].staked_amount != 0, "you aren't a staker");
        require(stakers[msg.sender].withdraw_stamp <= block.timestamp);
        
        stake_coin.transfer(msg.sender, stakers[msg.sender].staked_amount);
        stakers[msg.sender].staked_amount = 0;
    }
    
    function get_stake() public view returns(uint256, uint256){
        return (stakers[msg.sender].staked_amount, stakers[msg.sender].withdraw_stamp);
    }

}

pragma solidity ^0.8.0;






library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            
            
            
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}