






pragma solidity ^0.6.12;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address private _owner;
    address private _previousOwner;
    uint256 private _lockTime;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

     
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    function geUnlockTime() public view returns (uint256) {
        return _lockTime;
    }

    
    function lock(uint256 time) public virtual onlyOwner {
        _previousOwner = _owner;
        _owner = address(0);
        _lockTime = now + time;
        emit OwnershipTransferred(_owner, address(0));
    }
    
    
    function unlock() public virtual {
        require(_previousOwner == msg.sender, "You don't have permission to unlock");
        require(now > _lockTime , "Contract is locked until 7 days");
        emit OwnershipTransferred(_owner, _previousOwner);
        _owner = _previousOwner;
    }
}

interface IERC20 {

    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract WSDOGEPresale is Ownable {
    
    address public tokenAddress;
    uint256 public tokensPerAllocation;
    uint256 public allocationSize;
    mapping(address => bool) public isWhitelisted;
    mapping(address => bool) public didBuy;
    
    constructor(address _tokenAddress) public {
        tokenAddress = _tokenAddress;
    }
    
    receive() external payable {
        buy();
    }
    
    function setTokensPerAllocation(uint256 amount) public onlyOwner {
        tokensPerAllocation = amount;
    }
    
    function setAllocationSize(uint256 amount) public onlyOwner {
        allocationSize = amount;
    }
    
    function whitelistAddresses(address[] memory account) public onlyOwner {
        for (uint256 i = 0; i < account.length; i++) {
            isWhitelisted[account[i]] = true;
        }
    }
    
    function removeAddressesFromWhitelist(address[] memory account) public onlyOwner {
        for (uint256 i = 0; i < account.length; i++) {
            isWhitelisted[account[i]] = false;
        }
    }
    
    function withdrawTokens() public onlyOwner {
        IERC20(tokenAddress).transfer(owner(), IERC20(tokenAddress).balanceOf(address(this)));
    }
    
    function withdrawETH() public onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }
    
    function buy() public payable {
        require(tokensPerAllocation > 0 && allocationSize > 0, "Not initialized yet");
        require(isWhitelisted[msg.sender], "Address is not whitelisted");
        require(!didBuy[msg.sender], "Address already bought");
        require(msg.value == allocationSize, "Wrong ETH amount sent");
        
        IERC20(tokenAddress).transfer(msg.sender, tokensPerAllocation);
        
        didBuy[msg.sender] = true;
    }
}