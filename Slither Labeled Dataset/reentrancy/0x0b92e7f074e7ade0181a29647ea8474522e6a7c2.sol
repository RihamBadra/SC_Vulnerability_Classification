


pragma solidity 0.6.11;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


library EnumerableSet {
    
    
    
    
    
    
    
    

    struct Set {
        
        bytes32[] _values;

        
        
        mapping (bytes32 => uint256) _indexes;
    }

    
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            
            
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { 
            
            
            

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            
            

            bytes32 lastvalue = set._values[lastIndex];

            
            set._values[toDeleteIndex] = lastvalue;
            
            set._indexes[lastvalue] = toDeleteIndex + 1; 

            
            set._values.pop();

            
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    

    struct AddressSet {
        Set _inner;
    }

    
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(value)));
    }

    
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(value)));
    }

    
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(value)));
    }

    
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint256(_at(set._inner, index)));
    }


    

    struct UintSet {
        Set _inner;
    }

    
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}


contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  
  constructor() public {
    owner = msg.sender;
  }


  
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  
  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IUniswapV2Router {
  function WETH() external pure returns (address);

  function swapExactTokensForTokens(
      uint amountIn,
      uint amountOutMin,
      address[] calldata path,
      address to,
      uint deadline
  ) external returns (uint[] memory amounts);
  
  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}





contract ConstantReturnStaking is Ownable {
    using Address for address;
    using SafeMath for uint;
    using EnumerableSet for EnumerableSet.AddressSet;
    using SafeERC20 for IERC20;
    
    event Stake(address account, uint amount);
    event Unstake(address account, uint amount);
    
    event RewardsTransferred(address indexed holder, uint amount);
    event ReferralFeeTransferred(address indexed referrer, uint amount);
    event Reinvest(address indexed holder, uint amount);
    
    event StakingFeeChanged(uint newFee);
    event UnstakingFeeChanged(uint newFee);
    event ReferralFeeChanged(uint newFee);
    event UniswapV2RouterChanged(address router);
    event LockupTimeChanged(uint _newLockupTime);
    
    event TrustedDepositContractAdded(address contractAddress);
    event TrustedDepositContractRemoved(address contractAddress);
    
    event FeeRecipientAddressChanged(address newAddress);
    
    event EmergencyDeclared(address indexed owner);
    
    
    
    
    address public TRUSTED_DEPOSIT_TOKEN_ADDRESS = 0x961C8c0B1aaD0c0b10a51FeF6a867E3091BCef17;
    address public TRUSTED_REWARD_TOKEN_ADDRESS = 0xBD100d061E120b2c67A24453CF6368E63f1Be056;
    
    
    
    uint public REWARD_RATE_X_100 = 2000;
    uint public REWARD_INTERVAL = 365 days;
    
    
    uint public STAKING_FEE_RATE_X_100 = 0;
    
    
    uint public UNSTAKING_FEE_RATE_X_100 = 0;
    
    
    uint public REFERRAL_FEE_RATE_X_100 = 500;
    
    
    uint public LOCKUP_TIME = 5 minutes;
    
    uint public constant EMERGENCY_WAIT_TIME = 3 days;

    
    
    uint public constant adminCanClaimAfter = 395 days;
    
    
    IUniswapV2Router public uniswapV2Router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    
    
    
    address public feeRecipientAddress;
    
    uint public totalClaimedRewards = 0;
    uint public totalClaimedReferralFee = 0;
    
    uint public immutable contractStartTime;
    bool public isEmergency = false;
    
    
    modifier noContractsAllowed() {
        require(!(address(msg.sender).isContract()) && tx.origin == msg.sender, "No Contracts Allowed!");
        _;
    }
    
    modifier notDuringEmergency() {
        require(!isEmergency, "Cannot execute during emergency!");
        _;
    }
    
    
    EnumerableSet.AddressSet private holders;
    
    mapping (address => uint) public depositedTokens;
    mapping (address => uint) public stakingTime;
    mapping (address => uint) public lastClaimedTime;
    mapping (address => uint) public totalEarnedTokens;
    
    mapping (address => uint) public rewardsPendingClaim;
    
    mapping (address => address) public referrals;
    mapping (address => uint) public totalReferralFeeEarned;
    
    mapping (address => EnumerableSet.AddressSet) private activeReferredAddressesOfUser;
    mapping (address => EnumerableSet.AddressSet) private totalReferredAddressesOfUser;
    
    mapping (address => bool) public isTrustedDepositContract;
    
    uint public adminClaimableTime;

    constructor(
        address _uniswapV2RouterAddress,
        address _feeRecipientAddress,
        
        address trustedDepositTokenAddress,
        address trustedRewardTokenAddress,
        
        uint referralFeeRateX100,
        uint stakingFeeRateX100,
        uint unstakingFeeRateX100,
        
        uint rewardRateX100,
        uint rewardInterval,
        
        uint lockupTime

        ) public {
            
        setUniswapV2Router(IUniswapV2Router(_uniswapV2RouterAddress));
        setFeeRecipientAddress(_feeRecipientAddress);
        
        setStakingFeeRateX100(stakingFeeRateX100);
        setUnstakingFeeRateX100(unstakingFeeRateX100);
        setReferralFeeRateX100(referralFeeRateX100);
        
        require(trustedDepositTokenAddress != address(0), "Invalid deposit token address!");
        require(trustedRewardTokenAddress != address(0), "Invalid reward token address!");
        
        TRUSTED_DEPOSIT_TOKEN_ADDRESS = trustedDepositTokenAddress;
        TRUSTED_REWARD_TOKEN_ADDRESS = trustedRewardTokenAddress;
        
        REWARD_RATE_X_100 = rewardRateX100;
        REWARD_INTERVAL = rewardInterval;
        require(REWARD_INTERVAL <= 365 days, "Contract must expire in less than 365 days!");
        
        setLockupTime(lockupTime);
        
        contractStartTime = now;
        
        
        adminClaimableTime = now.add(adminCanClaimAfter);
        
    }
    function setFeeRecipientAddress(address newFeeRecipientAddress) public onlyOwner {
        require(newFeeRecipientAddress != address(0), "Invalid address!");
        feeRecipientAddress = newFeeRecipientAddress;
        emit FeeRecipientAddressChanged(feeRecipientAddress);
    }

    
    
    
    
    
    
    function setStakingFeeRateX100(uint _newStakingFeeRateX100) public onlyOwner {
        require(_newStakingFeeRateX100 < 100e2, "New Staking fee too much!");
        STAKING_FEE_RATE_X_100 = _newStakingFeeRateX100;
        emit StakingFeeChanged(STAKING_FEE_RATE_X_100);
    }
    function setUnstakingFeeRateX100(uint _newUnstakingFeeRateX100) public onlyOwner {
        require(_newUnstakingFeeRateX100 < 100e2, "New Unstaking fee too much!");
        UNSTAKING_FEE_RATE_X_100 = _newUnstakingFeeRateX100;
        emit UnstakingFeeChanged(UNSTAKING_FEE_RATE_X_100);
    }
    function setReferralFeeRateX100(uint _newReferralFeeRateX100) public onlyOwner {
        require(_newReferralFeeRateX100 < 100e2, "Too much referral fee!");
        REFERRAL_FEE_RATE_X_100 = _newReferralFeeRateX100;
        emit ReferralFeeChanged(REFERRAL_FEE_RATE_X_100);
    }
    function setUniswapV2Router(IUniswapV2Router _newUniswapV2Router) public onlyOwner {
        require(address(_newUniswapV2Router) != address(0), "Invalid router!");
        uniswapV2Router = _newUniswapV2Router;
        emit UniswapV2RouterChanged(address(uniswapV2Router));
    }
    function setLockupTime(uint _newLockupTime) public onlyOwner {
        require(_newLockupTime <= 90 days, "Lockup Time too long!");
        LOCKUP_TIME = _newLockupTime;
        emit LockupTimeChanged(LOCKUP_TIME);
    }
    function addTrustedDepositContractAddress(address _address) external onlyOwner {
        isTrustedDepositContract[_address] = true;
        emit TrustedDepositContractAdded(_address);
    }
    function removeTrustedDepositContractAddress(address _address) external onlyOwner {
        isTrustedDepositContract[_address] = false;
        emit TrustedDepositContractRemoved(_address);
    }
    
    modifier onlyTrustedDepositContract() {
        require(isTrustedDepositContract[msg.sender], "Not trusted deposit contract!");
        _;
    }
    
    function setContractVariables(
        uint lockupTime,
        uint referralFeeRateX100, 
        uint stakingFeeRateX100, 
        uint unstakingFeeRateX100, 
        address router,
        address _feeRecipientAddress
    ) external onlyOwner {
        setLockupTime(lockupTime);
        setReferralFeeRateX100(referralFeeRateX100);
        setStakingFeeRateX100(stakingFeeRateX100);
        setUnstakingFeeRateX100(unstakingFeeRateX100);
        setUniswapV2Router(IUniswapV2Router(router));
        setFeeRecipientAddress(_feeRecipientAddress);
    }
    
    function declareEmergency() external onlyOwner notDuringEmergency {
        isEmergency = true;
        adminClaimableTime = now.add(EMERGENCY_WAIT_TIME);
        LOCKUP_TIME = 0;
        
        emit EmergencyDeclared(owner);
    }
    
    function doSwap(address fromToken, address toToken, uint fromTokenAmount, uint amountOutMin, uint deadline) 
        private returns (uint _toTokenReceived) {
            
        if (fromToken == toToken) {
            return fromTokenAmount;
        }
            
        IERC20(fromToken).safeApprove(address(uniswapV2Router), 0);
        IERC20(fromToken).safeApprove(address(uniswapV2Router), fromTokenAmount);
        
        uint oldToTokenBalance = IERC20(toToken).balanceOf(address(this));
        
        address[] memory path;
        
        if (fromToken == uniswapV2Router.WETH() || toToken == uniswapV2Router.WETH()) {
            path = new address[](2);
            path[0] = fromToken;
            path[1] = toToken;
        } else {
            path = new address[](3);
            path[0] = fromToken;
            path[1] = uniswapV2Router.WETH();
            path[2] = toToken;
        }
        
        uniswapV2Router.swapExactTokensForTokens(fromTokenAmount, amountOutMin, path, address(this), deadline);
        
        uint newToTokenBalance = IERC20(toToken).balanceOf(address(this));
        uint toTokenReceived = newToTokenBalance.sub(oldToTokenBalance);
        return toTokenReceived;
    }
    
    function updateAccount(address account, uint _amountOutMin_referralFee, uint _deadline) private {
        uint pendingDivs = getPendingDivs(account);
        if (pendingDivs > 0) {
            uint referralFee = pendingDivs.mul(REFERRAL_FEE_RATE_X_100).div(100e2);
            uint pendingDivsAfterFee = pendingDivs.sub(referralFee);
            
            bool success = transferReferralFeeIfPossible(referrals[account], referralFee, _amountOutMin_referralFee, _deadline);
            
            uint amount = pendingDivs;
            if (success) {
                amount = pendingDivsAfterFee;
            }
            
            rewardsPendingClaim[account] = rewardsPendingClaim[account].add(amount);
            totalEarnedTokens[account] = totalEarnedTokens[account].add(amount);
            
            totalClaimedRewards = totalClaimedRewards.add(amount);
            
        }
        lastClaimedTime[account] = now;
    }
    
    function transferReferralFeeIfPossible(address account, uint amount, uint _amountOutMin_referralFee, uint _deadline) private returns (bool) {
        if (account != address(0) && amount > 0) {
            
            
            uint platformTokenReceived = doSwap(TRUSTED_REWARD_TOKEN_ADDRESS, TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount, _amountOutMin_referralFee, _deadline);
            
            totalReferralFeeEarned[account] = totalReferralFeeEarned[account].add(platformTokenReceived);
            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(account, platformTokenReceived);
            totalClaimedReferralFee = totalClaimedReferralFee.add(platformTokenReceived);
            emit ReferralFeeTransferred(account, platformTokenReceived);
            return true;
        }
        return false;
    }
    
    function getPendingDivs(address _holder) public view returns (uint) {
        if (!holders.contains(_holder)) return 0;
        if (depositedTokens[_holder] == 0) return 0;
        
        uint timeDiff;
        uint stakingEndTime = contractStartTime.add(REWARD_INTERVAL);
        uint _now = now;
        if (_now > stakingEndTime) {
            _now = stakingEndTime;
        }
        
        if (lastClaimedTime[_holder] >= _now) {
            timeDiff = 0;
        } else {
            timeDiff = _now.sub(lastClaimedTime[_holder]);
        }

        uint stakedAmount = depositedTokens[_holder];
        
        uint pendingDivs = stakedAmount
                            .mul(REWARD_RATE_X_100)
                            .mul(timeDiff)
                            .div(REWARD_INTERVAL)
                            .div(1e4);
            
        return pendingDivs;
    }
    
    function getTotalPendingDivs(address _holder) external view returns (uint) {
        uint pending = getPendingDivs(_holder);
        uint awaitingClaim = rewardsPendingClaim[_holder];
        return pending.add(awaitingClaim);
    }
    
    function getNumberOfHolders() external view returns (uint) {
        return holders.length();
    }
    
    function getNumberOfReferredStakers(address referrer) external view returns (uint _activeStakers, uint _totalStakers) {
        _activeStakers = activeReferredAddressesOfUser[referrer].length();
        _totalStakers = totalReferredAddressesOfUser[referrer].length();
    }
    
    function getReferredStaker(address account, uint i) external view returns (address _staker, uint _totalEarned) {
        _staker = totalReferredAddressesOfUser[account].at(i);
        _totalEarned = totalEarnedTokens[_staker];
    }
    function getActiveReferredStaker(address account, uint i) external view returns (address _staker, uint _totalEarned) {
        _staker = activeReferredAddressesOfUser[account].at(i);
        _totalEarned = totalEarnedTokens[_staker];
    }
    
    function depositByContract(address account, uint amount, uint _amountOutMin_stakingReferralFee, uint _deadline) external onlyTrustedDepositContract {
        require(amount > 0, "Amount must not be 0!");
        require(account != address(0), "Invalid account!");
        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), amount);
        
        updateAccount(account, _amountOutMin_stakingReferralFee, _deadline);
        
        depositedTokens[account] = depositedTokens[account].add(amount);
        
        holders.add(account);
    
        stakingTime[account] = now;
        emit Stake(account, amount);
    }
    
    function stake(uint amountToStake, address referrer, uint _amountOutMin_referralFee, uint _deadline) external noContractsAllowed notDuringEmergency {
        require(amountToStake > 0, "Cannot deposit 0 Tokens");
        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransferFrom(msg.sender, address(this), amountToStake);
        
        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);
        
        uint fee = amountToStake.mul(STAKING_FEE_RATE_X_100).div(1e4);
        uint amountAfterFee = amountToStake.sub(fee);
        if (fee > 0) {
            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(feeRecipientAddress, fee);
        }
        
        

        

        
        
        
        
        
        
        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountAfterFee);
        
        holders.add(msg.sender);
        
        if (referrals[msg.sender] == address(0)) {
            referrals[msg.sender] = referrer;
        }
        
        totalReferredAddressesOfUser[referrals[msg.sender]].add(msg.sender);
        activeReferredAddressesOfUser[referrals[msg.sender]].add(msg.sender);
        
        stakingTime[msg.sender] = now;
        emit Stake(msg.sender, amountAfterFee);
    }
    
    function unstake(uint amountToWithdraw, uint _amountOutMin_referralFee, uint _deadline) external noContractsAllowed {
        require(depositedTokens[msg.sender] >= amountToWithdraw, "Invalid amount to withdraw");
        
        require(now.sub(stakingTime[msg.sender]) > LOCKUP_TIME, "You recently staked, please wait before withdrawing.");
        
        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);
        
        uint fee = amountToWithdraw.mul(UNSTAKING_FEE_RATE_X_100).div(1e4);
        uint amountAfterFee = amountToWithdraw.sub(fee);
        if (fee > 0) {
            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(feeRecipientAddress, fee);
        }
        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, amountAfterFee);
        
        depositedTokens[msg.sender] = depositedTokens[msg.sender].sub(amountToWithdraw);
        
        if (holders.contains(msg.sender) && depositedTokens[msg.sender] == 0) {
            holders.remove(msg.sender);
            activeReferredAddressesOfUser[referrals[msg.sender]].remove(msg.sender);
        }
        
        emit Unstake(msg.sender, amountToWithdraw);
    }
    
    function claim(uint _amountOutMin_referralFee, uint _amountOutMin_claim, uint _deadline) external noContractsAllowed notDuringEmergency {
        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);
        uint amount = rewardsPendingClaim[msg.sender];
        if (amount > 0) {
            rewardsPendingClaim[msg.sender] = 0;
            
            
            uint platformTokenReceived = doSwap(TRUSTED_REWARD_TOKEN_ADDRESS, TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount, _amountOutMin_claim, _deadline);
            
            IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(msg.sender, platformTokenReceived);  
            emit RewardsTransferred(msg.sender, platformTokenReceived);
        }
    }
    
    function reInvest(uint _amountOutMin_referralFee, uint _amountOutMin_reinvest, uint _deadline) external noContractsAllowed notDuringEmergency {
        updateAccount(msg.sender, _amountOutMin_referralFee, _deadline);
        uint amount = rewardsPendingClaim[msg.sender];
        if (amount > 0) {
            rewardsPendingClaim[msg.sender] = 0;
            
            
            uint platformTokenReceived = doSwap(TRUSTED_REWARD_TOKEN_ADDRESS, TRUSTED_DEPOSIT_TOKEN_ADDRESS, amount, _amountOutMin_reinvest, _deadline);
            
            
            depositedTokens[msg.sender] = depositedTokens[msg.sender].add(platformTokenReceived);
            
            
            
            emit Reinvest(msg.sender, platformTokenReceived);
        }
    }
    
    function getStakersList(uint startIndex, uint endIndex) 
        public 
        view 
        returns (address[] memory stakers, 
            uint[] memory stakingTimestamps, 
            uint[] memory lastClaimedTimeStamps,
            uint[] memory stakedTokens) {
        require (startIndex < endIndex);
        
        uint length = endIndex.sub(startIndex);
        address[] memory _stakers = new address[](length);
        uint[] memory _stakingTimestamps = new uint[](length);
        uint[] memory _lastClaimedTimeStamps = new uint[](length);
        uint[] memory _stakedTokens = new uint[](length);
        
        for (uint i = startIndex; i < endIndex; i = i.add(1)) {
            address staker = holders.at(i);
            uint listIndex = i.sub(startIndex);
            _stakers[listIndex] = staker;
            _stakingTimestamps[listIndex] = stakingTime[staker];
            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];
            _stakedTokens[listIndex] = depositedTokens[staker];
        }
        
        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);
    }
    
    
    function claimAnyToken(address token, address recipient, uint amount) external onlyOwner {
        require(recipient != address(0), "Invalid Recipient");
        require(now > adminClaimableTime, "Contract not expired yet!");
        if (token == address(0)) {
            address payable _recipient = payable(recipient);
            _recipient.transfer(amount);
            return;
        }
        IERC20(token).safeTransfer(recipient, amount);
    }
}