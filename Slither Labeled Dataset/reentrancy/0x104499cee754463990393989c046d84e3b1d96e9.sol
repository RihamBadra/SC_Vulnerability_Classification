



pragma solidity ^0.6.0;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



pragma solidity >=0.4.24 <0.7.0;



contract Initializable {

  
  bool private initialized;

  
  bool private initializing;

  
  modifier initializer() {
    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");

    bool isTopLevelCall = !initializing;
    if (isTopLevelCall) {
      initializing = true;
      initialized = true;
    }

    _;

    if (isTopLevelCall) {
      initializing = false;
    }
  }

  
  function isConstructor() private view returns (bool) {
    
    
    
    
    
    address self = address(this);
    uint256 cs;
    assembly { cs := extcodesize(self) }
    return cs == 0;
  }

  
  uint256[50] private ______gap;
}



pragma solidity ^0.6.0;



contract ContextUpgradeSafe is Initializable {
    
    

    function __Context_init() internal initializer {
        __Context_init_unchained();
    }

    function __Context_init_unchained() internal initializer {


    }


    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }

    uint256[50] private __gap;
}



pragma solidity ^0.6.0;



contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    

    function __Ownable_init() internal initializer {
        __Context_init_unchained();
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal initializer {


        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);

    }


    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    uint256[49] private __gap;
}



pragma solidity ^0.6.0;




contract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    

    function __Pausable_init() internal initializer {
        __Context_init_unchained();
        __Pausable_init_unchained();
    }

    function __Pausable_init_unchained() internal initializer {


        _paused = false;

    }


    
    function paused() public view returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!_paused, "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(_paused, "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }

    uint256[49] private __gap;
}



pragma solidity ^0.6.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.6.2;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}



pragma solidity ^0.6.0;







contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    

    function __ERC20_init(string memory name, string memory symbol) internal initializer {
        __Context_init_unchained();
        __ERC20_init_unchained(name, symbol);
    }

    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {


        _name = name;
        _symbol = symbol;
        _decimals = 18;

    }


    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

    uint256[44] private __gap;
}



pragma solidity ^0.6.0;





library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        

        
        
        
        
        
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



pragma solidity >=0.6.0;

interface IContractRegistry {
    function addressOf(bytes32 contractName) external view returns(address);
}



pragma solidity >=0.6.0;

interface IBancorGovernance {
    function voteFor(uint256 _id) external;
    function voteAgainst(uint256 _id) external;
    function stake(uint256 _amount) external;
    function unstake(uint256 _amount) external;
}



pragma solidity >=0.6.0;

interface IDSToken {

}

interface IStakingRewards {
    
    function claimRewards() external returns (uint256);
    
    function pendingRewards(address provider) external view returns (uint256);
    
    function stakeRewards(uint256 maxAmount, IDSToken poolToken) external returns (uint256, uint256);
}



pragma solidity >=0.6.0;


interface IConverterAnchor {

}

interface ILiquidityProtection {
    function addLiquidity(
        IConverterAnchor _poolAnchor,
        IERC20 _reserveToken,
        uint256 _amount
    ) external payable returns(uint);
    

    function removeLiquidity(uint256 _id, uint32 _portion) external;

    function removeLiquidityReturn(
        uint256 _id,
        uint32 _portion,
        uint256 _removeTimestamp
    ) external view returns (uint256, uint256, uint256);
    
    
    

    
    function claimBalance(uint256 _startIndex, uint256 _endIndex) external;
}



pragma solidity 0.6.2;



interface ILiquidityProvider {
    function initializeAndAddLiquidity(
        IContractRegistry _contractRegistry,
        address _xbntContract,
        IERC20 _bnt,
        IERC20 _vbnt,
        address _poolAnchor,
        uint256 _amount
    ) external returns(uint);
    function removeLiquidity(uint256 _id) external;
    function claimRewards() external returns(uint256);
    function claimBalance() external;
    function claimRewardsAndRemoveLiquidity() external returns(uint256);
    function claimAndRestake(address _poolToken) external returns(uint256, uint256);
    function pendingRewards() external view returns(uint256);
}



pragma solidity ^0.6.0;

interface IMinimalProxyFactory {
    function deploy(uint256 salt, address implementation) external returns(address proxyAddress);
}



pragma solidity 0.6.2;

interface IDelegateRegistry {
    function setDelegate(bytes32 id, address delegate) external;
}



pragma solidity 0.6.2;

interface IxBNT {
    function getProxyAddressDepositIds(address proxyAddress) external view returns(uint256[] memory);
}



pragma solidity 0.6.2;





contract LiquidityProvider {
    bool private initialized;

    IContractRegistry private contractRegistry;
    IERC20 private bnt;
    IERC20 private vbnt;

    address private xbnt;
    uint256 public nextDepositIndexToClaimBalance;

    function initializeAndAddLiquidity(
        IContractRegistry _contractRegistry,
        address _xbnt,
        IERC20 _bnt,
        IERC20 _vbnt,
        address _poolToken,
        uint256 _amount
    ) external returns(uint256) {
        require(msg.sender == _xbnt, 'Invalid caller');
        require(!initialized, 'Already initialized');
        initialized = true;

        contractRegistry = _contractRegistry;
        xbnt = _xbnt;
        bnt = _bnt;
        vbnt = _vbnt;

        return _addLiquidity(_poolToken, _amount);
    }

    function _addLiquidity(
        address _poolToken,
        uint256 _amount
    ) private returns(uint256 id) {
        ILiquidityProtection lp = getLiquidityProtectionContract();
        bnt.approve(address(lp), uint(-1));

        id = lp.addLiquidity(IConverterAnchor(_poolToken), bnt, _amount);

        _retrieveVbntBalance();
    }

    
    function claimAndRestake(address _poolToken) external onlyXbntContract returns(uint256 newDepositId, uint256 restakedBal){
        (, newDepositId) = getStakingRewardsContract().stakeRewards(uint(-1), IDSToken(_poolToken));
        restakedBal = _retrieveVbntBalance();
    }

    function claimRewards() external onlyXbntContract returns(uint256 rewardsAmount){
        rewardsAmount = _claimRewards();
    }

    function _claimRewards() private returns(uint256 rewards){
        rewards = getStakingRewardsContract().claimRewards();
        _retrieveBntBalance();
    }

    function _removeLiquidity(ILiquidityProtection _lp, uint256 _id) private {
        _lp.removeLiquidity(_id, 1000000); 
    }

    
    function claimRewardsAndRemoveLiquidity() external onlyXbntContract returns(uint256 rewards) {
        rewards = _claimRewards();
        uint256[] memory depositIds = getDepositIds();

        ILiquidityProtection lp = getLiquidityProtectionContract();
        vbnt.approve(address(lp), uint(-1));

        for(uint256 i = 0; i < depositIds.length; i++){
            _removeLiquidity(lp, depositIds[i]);
        }
    }

    
    function claimBalance() external onlyXbntContract {
        getLiquidityProtectionContract().claimBalance(0, getDepositIds().length);
        _retrieveBntBalance();
    }

    function _retrieveBntBalance() private {
        bnt.transfer(xbnt, bnt.balanceOf(address(this)));
    }

    function _retrieveVbntBalance() private returns(uint256 vbntBal) {
        vbntBal = vbnt.balanceOf(address(this));
        vbnt.transfer(xbnt, vbntBal);
    }

    function pendingRewards() external view returns(uint){
        return getStakingRewardsContract().pendingRewards(address(this));
    }

    function getStakingRewardsContract() private view returns(IStakingRewards){
        return IStakingRewards(contractRegistry.addressOf('StakingRewards'));
    }

    function getLiquidityProtectionContract() private view returns(ILiquidityProtection){
        return ILiquidityProtection(contractRegistry.addressOf('LiquidityProtection'));
    }

    function getDepositIds() private view returns(uint256[] memory){
        return IxBNT(xbnt).getProxyAddressDepositIds(address(this));
    }

    modifier onlyXbntContract {
        require(msg.sender == xbnt, 'Invalid caller');
        _;
    }
}



pragma solidity 0.6.2;















interface IBancorNetwork {
    function convertByPath(
        address[] calldata _path,
        uint256 _amount,
        uint256 _minReturn,
        address _beneficiary,
        address _affiliateAccount,
        uint256 _affiliateFee
    ) external payable returns (uint256);

    function rateByPath(address[] calldata _path, uint256 _amount)
        external
        view
        returns (uint256);

    function conversionPath(IERC20 _sourceToken, IERC20 _targetToken)
        external
        view
        returns (address[] memory);
}

contract xBNT is ERC20UpgradeSafe, OwnableUpgradeSafe, PausableUpgradeSafe {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    IERC20 private bnt;
    IERC20 private vbnt;
    IContractRegistry private contractRegistry;
    IBancorGovernance internal bancorGovernance;
    IMinimalProxyFactory private proxyFactory;

    bytes32 private constant bancorNetworkName = 'BancorNetwork';
    bytes32 private constant stakingRewardsName = 'StakingRewards';
    bytes32 private constant liquidityProtectionName = 'LiquidityProtection';

    uint32 private constant PPM = 1000000;
    uint256 private constant DEC_18 = 1e18;
    uint256 private constant BUFFER_TARGET = 20; 
    uint256 private constant MAX_UINT = 2**256 - 1;
    uint256 private constant WAITING_PERIOD = 2 days;
    uint256 private constant INITIAL_SUPPLY_MULTIPLIER = 10;
    uint256 private constant LIQUIDATION_TIME_PERIOD = 4 weeks;

    uint256 private lpImplementationChangedTimestamp;
    uint256 private governanceAddressChangedTimestamp;

    uint256 public adminActiveTimestamp;

    uint256 public lowestActiveProxyIndex;
    uint256 public nextProxyIndex;

    uint256 public totalAllocatedNav;
    uint256 public pendingRewardsContributionToNav;

    uint256 public withdrawableBntFees;

    address private manager;
    address private manager2;
    address internal liquidityProviderImplementation;

    address private queuedLiquidityProviderImplementation;
    address private queuedGovernanceAddress;

    address private constant ZERO_ADDRESS = address(0);

    struct FeeDivisors {
        uint256 mintFee;
        uint256 burnFee;
        uint256 claimFee;
    }

    FeeDivisors public feeDivisors;

    struct Deposit {
        address proxyAddress;
        uint256 depositId;
        uint256 initialContribution;
        uint256 latestContributionToNav;
    }

    mapping(uint256 => Deposit) public depositIdToDeposit;

    struct ProxyData {
        uint256[] depositIds;
        uint256 pendingRewardsContributionToNav;
        uint256 deployedBnt;
        bool balanceClaimed;
    }

    mapping(address => ProxyData) private proxyAddressToData;
    mapping(uint256 => address) public proxyIndexToAddress;

    event AddLiquidity(
        address poolToken,
        uint256 amount,
        uint256 depositId,
        uint256 proxyIndex,
        uint256 timestamp
    );

    event ClaimRestake(
        uint256 proxyIndex,
        uint256 amount,
        uint256 depositId,
        uint256 timestamp
    );

    event ClaimRemove(uint256 proxyIndex, uint256 rewardsClaimed);

    event ClaimRewards(uint256 proxyIndex, uint256 rewardsClaimed);

    event ClaimBalance(uint256 proxyIndex);

    event RewardsNavUpdated(
        uint256 previousRewardsNav,
        uint256 newRewardsNav,
        uint256 timestamp
    );

    event KeyAddressChange();

    function initialize(
        IERC20 _bnt,
        IERC20 _vbnt,
        IContractRegistry _contractRegistry,
        IBancorGovernance _bancorGovernance,
        IMinimalProxyFactory _proxyFactory,
        address _liquidityProviderImplementation,
        uint256 _mintFeeDivisor,
        uint256 _burnFeeDivisor,
        uint256 _claimFeeDivisor,
        string memory _symbol
    ) public initializer {
        __ERC20_init('xBNT', _symbol);
        __Ownable_init();
        __Pausable_init();

        bnt = _bnt;
        vbnt = _vbnt;
        contractRegistry = _contractRegistry;
        bancorGovernance = _bancorGovernance;
        proxyFactory = _proxyFactory;
        liquidityProviderImplementation = _liquidityProviderImplementation;

        _setFeeDivisors(_mintFeeDivisor, _burnFeeDivisor, _claimFeeDivisor);
        _updateAdminActiveTimestamp();
    }

    
    
    

    
    function mint(address[] calldata path, uint256 minReturn)
        external
        payable
        whenNotPaused
    {
        require(msg.value > 0, 'Must send ETH');

        uint256 incrementalBnt =
            IBancorNetwork(contractRegistry.addressOf(bancorNetworkName))
                .convertByPath{value: msg.value}(
                path,
                msg.value,
                minReturn,
                ZERO_ADDRESS,
                ZERO_ADDRESS,
                0
            );

        _mintInternal(incrementalBnt);
    }

    
    function mintWithToken(uint256 bntAmount) external whenNotPaused {
        require(bntAmount > 0, 'Must send BNT');

        bnt.transferFrom(msg.sender, address(this), bntAmount);

        _mintInternal(bntAmount);
    }

    function _mintInternal(uint256 _incrementalBnt) private {
        uint256 fee =
            _calculateAndIncrementFee(_incrementalBnt, feeDivisors.mintFee);

        uint256 mintAmount =
            calculateMintAmount(_incrementalBnt.sub(fee), totalSupply());

        super._mint(msg.sender, mintAmount);
    }

    function calculateMintAmount(uint256 incrementalBnt, uint256 totalSupply)
        public
        view
        returns (uint256 mintAmount)
    {
        if (totalSupply == 0)
            return incrementalBnt.mul(INITIAL_SUPPLY_MULTIPLIER);

        mintAmount = (incrementalBnt).mul(totalSupply).div(
            getNav().sub(incrementalBnt)
        );
    }

    
    function burn(
        uint256 redeemAmount,
        bool redeemForEth,
        address[] memory path,
        uint256 minReturn
    ) public {
        require(redeemAmount > 0, 'Must send xBNT');

        uint256 bufferBalance = getBufferBalance();
        uint256 proRataBnt = getNav().mul(redeemAmount).div(totalSupply());
        require(
            proRataBnt <= bufferBalance,
            'Burn exceeds available liquidity'
        );

        super._burn(msg.sender, redeemAmount);
        uint256 fee =
            _calculateAndIncrementFee(proRataBnt, feeDivisors.burnFee);

        if (redeemForEth) {
            address bancorNetworkAddress =
                contractRegistry.addressOf(bancorNetworkName);
            _approveIfNecessary(bnt, bancorNetworkAddress); 

            uint256 ethRedemption =
                IBancorNetwork(bancorNetworkAddress).convertByPath(
                    path,
                    proRataBnt.sub(fee),
                    minReturn,
                    ZERO_ADDRESS,
                    ZERO_ADDRESS,
                    0
                );
            (bool success, ) = msg.sender.call.value(ethRedemption)('');
            require(success, 'Transfer failed');
        } else {
            bnt.transfer(msg.sender, proRataBnt.sub(fee));
        }
    }

    
    
    

    
    function addLiquidity(IConverterAnchor _poolAnchor, uint256 _amount)
        external
        onlyOwnerOrManager
    {
        uint256 salt =
            uint256(keccak256(abi.encodePacked(nextProxyIndex, _amount)));
        address liquidityProviderProxy =
            proxyFactory.deploy(salt, liquidityProviderImplementation);

        bnt.transfer(liquidityProviderProxy, _amount);

        uint256 depositId =
            ILiquidityProvider(liquidityProviderProxy)
                .initializeAndAddLiquidity(
                contractRegistry,
                address(this),
                bnt,
                vbnt,
                address(_poolAnchor),
                _amount
            );

        Deposit memory newDeposit =
            Deposit({
                proxyAddress: liquidityProviderProxy,
                depositId: depositId,
                initialContribution: _amount,
                latestContributionToNav: _amount
            });

        emit AddLiquidity(
            address(_poolAnchor),
            _amount,
            depositId,
            nextProxyIndex,
            block.timestamp
        );

        depositIdToDeposit[depositId] = newDeposit;

        ProxyData storage proxyData =
            proxyAddressToData[liquidityProviderProxy];
        proxyData.depositIds.push(depositId);
        proxyData.deployedBnt = _amount;

        proxyIndexToAddress[nextProxyIndex] = liquidityProviderProxy;
        nextProxyIndex++;

        totalAllocatedNav = totalAllocatedNav.add(_amount);

        _stake(_amount);
        _updateAdminActiveTimestamp();
    }

    
    function claimAndRestake(uint256 proxyIndex, address poolToken)
        external
        onlyOwnerOrManager
    {
        address proxyAddress = proxyIndexToAddress[proxyIndex];
        ProxyData storage proxyData = proxyAddressToData[proxyAddress];

        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);

        (uint256 newDepositId, uint256 restakedBal) =
            lpProxy.claimAndRestake(poolToken);

        
        
        _calculateAndIncrementFee(restakedBal, feeDivisors.claimFee);

        proxyData.depositIds.push(newDepositId);
        proxyData.deployedBnt = proxyData.deployedBnt.add(restakedBal);

        
        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(
            proxyData.pendingRewardsContributionToNav
        );
        proxyData.pendingRewardsContributionToNav = 0;

        
        totalAllocatedNav = totalAllocatedNav.add(restakedBal);

        depositIdToDeposit[newDepositId] = Deposit({
            proxyAddress: proxyAddress,
            depositId: newDepositId,
            initialContribution: restakedBal,
            latestContributionToNav: restakedBal
        });

        emit ClaimRestake(
            proxyIndex,
            restakedBal,
            newDepositId,
            block.timestamp
        );

        _stake(restakedBal);
        _updateAdminActiveTimestamp();
    }

    
    function updatePendingRewardsContributionToNav(
        uint256 beginProxyIndexIterator,
        uint256 endProxyIndexIterator
    ) external onlyOwnerOrManager {
        require(
            beginProxyIndexIterator >= lowestActiveProxyIndex,
            'Invalid index'
        );
        require(endProxyIndexIterator <= nextProxyIndex, 'Invalid index');
        require(
            endProxyIndexIterator > beginProxyIndexIterator,
            'Invalid order'
        );

        IStakingRewards stakingRewards = getStakingRewardsContract();

        uint256 replacedPendingRewardsContributionToNav;
        uint256 updatedPendingRewardsContributionToNav;

        for (uint256 i = lowestActiveProxyIndex; i < nextProxyIndex; i++) {
            address proxyAddress = proxyIndexToAddress[i];
            replacedPendingRewardsContributionToNav = replacedPendingRewardsContributionToNav
                .add(
                proxyAddressToData[proxyAddress].pendingRewardsContributionToNav
            );

            uint256 newContributionToRewardsNav =
                stakingRewards.pendingRewards(proxyAddress);

            proxyAddressToData[proxyAddress]
                .pendingRewardsContributionToNav = newContributionToRewardsNav;
            updatedPendingRewardsContributionToNav = updatedPendingRewardsContributionToNav
                .add(newContributionToRewardsNav);
        }

        emit RewardsNavUpdated(
            pendingRewardsContributionToNav,
            updatedPendingRewardsContributionToNav,
            block.timestamp
        );

        pendingRewardsContributionToNav = pendingRewardsContributionToNav
            .add(updatedPendingRewardsContributionToNav)
            .sub(replacedPendingRewardsContributionToNav);
    }

    
    function updateTotalAllocatedNav(
        uint256 beginProxyIndexIterator,
        uint256 endProxyIndexIterator
    ) external onlyOwnerOrManager {
        require(
            beginProxyIndexIterator >= lowestActiveProxyIndex,
            'Invalid index'
        );
        require(endProxyIndexIterator <= nextProxyIndex, 'Invalid index');

        ILiquidityProtection lp = getLiquidityProtectionContract();

        uint256[] memory depositIds;
        uint256 newContributionToAllocatedNav;

        for (
            uint256 i = beginProxyIndexIterator;
            i < endProxyIndexIterator;
            i++
        ) {
            depositIds = proxyAddressToData[proxyIndexToAddress[i]].depositIds;

            for (uint256 j = 0; j < depositIds.length; j++) {
                (newContributionToAllocatedNav, , ) = lp.removeLiquidityReturn(
                    depositIds[j],
                    PPM,
                    block.timestamp
                );

                Deposit storage deposit = depositIdToDeposit[depositIds[j]];

                totalAllocatedNav = totalAllocatedNav
                    .sub(deposit.latestContributionToNav)
                    .add(newContributionToAllocatedNav);
                deposit.latestContributionToNav = newContributionToAllocatedNav;
            }
        }
    }

    
    function claimRewardsAndRemoveLiquidity() external onlyOwnerOrManager {
        _claimRewardsAndRemoveLiquidity();
        _updateAdminActiveTimestamp();
    }

    function emergencyClaimAndRemove() external liquidationTimeElapsed {
        _claimRewardsAndRemoveLiquidity();
    }

    function _claimRewardsAndRemoveLiquidity() private {
        address proxyAddress = proxyIndexToAddress[lowestActiveProxyIndex];
        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);
        ProxyData storage proxyData = proxyAddressToData[proxyAddress];

        
        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(
            proxyData.pendingRewardsContributionToNav
        );
        proxyData.pendingRewardsContributionToNav = 0;

        _unstake(proxyData.deployedBnt);
        vbnt.transfer(proxyAddress, proxyData.deployedBnt);

        uint256 rewardsClaimed = lpProxy.claimRewardsAndRemoveLiquidity();
        _calculateAndIncrementFee(rewardsClaimed, feeDivisors.claimFee);

        emit ClaimRemove(lowestActiveProxyIndex, rewardsClaimed);

        
        

        lowestActiveProxyIndex++;
        _updateAdminActiveTimestamp();
    }

    
    function claimBalance(uint256 proxyIndex) external onlyOwnerOrManager {
        _claimBalance(proxyIndex);
        _updateAdminActiveTimestamp();
    }

    function emergencyClaimBalance(uint256 proxyIndex)
        external
        liquidationTimeElapsed
    {
        _claimBalance(proxyIndex);
    }

    function _claimBalance(uint256 _proxyIndex) private {
        address proxyAddress = proxyIndexToAddress[_proxyIndex];
        ProxyData memory proxyData = proxyAddressToData[proxyAddress];

        require(!proxyData.balanceClaimed, 'Already claimed');
        proxyAddressToData[proxyAddress].balanceClaimed = true;

        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);
        lpProxy.claimBalance();

        uint256 contributionToTotalAllocatedNav;

        uint256[] memory depositIds = proxyData.depositIds;
        for (uint256 i = 0; i < depositIds.length; i++) {
            contributionToTotalAllocatedNav = contributionToTotalAllocatedNav
                .add(depositIdToDeposit[depositIds[i]].latestContributionToNav);
        }

        emit ClaimBalance(_proxyIndex);

        
        totalAllocatedNav = totalAllocatedNav.sub(
            contributionToTotalAllocatedNav
        );
    }

    
    function claimRewards(uint256 proxyIndex) external onlyOwnerOrManager {
        address proxyAddress = proxyIndexToAddress[lowestActiveProxyIndex];
        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);

        uint256 proxyContributionToRewardsNav =
            getProxyAddressRewardsContributionToNav(proxyAddress);
        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(
            proxyContributionToRewardsNav
        );
        proxyAddressToData[proxyAddress].pendingRewardsContributionToNav = 0;

        uint256 rewards = lpProxy.claimRewards();
        _calculateAndIncrementFee(rewards, feeDivisors.claimFee);
        _updateAdminActiveTimestamp();

        emit ClaimRewards(proxyIndex, rewards);
    }

    function getLiquidityProtectionContract()
        public
        view
        returns (ILiquidityProtection)
    {
        return
            ILiquidityProtection(
                contractRegistry.addressOf(liquidityProtectionName)
            );
    }

    function getStakingRewardsContract() public view returns (IStakingRewards) {
        return IStakingRewards(contractRegistry.addressOf(stakingRewardsName));
    }

    
    
    

    function getProxyAddressDepositIds(address proxyAddress)
        public
        view
        returns (uint256[] memory)
    {
        return proxyAddressToData[proxyAddress].depositIds;
    }

    function getProxyAddressRewardsContributionToNav(address proxyAddress)
        public
        view
        returns (uint256)
    {
        return proxyAddressToData[proxyAddress].pendingRewardsContributionToNav;
    }

    function changeLiquidityProviderImplementation(address newImplementation)
        external
        onlyOwner
    {
        queuedLiquidityProviderImplementation = newImplementation;
        lpImplementationChangedTimestamp = block.timestamp;
        emit KeyAddressChange();
    }

    function confirmLiquidityProviderImplementationChange() external onlyOwner {
        require(
            block.timestamp >
                lpImplementationChangedTimestamp.add(WAITING_PERIOD),
            'Too soon'
        );
        liquidityProviderImplementation = queuedLiquidityProviderImplementation;
    }

    function changeGovernanceAddress(address newAddress) external onlyOwner {
        queuedGovernanceAddress = newAddress;
        governanceAddressChangedTimestamp = block.timestamp;
        emit KeyAddressChange();
    }

    function confirmGovernanceAddressChange() external onlyOwner {
        require(
            block.timestamp >
                governanceAddressChangedTimestamp.add(WAITING_PERIOD),
            'Too soon'
        );
        bancorGovernance = IBancorGovernance(queuedGovernanceAddress);
    }

    
    
    

    
    function _stake(uint256 _amount) private {
        bancorGovernance.stake(_amount);
    }

    function _unstake(uint256 _amount) private {
        bancorGovernance.unstake(_amount);
    }

    
    
    

    function getTargetBufferBalance() public view returns (uint256) {
        return getNav().div(BUFFER_TARGET);
    }

    function getNav() public view returns (uint256) {
        return
            totalAllocatedNav.add(getRewardsContributionToNav()).add(
                getBufferBalance()
            );
    }

    function getRewardsContributionToNav() public view returns (uint256) {
        uint256 unassessedFees =
            pendingRewardsContributionToNav.div(feeDivisors.claimFee);
        return pendingRewardsContributionToNav.sub(unassessedFees);
    }

    function getBufferBalance() public view returns (uint256) {
        uint256 bntBal = bnt.balanceOf(address(this));
        if (bntBal < withdrawableBntFees) return 0;
        return bntBal.sub(withdrawableBntFees);
    }

    function _calculateFee(uint256 _value, uint256 _feeDivisor)
        internal
        pure
        returns (uint256 fee)
    {
        if (_feeDivisor > 0 && _value > 0) {
            fee = _value.div(_feeDivisor);
        }
    }

    function _incrementWithdrawableBntFees(uint256 _feeAmount) private {
        withdrawableBntFees = withdrawableBntFees.add(_feeAmount);
    }

    function _calculateAndIncrementFee(uint256 _value, uint256 _feeDivisor)
        private
        returns (uint256 fee)
    {
        fee = _calculateFee(_value, _feeDivisor);
        _incrementWithdrawableBntFees(fee);
    }

    function setDelegate(
        address delegateRegistry,
        bytes32 id,
        address delegate
    ) external onlyOwnerOrManager {
        IDelegateRegistry(delegateRegistry).setDelegate(id, delegate);
    }

    
    
    

    function _approveIfNecessary(IERC20 _token, address _toApprove) private {
        if (_token.allowance(address(this), _toApprove) == 0) {
            _token.safeApprove(_toApprove, MAX_UINT);
        }
    }

    function getBancorNetworkContract() public view returns (IBancorNetwork) {
        return IBancorNetwork(contractRegistry.addressOf(bancorNetworkName));
    }

    function approveVbnt(address _toApprove) external onlyOwnerOrManager {
        vbnt.approve(_toApprove, MAX_UINT);
    }

    function pauseContract() external onlyOwnerOrManager {
        _pause();
    }

    function unpauseContract() external onlyOwnerOrManager {
        _unpause();
    }

    modifier onlyOwnerOrManager {
        require(
            msg.sender == owner() ||
                msg.sender == manager ||
                msg.sender == manager2,
            'Non-admin caller'
        );
        _;
    }

    modifier liquidationTimeElapsed {
        require(
            adminActiveTimestamp.add(LIQUIDATION_TIME_PERIOD) < block.timestamp,
            'Liquidation time not elapsed'
        );
        _;
    }

    
    function setManager(address _manager) external onlyOwner {
        manager = _manager;
    }

    
    function setManager2(address _manager2) external onlyOwner {
        manager2 = _manager2;
    }

    
    function setFeeDivisors(
        uint256 mintFeeDivisor,
        uint256 burnFeeDivisor,
        uint256 claimFeeDivisor
    ) external onlyOwner {
        _setFeeDivisors(mintFeeDivisor, burnFeeDivisor, claimFeeDivisor);
    }

    function _setFeeDivisors(
        uint256 _mintFeeDivisor,
        uint256 _burnFeeDivisor,
        uint256 _claimFeeDivisor
    ) private {
        require(_mintFeeDivisor == 0 || _mintFeeDivisor >= 50, 'Invalid fee');
        require(_burnFeeDivisor == 0 || _burnFeeDivisor >= 100, 'Invalid fee');
        require(_claimFeeDivisor >= 25, 'Invalid fee');
        feeDivisors.mintFee = _mintFeeDivisor;
        feeDivisors.burnFee = _burnFeeDivisor;
        feeDivisors.claimFee = _claimFeeDivisor;
    }

    
    function _updateAdminActiveTimestamp() private {
        adminActiveTimestamp = block.timestamp;
    }

    receive() external payable {
        require(msg.sender != tx.origin, 'Errant ETH deposit');
    }
}