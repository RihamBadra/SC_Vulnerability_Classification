



pragma solidity >=0.5.0;



interface ILayerZeroUserApplicationConfig {

    

    

    

    

    

    function setConfig(

        uint16 _version,

        uint16 _chainId,

        uint256 _configType,

        bytes calldata _config

    ) external;



    

    

    function setSendVersion(uint16 _version) external;



    

    

    function setReceiveVersion(uint16 _version) external;



    

    

    

    function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress)

        external;

}


pragma solidity >=0.5.0;




interface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {

    

    

    

    

    

    

    

    function send(

        uint16 _dstChainId,

        bytes calldata _destination,

        bytes calldata _payload,

        address payable _refundAddress,

        address _zroPaymentAddress,

        bytes calldata _adapterParams

    ) external payable;



    

    

    

    

    

    

    

    function receivePayload(

        uint16 _srcChainId,

        bytes calldata _srcAddress,

        address _dstAddress,

        uint64 _nonce,

        uint256 _gasLimit,

        bytes calldata _payload

    ) external;



    

    

    

    function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress)

        external

        view

        returns (uint64);



    

    

    function getOutboundNonce(uint16 _dstChainId, address _srcAddress)

        external

        view

        returns (uint64);



    

    

    

    

    

    

    function estimateFees(

        uint16 _dstChainId,

        address _userApplication,

        bytes calldata _payload,

        bool _payInZRO,

        bytes calldata _adapterParam

    ) external view returns (uint256 nativeFee, uint256 zroFee);



    

    function getChainId() external view returns (uint16);



    

    

    

    

    function retryPayload(

        uint16 _srcChainId,

        bytes calldata _srcAddress,

        bytes calldata _payload

    ) external;



    

    

    

    function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)

        external

        view

        returns (bool);



    

    

    function getSendLibraryAddress(address _userApplication)

        external

        view

        returns (address);



    

    

    function getReceiveLibraryAddress(address _userApplication)

        external

        view

        returns (address);



    

    

    function isSendingPayload() external view returns (bool);



    

    

    function isReceivingPayload() external view returns (bool);



    

    

    

    

    

    function getConfig(

        uint16 _version,

        uint16 _chainId,

        address _userApplication,

        uint256 _configType

    ) external view returns (bytes memory);



    

    

    function getSendVersion(address _userApplication)

        external

        view

        returns (uint16);



    

    

    function getReceiveVersion(address _userApplication)

        external

        view

        returns (uint16);

}


pragma solidity >=0.5.0;



interface ILayerZeroReceiver {

    

    

    

    

    

    function lzReceive(

        uint16 _srcChainId,

        bytes calldata _srcAddress,

        uint64 _nonce,

        bytes calldata _payload

    ) external;

}





pragma solidity ^0.8.0;


library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}






pragma solidity ^0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}






pragma solidity ^0.8.0;



interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}






pragma solidity ^0.8.0;



interface IERC721Metadata is IERC721 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function tokenURI(uint256 tokenId) external view returns (string memory);
}






pragma solidity ^0.8.0;



abstract contract ERC165 is IERC165 {
    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}






pragma solidity ^0.8.0;


interface IERC721Receiver {
    
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}






pragma solidity ^0.8.1;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        return account.code.length > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}






pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;









contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    
    string private _name;

    
    string private _symbol;

    
    mapping(uint256 => address) private _owners;

    
    mapping(address => uint256) private _balances;

    
    mapping(uint256 => address) private _tokenApprovals;

    
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);

        _afterTokenTransfer(address(0), to, tokenId);
    }

    
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);

        _afterTokenTransfer(owner, address(0), tokenId);
    }

    
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer from incorrect owner");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);

        _afterTokenTransfer(from, to, tokenId);
    }

    
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}



pragma solidity ^0.8.6;







abstract contract NonblockingReceiver is Ownable, ILayerZeroReceiver {

    ILayerZeroEndpoint internal endpoint;



    struct FailedMessages {

        uint256 payloadLength;

        bytes32 payloadHash;

    }



    mapping(uint16 => mapping(bytes => mapping(uint256 => FailedMessages)))

        public failedMessages;

    mapping(uint16 => bytes) public trustedRemoteLookup;



    event MessageFailed(

        uint16 _srcChainId,

        bytes _srcAddress,

        uint64 _nonce,

        bytes _payload

    );



    function lzReceive(

        uint16 _srcChainId,

        bytes memory _srcAddress,

        uint64 _nonce,

        bytes memory _payload

    ) external override {

        require(msg.sender == address(endpoint)); 

        require(

            _srcAddress.length == trustedRemoteLookup[_srcChainId].length &&

                keccak256(_srcAddress) ==

                keccak256(trustedRemoteLookup[_srcChainId]),

            "NonblockingReceiver: invalid source sending contract"

        );



        

        

        try this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload) {

            

        } catch {

            

            failedMessages[_srcChainId][_srcAddress][_nonce] = FailedMessages(

                _payload.length,

                keccak256(_payload)

            );

            emit MessageFailed(_srcChainId, _srcAddress, _nonce, _payload);

        }

    }



    function onLzReceive(

        uint16 _srcChainId,

        bytes memory _srcAddress,

        uint64 _nonce,

        bytes memory _payload

    ) public {

        

        require(

            msg.sender == address(this),

            "NonblockingReceiver: caller must be Bridge."

        );



        

        _LzReceive(_srcChainId, _srcAddress, _nonce, _payload);

    }



    

    function _LzReceive(

        uint16 _srcChainId,

        bytes memory _srcAddress,

        uint64 _nonce,

        bytes memory _payload

    ) internal virtual;



    function _lzSend(

        uint16 _dstChainId,

        bytes memory _payload,

        address payable _refundAddress,

        address _zroPaymentAddress,

        bytes memory _txParam

    ) internal {

        endpoint.send{value: msg.value}(

            _dstChainId,

            trustedRemoteLookup[_dstChainId],

            _payload,

            _refundAddress,

            _zroPaymentAddress,

            _txParam

        );

    }



    function retryMessage(

        uint16 _srcChainId,

        bytes memory _srcAddress,

        uint64 _nonce,

        bytes calldata _payload

    ) external payable {

        

        FailedMessages storage failedMsg = failedMessages[_srcChainId][

            _srcAddress

        ][_nonce];

        require(

            failedMsg.payloadHash != bytes32(0),

            "NonblockingReceiver: no stored message"

        );

        require(

            _payload.length == failedMsg.payloadLength &&

                keccak256(_payload) == failedMsg.payloadHash,

            "LayerZero: invalid payload"

        );

        

        failedMsg.payloadLength = 0;

        failedMsg.payloadHash = bytes32(0);

        

        this.onLzReceive(_srcChainId, _srcAddress, _nonce, _payload);

    }



    function setTrustedRemote(uint16 _chainId, bytes calldata _trustedRemote)

        external

        onlyOwner

    {

        trustedRemoteLookup[_chainId] = _trustedRemote;

    }

}


pragma solidity ^0.8.7;



























contract OmniSneaker is Ownable, ERC721, NonblockingReceiver {

    address public _owner;

    string private baseURI;

    uint256 nextTokenId = 0;

    uint256 MAX_MINT = 430;



    uint256 gasForDestinationLzReceive = 350000;



    constructor(string memory baseURI_, address _layerZeroEndpoint)

        ERC721("OmniSneaker", "OS")

    {

        _owner = msg.sender;

        endpoint = ILayerZeroEndpoint(_layerZeroEndpoint);

        baseURI = baseURI_;

    }



    

    function devMint(uint8 numTokens) public onlyOwner {

        require(nextTokenId + numTokens <= MAX_MINT, "Mint exceeds supply");

        

        for (uint256 i = 0; i < numTokens; i++) {

            _safeMint(msg.sender, ++nextTokenId);

        }

    }



    

    

    

    function mint(uint8 numTokens) external payable {

        require(numTokens < 3, "GG: Max 2 NFTs per transaction");

        require(

            nextTokenId + numTokens <= MAX_MINT,

            "GG: Mint exceeds supply"

        );

        _safeMint(msg.sender, ++nextTokenId);

        if (numTokens == 2) {

            _safeMint(msg.sender, ++nextTokenId);

        }

    }



    

    

    function traverseChains(uint16 _chainId, uint256 tokenId) public payable {

        require(

            msg.sender == ownerOf(tokenId),

            "You must own the token to traverse"

        );

        require(

            trustedRemoteLookup[_chainId].length > 0,

            "This chain is currently unavailable for travel"

        );



        

        _burn(tokenId);



        

        bytes memory payload = abi.encode(msg.sender, tokenId);



        

        uint16 version = 1;

        bytes memory adapterParams = abi.encodePacked(

            version,

            gasForDestinationLzReceive

        );



        

        

        (uint256 messageFee, ) = endpoint.estimateFees(

            _chainId,

            address(this),

            payload,

            false,

            adapterParams

        );



        require(

            msg.value >= messageFee,

            "GG: msg.value not enough to cover messageFee. Send gas for message fees"

        );



        endpoint.send{value: msg.value}(

            _chainId, 

            trustedRemoteLookup[_chainId], 

            payload, 

            payable(msg.sender), 

            address(0x0), 

            adapterParams 

        );

    }



    function setBaseURI(string memory URI) external onlyOwner {

        baseURI = URI;

    }



    function donate() external payable {

        

    }



    

    function withdraw(uint256 amt) external onlyOwner {

        (bool sent, ) = payable(_owner).call{value: amt}("");

        require(sent, "GG: Failed to withdraw Ether");

    }



    

    function setGasForDestinationLzReceive(uint256 newVal) external onlyOwner {

        gasForDestinationLzReceive = newVal;

    }



    

    

    



    function _LzReceive(

        uint16 _srcChainId,

        bytes memory _srcAddress,

        uint64 _nonce,

        bytes memory _payload

    ) internal override {

        

        (address toAddr, uint256 tokenId) = abi.decode(

            _payload,

            (address, uint256)

        );



        

        _safeMint(toAddr, tokenId);

    }



    function _baseURI() internal view override returns (string memory) {

        return baseURI;

    }

}