


pragma solidity 0.6.11;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


library EnumerableSet {
    
    
    
    
    
    
    
    

    struct Set {
        
        bytes32[] _values;

        
        
        mapping (bytes32 => uint256) _indexes;
    }

    
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            
            
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { 
            
            
            

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            
            

            bytes32 lastvalue = set._values[lastIndex];

            
            set._values[toDeleteIndex] = lastvalue;
            
            set._indexes[lastvalue] = toDeleteIndex + 1; 

            
            set._values.pop();

            
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    

    struct AddressSet {
        Set _inner;
    }

    
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(value)));
    }

    
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(value)));
    }

    
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(value)));
    }

    
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint256(_at(set._inner, index)));
    }


    

    struct UintSet {
        Set _inner;
    }

    
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}


contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  
  constructor() public {
    owner = msg.sender;
  }


  
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  
  function transferOwnership(address newOwner) onlyOwner public {
    require(newOwner != address(0));
    emit OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IUniswapV2Router {
  function WETH() external pure returns (address);

  function swapExactTokensForTokens(
      uint amountIn,
      uint amountOutMin,
      address[] calldata path,
      address to,
      uint deadline
  ) external returns (uint[] memory amounts);
  
  function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
}

contract Fundraiser is Ownable {
    using Address for address;
    using SafeMath for uint;
    using EnumerableSet for EnumerableSet.AddressSet;
    using SafeERC20 for IERC20;
    
    event RewardsTransferred(address indexed holder, uint amount);
    event DepositTokenAdded(address indexed tokenAddress);
    event DepositTokenRemoved(address indexed tokenAddress);
    event Deposit(address indexed holder, uint amount);
    
    event VerifyAddressSet(address _verifyAddress);
    
    event SaleStart();
    event SaleStop();

    
    
    
    
    address public constant TRUSTED_DEPOSIT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;
    address public constant TRUSTED_REWARD_TOKEN_ADDRESS = 0xBD100d061E120b2c67A24453CF6368E63f1Be056;
    
    uint public constant REWARD_TOKEN_PER_DEPOSIT_TOKEN = 5e18;
    uint public constant DEPOSIT_TOKEN_DECIMALS = 6;
    uint public constant FUNDRAISER_GOAL_IN_DEPOSIT_TOKENS = 100000000e6;
    uint public constant CHAIN_ID = 4; 
    
    
    IUniswapV2Router public constant uniswapV2Router = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); 
    
    
    
    uint public totalDepositedTokens;
    
    address public verifyAddress;
    
    function setVerifyAddress(address newVerifyAddress) external onlyOwner {
        verifyAddress = newVerifyAddress;
        emit VerifyAddressSet(newVerifyAddress);
    }

    
    uint public immutable contractStartTime;
    
    
    modifier noContractsAllowed() {
        require(tx.origin == msg.sender, "No Contracts Allowed!");
        _;
    }
    
    EnumerableSet.AddressSet private holders;
        
    mapping (address => uint) public depositedTokens;
    mapping (address => uint) public stakingTime;
    mapping (address => uint) public lastClaimedTime;

    mapping (address => bool) public rewardClaimed;
    
    constructor() public {
        contractStartTime = now;
    }
    
    bool saleOpen = false;
    modifier whenSaleOpen() {
        require(saleOpen, "Sale not open!");
        _;
    }
    modifier whenSaleNotOpen() {
        require(!saleOpen, "Sale is open!");
        _;
    }
    function openSale() external onlyOwner {
        saleOpen = true;
        emit SaleStart();
    }
    function closeSale() external onlyOwner {
        saleOpen = false;
        emit SaleStop();
    }
    
    mapping (address => bool) public trustedDepositTokens;
    function addTrustedDepositToken(address _tokenAddress) external onlyOwner {
        require(_tokenAddress != address(0), "Cannot add 0 address!");
        require(_tokenAddress != TRUSTED_REWARD_TOKEN_ADDRESS, "Cannot add deposit token same as reward token!");
        trustedDepositTokens[_tokenAddress] = true;
        emit DepositTokenAdded(_tokenAddress);
    }
    function removeTrustedDepositToken(address _tokenAddress) external onlyOwner {
        trustedDepositTokens[_tokenAddress] = false;
        emit DepositTokenRemoved(_tokenAddress);
    }
  
    
    function getPendingDivs(address _holder) public view returns (uint) {
        if (!holders.contains(_holder)) return 0;
        if (depositedTokens[_holder] == 0) return 0;
        if (rewardClaimed[_holder]) return 0;
        
        uint pendingDivs = depositedTokens[_holder].mul(REWARD_TOKEN_PER_DEPOSIT_TOKEN).div(10 ** DEPOSIT_TOKEN_DECIMALS);
            
        return pendingDivs;
    }
    
    function getNumberOfHolders() external view returns (uint) {
        return holders.length();
    }
    
    function deposit(uint amountToDeposit, address depositToken, uint _amountOutMin, uint _deadline, uint contributionLimit, bytes calldata signature) external noContractsAllowed whenSaleOpen {
        require(verify(contributionLimit, signature), "invalid signature!");
        
        require(amountToDeposit > 0, "Cannot deposit 0 Tokens!");
        require(depositToken != address(0), "Deposit Token Cannot be 0!");
        require(depositToken != TRUSTED_REWARD_TOKEN_ADDRESS, "Deposit token cannot be same as reward token!");
        require(trustedDepositTokens[depositToken], "Deposit token not trusted yet!");
        IERC20(depositToken).safeTransferFrom(msg.sender, address(this), amountToDeposit);
        
        uint amountToStake = amountToDeposit;
        
        if (depositToken != TRUSTED_DEPOSIT_TOKEN_ADDRESS) {
            IERC20(depositToken).safeApprove(address(uniswapV2Router), 0);
            IERC20(depositToken).safeApprove(address(uniswapV2Router), amountToDeposit);
            
            uint oldDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));
            
            address[] memory path;
            
            if (depositToken == uniswapV2Router.WETH() || 
                TRUSTED_DEPOSIT_TOKEN_ADDRESS == uniswapV2Router.WETH()) {
                path = new address[](2);
                path[0] = depositToken;
                path[1] = TRUSTED_DEPOSIT_TOKEN_ADDRESS;
            } else {
                path = new address[](3);
                path[0] = depositToken;
                path[1] = uniswapV2Router.WETH();
                path[2] = TRUSTED_DEPOSIT_TOKEN_ADDRESS;
            }
            
            uniswapV2Router.swapExactTokensForTokens(amountToDeposit, _amountOutMin, path, address(this), _deadline);
            
            uint newDepositTokenBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));
            
            amountToStake = newDepositTokenBalance.sub(oldDepositTokenBalance);
        }
       
        
        require(amountToStake > 0, "Cannot stake 0 Tokens");

        
        depositedTokens[msg.sender] = depositedTokens[msg.sender].add(amountToStake);
        totalDepositedTokens = totalDepositedTokens.add(amountToStake);
        
        require(totalDepositedTokens <= FUNDRAISER_GOAL_IN_DEPOSIT_TOKENS, "CANNOT CONTRIBUTE, EXCEEDS GOAL!");
        require(depositedTokens[msg.sender] <= contributionLimit * 10**DEPOSIT_TOKEN_DECIMALS , "Contribution Limit for tier exceeded!");
        
        uint contractBalance = IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).balanceOf(address(this));
        IERC20(TRUSTED_DEPOSIT_TOKEN_ADDRESS).safeTransfer(owner, contractBalance);
        
        holders.add(msg.sender);
        
        stakingTime[msg.sender] = now;
        emit Deposit(msg.sender, amountToStake);
    }
    
    
    function claim() external noContractsAllowed whenSaleNotOpen {
        address account = msg.sender;
        uint pendingDivs = getPendingDivs(account);
        if (pendingDivs > 0) {
            
            rewardClaimed[account] = true;
            
            IERC20(TRUSTED_REWARD_TOKEN_ADDRESS).safeTransfer(account, pendingDivs);
            emit RewardsTransferred(account, pendingDivs);
        }
        lastClaimedTime[account] = now;
    }
    
    function getStakersList(uint startIndex, uint endIndex) 
        public 
        view 
        returns (address[] memory stakers, 
            uint[] memory stakingTimestamps, 
            uint[] memory lastClaimedTimeStamps,
            uint[] memory stakedTokens) {
        require (startIndex < endIndex);
        
        uint length = endIndex.sub(startIndex);
        address[] memory _stakers = new address[](length);
        uint[] memory _stakingTimestamps = new uint[](length);
        uint[] memory _lastClaimedTimeStamps = new uint[](length);
        uint[] memory _stakedTokens = new uint[](length);
        
        for (uint i = startIndex; i < endIndex; i = i.add(1)) {
            address staker = holders.at(i);
            uint listIndex = i.sub(startIndex);
            _stakers[listIndex] = staker;
            _stakingTimestamps[listIndex] = stakingTime[staker];
            _lastClaimedTimeStamps[listIndex] = lastClaimedTime[staker];
            _stakedTokens[listIndex] = depositedTokens[staker];
        }
        
        return (_stakers, _stakingTimestamps, _lastClaimedTimeStamps, _stakedTokens);
    }
    
    
    function claimAnyToken(address token, uint amount) external onlyOwner {
        if (token == address(0)) {
            msg.sender.transfer(amount);
            return;
        }
        IERC20(token).safeTransfer(msg.sender, amount);
    }
    
    function verify(
		uint limit,
		bytes calldata signature
	) 
		internal view returns(bool) 
	{
		bytes32 message = prefixed(keccak256(abi.encode(msg.sender, limit, CHAIN_ID, address(this))));
        return (recoverSigner(message, signature) == verifyAddress && verifyAddress != address(0));
	}
    
    function recoverSigner(bytes32 message, bytes memory sig)
        internal
        pure
        returns (address)
    {
        (uint8 v, bytes32 r, bytes32 s) = abi.decode(sig, (uint8, bytes32, bytes32));

        return ecrecover(message, v, r, s);
    }

    
    function prefixed(bytes32 hash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }
}