









pragma solidity ^0.7.0;
pragma experimental ABIEncoderV2;



library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}




interface TokenInterface {
    function balanceOf(address account) external view returns (uint);
    function delegate(address delegatee) external;
    function transfer(address dst, uint rawAmount) external returns (bool);
}

interface InstaVestingInferface {
    function owner() external view returns(address);
    function recipient() external view returns(address);
    function vestingAmount() external view returns(uint256);
    function vestingBegin() external view returns(uint32);
    function vestingCliff() external view returns(uint32);
    function vestingEnd() external view returns(uint32);
    function lastUpdate() external view returns(uint32);
    function terminateTime() external view returns(uint32);
}

interface InstaVestingFactoryInterface {
    function recipients(address) external view returns(address);
}

contract InstaTokenVestingResolver  {
    using SafeMath for uint256;

    TokenInterface public constant token = TokenInterface(0x6f40d4A6237C257fff2dB00FA0510DeEECd303eb);
    
    InstaVestingFactoryInterface public immutable factory;

    constructor(address factory_) {
        factory = InstaVestingFactoryInterface(factory_);
    }
    struct VestingData {
        address recipient;
        address vesting;
        address owner;
        uint256 vestingAmount;
        uint256 vestingBegin;
        uint256 vestingCliff;
        uint256 vestingEnd;
        uint256 lastClaimed;
        uint256 terminatedTime;
        uint256 vestedAmount;
        uint256 unvestedAmount;
        uint256 claimedAmount;
        uint256 claimableAmount;
    }

    function getVestingByRecipient(address recipient) external view returns(VestingData memory vestingData) {
        address vestingAddr = factory.recipients(recipient);
        return getVesting(vestingAddr);
    }

    function getVesting(address vesting) public view returns(VestingData memory vestingData) {
        if (vesting == address(0)) return vestingData;
        InstaVestingInferface VestingContract = InstaVestingInferface(vesting);
        uint256 vestingBegin = uint256(VestingContract.vestingBegin());
        uint256 vestingEnd = uint256(VestingContract.vestingEnd());
        uint256 vestingCliff = uint256(VestingContract.vestingCliff());
        uint256 vestingAmount = VestingContract.vestingAmount();
        uint256 lastUpdate = uint256(VestingContract.lastUpdate());
        uint256 terminatedTime = uint256(VestingContract.terminateTime());

        
        uint256 claimedAmount;
        uint256 claimableAmount;
        uint256 vestedAmount;
        uint256 unvestedAmount;
        if (block.timestamp > vestingCliff) {
            uint256 time = terminatedTime == 0 ? block.timestamp : terminatedTime;
            if (time > vestingEnd) {
                vestedAmount = vestingAmount;
                if (lastUpdate > vestingEnd) {
                    claimableAmount = 0;
                    claimedAmount = vestedAmount;
                } else {
                    claimableAmount = vestingAmount.mul(time - lastUpdate).div(vestingEnd - vestingBegin);
                    claimedAmount = vestedAmount.mul(time - vestingBegin).div(vestingEnd - vestingBegin);
                }
            } else {
                vestedAmount = vestingAmount.mul(time - vestingBegin).div(vestingEnd - vestingBegin);
                claimableAmount = vestingAmount.mul(time - lastUpdate).div(vestingEnd - vestingBegin);
                claimedAmount = vestedAmount.mul(time - vestingBegin).div(vestingEnd - vestingBegin);
            }
            unvestedAmount = vestingAmount.sub(vestedAmount);
        }

        vestingData = VestingData({
            recipient: VestingContract.recipient(),
            owner: VestingContract.owner(),
            vesting: vesting,
            vestingAmount: vestingAmount,
            vestingBegin: vestingBegin,
            vestingCliff: vestingCliff,
            vestingEnd: vestingEnd,
            lastClaimed: lastUpdate,
            terminatedTime: terminatedTime,
            vestedAmount: vestedAmount,
            unvestedAmount: unvestedAmount,
            claimedAmount: claimedAmount,
            claimableAmount: claimableAmount
        });
    }

}