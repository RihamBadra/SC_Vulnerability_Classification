pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

interface ERC20 {

    function totalSupply() external view returns (uint);

    function decimals() external view returns (uint);

    function balanceOf(address tokenOwner) external view returns (uint balance);

    function allowance(address tokenOwner, address spender) external view returns (uint remaining);

    function transfer(address to, uint tokens) external returns (bool success);

    function approve(address spender, uint tokens) external returns (bool success);

    function transferFrom(address from, address to, uint tokens) external returns (bool success);

}

interface IFeature {



    enum OwnerSignature {

        Anyone,             

        Required,           

        Optional,           

        Disallowed          

    }



    

    function recoverToken(address _token) external;



    

    function init(address _wallet) external;



    

    function isFeatureAuthorisedInVersionManager(address _wallet, address _feature) external view returns (bool);



    

    function getRequiredSignatures(address _wallet, bytes calldata _data) external view returns (uint256, OwnerSignature);



    

    function getStaticCallSignatures() external view returns (bytes4[] memory);

}

interface IGuardianStorage {



    

    function addGuardian(address _wallet, address _guardian) external;



    

    function revokeGuardian(address _wallet, address _guardian) external;



    

    function isGuardian(address _wallet, address _guardian) external view returns (bool);



    function isLocked(address _wallet) external view returns (bool);



    function getLock(address _wallet) external view returns (uint256);



    function getLocker(address _wallet) external view returns (address);



    function setLock(address _wallet, uint256 _releaseAfter) external;



    function getGuardians(address _wallet) external view returns (address[] memory);



    function guardianCount(address _wallet) external view returns (uint256);

}

interface ILimitStorage {



    struct Limit {

        

        uint128 current;

        

        uint128 pending;

        

        uint64 changeAfter;

    }



    struct DailySpent {

        

        uint128 alreadySpent;

        

        uint64 periodEnd;

    }



    function setLimit(address _wallet, Limit memory _limit) external;



    function getLimit(address _wallet) external view returns (Limit memory _limit);



    function setDailySpent(address _wallet, DailySpent memory _dailySpent) external;



    function getDailySpent(address _wallet) external view returns (DailySpent memory _dailySpent);



    function setLimitAndDailySpent(address _wallet, Limit memory _limit, DailySpent memory _dailySpent) external;



    function getLimitAndDailySpent(address _wallet) external view returns (Limit memory _limit, DailySpent memory _dailySpent);

}

interface ILockStorage {

    function isLocked(address _wallet) external view returns (bool);



    function getLock(address _wallet) external view returns (uint256);



    function getLocker(address _wallet) external view returns (address);



    function setLock(address _wallet, address _locker, uint256 _releaseAfter) external;

}

interface IModuleRegistry {

    function registerModule(address _module, bytes32 _name) external;



    function deregisterModule(address _module) external;



    function registerUpgrader(address _upgrader, bytes32 _name) external;



    function deregisterUpgrader(address _upgrader) external;



    function recoverToken(address _token) external;



    function moduleInfo(address _module) external view returns (bytes32);



    function upgraderInfo(address _upgrader) external view returns (bytes32);



    function isRegisteredModule(address _module) external view returns (bool);



    function isRegisteredModule(address[] calldata _modules) external view returns (bool);



    function isRegisteredUpgrader(address _upgrader) external view returns (bool);

}

interface IVersionManager {

    

    function isFeatureAuthorised(address _wallet, address _feature) external view returns (bool);



    

    function checkAuthorisedFeatureAndInvokeWallet(

        address _wallet,

        address _to,

        uint256 _value,

        bytes calldata _data

    ) external returns (bytes memory _res);



    



    

    function setOwner(address _wallet, address _newOwner) external;



    

    function invokeStorage(address _wallet, address _storage, bytes calldata _data) external;



    

    function upgradeWallet(address _wallet, uint256 _toVersion) external;

 

}

interface IWallet {

    

    function owner() external view returns (address);



    

    function modules() external view returns (uint);



    

    function setOwner(address _newOwner) external;



    

    function authorised(address _module) external view returns (bool);



    

    function enabled(bytes4 _sig) external view returns (address);



    

    function authoriseModule(address _module, bool _value) external;



    

    function enableStaticCall(address _module, bytes4 _method) external;

}

library SafeMath {

    

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a, "SafeMath: addition overflow");



        return c;

    }



    

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        return sub(a, b, "SafeMath: subtraction overflow");

    }



    

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b <= a, errorMessage);

        uint256 c = a - b;



        return c;

    }



    

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        

        

        

        if (a == 0) {

            return 0;

        }



        uint256 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");



        return c;

    }



    

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        return div(a, b, "SafeMath: division by zero");

    }



    

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        

        require(b > 0, errorMessage);

        uint256 c = a / b;

        



        return c;

    }



    

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        return mod(a, b, "SafeMath: modulo by zero");

    }



    

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b != 0, errorMessage);

        return a % b;

    }

}

library Utils {



    

    function recoverSigner(bytes32 _signedHash, bytes memory _signatures, uint _index) internal pure returns (address) {

        uint8 v;

        bytes32 r;

        bytes32 s;

        

        

        

        

        assembly {

            r := mload(add(_signatures, add(0x20,mul(0x41,_index))))

            s := mload(add(_signatures, add(0x40,mul(0x41,_index))))

            v := and(mload(add(_signatures, add(0x41,mul(0x41,_index)))), 0xff)

        }

        require(v == 27 || v == 28);



        address recoveredAddress = ecrecover(_signedHash, v, r, s);

        require(recoveredAddress != address(0), "Utils: ecrecover returned 0");

        return recoveredAddress;

    }



    

    function functionPrefix(bytes memory _data) internal pure returns (bytes4 prefix) {

        require(_data.length >= 4, "RM: Invalid functionPrefix");

        

        assembly {

            prefix := mload(add(_data, 0x20))

        }

    }



    

    function ceil(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a / b;

        if (a % b == 0) {

            return c;

        } else {

            return c + 1;

        }

    }



    function min(uint256 a, uint256 b) internal pure returns (uint256) {

        if (a < b) {

            return a;

        }

        return b;

    }

}

contract BaseFeature is IFeature {



    

    bytes constant internal EMPTY_BYTES = "";

    

    address constant internal ETH_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    

    ILockStorage internal lockStorage;

    

    IVersionManager internal versionManager;



    event FeatureCreated(bytes32 name);



    

    modifier onlyWhenUnlocked(address _wallet) {

        require(!lockStorage.isLocked(_wallet), "BF: wallet locked");

        _;

    }



    

    modifier onlyVersionManager() {

        require(msg.sender == address(versionManager), "BF: caller must be VersionManager");

        _;

    }



    

    modifier onlyWalletOwner(address _wallet) {

        require(isOwner(_wallet, msg.sender), "BF: must be wallet owner");

        _;

    }



    

    modifier onlyWalletFeature(address _wallet) {

        require(versionManager.isFeatureAuthorised(_wallet, msg.sender), "BF: must be a wallet feature");

        _;

    }



    

    modifier onlyWalletOwnerOrFeature(address _wallet) {

        

        verifyOwnerOrAuthorisedFeature(_wallet, msg.sender);

        _;

    }



    constructor(

        ILockStorage _lockStorage,

        IVersionManager _versionManager,

        bytes32 _name

    ) public {

        lockStorage = _lockStorage;

        versionManager = _versionManager;

        emit FeatureCreated(_name);

    }



    

    function recoverToken(address _token) external virtual override {

        uint total = ERC20(_token).balanceOf(address(this));

        _token.call(abi.encodeWithSelector(ERC20(_token).transfer.selector, address(versionManager), total));

    }



    

    function init(address _wallet) external virtual override  {}



    

    function getRequiredSignatures(address, bytes calldata) external virtual view override returns (uint256, OwnerSignature) {

        revert("BF: disabled method");

    }



    

    function getStaticCallSignatures() external virtual override view returns (bytes4[] memory _sigs) {}



    

    function isFeatureAuthorisedInVersionManager(address _wallet, address _feature) public override view returns (bool) {

        return versionManager.isFeatureAuthorised(_wallet, _feature);

    }



    

    function verifyData(address _wallet, bytes calldata _data) internal pure returns (bool) {

        require(_data.length >= 36, "RM: Invalid dataWallet");

        address dataWallet = abi.decode(_data[4:], (address));

        return dataWallet == _wallet;

    }

    

     

    function isOwner(address _wallet, address _addr) internal view returns (bool) {

        return IWallet(_wallet).owner() == _addr;

    }



    

    function verifyOwnerOrAuthorisedFeature(address _wallet, address _sender) internal view {

        require(isFeatureAuthorisedInVersionManager(_wallet, _sender) || isOwner(_wallet, _sender), "BF: must be owner or feature");

    }



    

    function invokeWallet(address _wallet, address _to, uint256 _value, bytes memory _data)

        internal

        returns (bytes memory _res) 

    {

        _res = versionManager.checkAuthorisedFeatureAndInvokeWallet(_wallet, _to, _value, _data);

    }



}

contract RecoveryManager is BaseFeature {



    bytes32 constant NAME = "RecoveryManager";



    bytes4 constant internal EXECUTE_RECOVERY_PREFIX = bytes4(keccak256("executeRecovery(address,address)"));

    bytes4 constant internal FINALIZE_RECOVERY_PREFIX = bytes4(keccak256("finalizeRecovery(address)"));

    bytes4 constant internal CANCEL_RECOVERY_PREFIX = bytes4(keccak256("cancelRecovery(address)"));

    bytes4 constant internal TRANSFER_OWNERSHIP_PREFIX = bytes4(keccak256("transferOwnership(address,address)"));



    struct RecoveryConfig {

        address recovery;

        uint64 executeAfter;

        uint32 guardianCount;

    }



    

    mapping (address => RecoveryConfig) internal recoveryConfigs;



    

    uint256 public recoveryPeriod;

    

    uint256 public lockPeriod;

    

    IGuardianStorage public guardianStorage;



    



    event RecoveryExecuted(address indexed wallet, address indexed _recovery, uint64 executeAfter);

    event RecoveryFinalized(address indexed wallet, address indexed _recovery);

    event RecoveryCanceled(address indexed wallet, address indexed _recovery);

    event OwnershipTransfered(address indexed wallet, address indexed _newOwner);



    



    

    modifier onlyWhenRecovery(address _wallet) {

        require(recoveryConfigs[_wallet].executeAfter > 0, "RM: there must be an ongoing recovery");

        _;

    }



    

    modifier notWhenRecovery(address _wallet) {

        require(recoveryConfigs[_wallet].executeAfter == 0, "RM: there cannot be an ongoing recovery");

        _;

    }



    



    constructor(

        ILockStorage _lockStorage,

        IGuardianStorage _guardianStorage,

        IVersionManager _versionManager,

        uint256 _recoveryPeriod,

        uint256 _lockPeriod

    )

        BaseFeature(_lockStorage, _versionManager, NAME)

        public

    {

        

        

        

        require(_lockPeriod >= _recoveryPeriod, "RM: insecure security periods");

        recoveryPeriod = _recoveryPeriod;

        lockPeriod = _lockPeriod;

        guardianStorage = _guardianStorage;

    }



    



    

    function executeRecovery(address _wallet, address _recovery) external onlyWalletFeature(_wallet) notWhenRecovery(_wallet) {

        validateNewOwner(_wallet, _recovery);

        RecoveryConfig storage config = recoveryConfigs[_wallet];

        config.recovery = _recovery;

        config.executeAfter = uint64(block.timestamp + recoveryPeriod);

        config.guardianCount = uint32(guardianStorage.guardianCount(_wallet));

        setLock(_wallet, block.timestamp + lockPeriod);

        emit RecoveryExecuted(_wallet, _recovery, config.executeAfter);

    }



    

    function finalizeRecovery(address _wallet) external onlyWhenRecovery(_wallet) {

        RecoveryConfig storage config = recoveryConfigs[address(_wallet)];

        require(uint64(block.timestamp) > config.executeAfter, "RM: the recovery period is not over yet");

        address recoveryOwner = config.recovery;

        delete recoveryConfigs[_wallet];



        versionManager.setOwner(_wallet, recoveryOwner);

        setLock(_wallet, 0);



        emit RecoveryFinalized(_wallet, recoveryOwner);

    }



    

    function cancelRecovery(address _wallet) external onlyWalletFeature(_wallet) onlyWhenRecovery(_wallet) {

        RecoveryConfig storage config = recoveryConfigs[address(_wallet)];

        address recoveryOwner = config.recovery;

        delete recoveryConfigs[_wallet];

        setLock(_wallet, 0);



        emit RecoveryCanceled(_wallet, recoveryOwner);

    }



    

    function transferOwnership(address _wallet, address _newOwner) external onlyWalletFeature(_wallet) onlyWhenUnlocked(_wallet) {

        validateNewOwner(_wallet, _newOwner);

        versionManager.setOwner(_wallet, _newOwner);



        emit OwnershipTransfered(_wallet, _newOwner);

    }



    

    function getRecovery(address _wallet) external view returns(address _address, uint64 _executeAfter, uint32 _guardianCount) {

        RecoveryConfig storage config = recoveryConfigs[_wallet];

        return (config.recovery, config.executeAfter, config.guardianCount);

    }



    

    function getRequiredSignatures(address _wallet, bytes calldata _data) external view override returns (uint256, OwnerSignature) {

        bytes4 methodId = Utils.functionPrefix(_data);

        if (methodId == EXECUTE_RECOVERY_PREFIX) {

            uint walletGuardians = guardianStorage.guardianCount(_wallet);

            require(walletGuardians > 0, "RM: no guardians set on wallet");

            uint numberOfSignaturesRequired = Utils.ceil(walletGuardians, 2);

            return (numberOfSignaturesRequired, OwnerSignature.Disallowed);

        }

        if (methodId == FINALIZE_RECOVERY_PREFIX) {

            return (0, OwnerSignature.Anyone);

        }

        if (methodId == CANCEL_RECOVERY_PREFIX) {

            uint numberOfSignaturesRequired = Utils.ceil(recoveryConfigs[_wallet].guardianCount + 1, 2);

            return (numberOfSignaturesRequired, OwnerSignature.Optional);

        }

        if (methodId == TRANSFER_OWNERSHIP_PREFIX) {

            uint majorityGuardians = Utils.ceil(guardianStorage.guardianCount(_wallet), 2);

            uint numberOfSignaturesRequired = SafeMath.add(majorityGuardians, 1);

            return (numberOfSignaturesRequired, OwnerSignature.Required);

        }



        revert("RM: unknown method");

    }



    



    function validateNewOwner(address _wallet, address _newOwner) internal view {

        require(_newOwner != address(0), "RM: new owner address cannot be null");

        require(!guardianStorage.isGuardian(_wallet, _newOwner), "RM: new owner address cannot be a guardian");

    }



    function setLock(address _wallet, uint256 _releaseAfter) internal {

        versionManager.invokeStorage(

            _wallet,

            address(lockStorage),

            abi.encodeWithSelector(lockStorage.setLock.selector, _wallet, address(this), _releaseAfter)

        );

    }



}
