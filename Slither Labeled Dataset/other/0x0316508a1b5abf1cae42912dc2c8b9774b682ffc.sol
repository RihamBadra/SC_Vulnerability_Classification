


pragma solidity 0.7.5;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    
    
    
    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }

  
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }

    function addressToString(address _address) internal pure returns(string memory) {
        bytes32 _bytes = bytes32(uint256(_address));
        bytes memory HEX = "0123456789abcdef";
        bytes memory _addr = new bytes(42);

        _addr[0] = '0';
        _addr[1] = 'x';

        for(uint256 i = 0; i < 20; i++) {
            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];
            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];
        }

        return string(_addr);

    }
}

library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

interface IOwnable {
  function policy() external view returns (address);

  function renounceManagement() external;
  
  function pushManagement( address newOwner_ ) external;
  
  function pullManagement() external;
}

contract Ownable is IOwnable {

    address internal _owner;
    address internal _newOwner;

    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);
    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);

    constructor () {
        _owner = msg.sender;
        emit OwnershipPushed( address(0), _owner );
    }

    function policy() public view override returns (address) {
        return _owner;
    }

    modifier onlyPolicy() {
        require( _owner == msg.sender, "Ownable: caller is not the owner" );
        _;
    }

    function renounceManagement() public virtual override onlyPolicy() {
        emit OwnershipPushed( _owner, address(0) );
        _owner = address(0);
    }

    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {
        require( newOwner_ != address(0), "Ownable: new owner is the zero address");
        emit OwnershipPushed( _owner, newOwner_ );
        _newOwner = newOwner_;
    }
    
    function pullManagement() public virtual override {
        require( msg.sender == _newOwner, "Ownable: must be new owner to pull");
        emit OwnershipPulled( _owner, _newOwner );
        _owner = _newOwner;
    }
}

interface IMasterChef {
    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);
    function deposit(uint256 _pid, uint256 _amount) external;
    function withdraw(uint256 _pid, uint256 _amount) external;
    function emergencyWithdraw(uint256 _pid) external;
}

interface ISushiBar {
    function enter(uint256 _amount) external;
    function leave(uint256 _share) external;
}

interface ITreasury {
    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ );
    function manage( address _token, uint _amount ) external;
    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );
}



contract OnsenAllocator is Ownable {
    
    
    
    using SafeERC20 for IERC20;
    using SafeMath for uint;



    

    uint[] public pids; 
    mapping( uint => address ) public pools; 

    address immutable sushi; 
    address immutable xSushi; 
    
    address immutable masterChef; 

    address immutable treasury; 

    uint public totalValueDeployed; 



    

    constructor( 
        address _chef, 
        address _treasury, 
        address _sushi, 
        address _xSushi 
    ) {
        require( _chef != address(0) );
        masterChef = _chef;
        require( _treasury != address(0) );
        treasury = _treasury;
        require( _sushi != address(0) );
        sushi = _sushi;
        require( _xSushi != address(0) );
        xSushi = _xSushi;
    }



    

    
    function harvest( bool _stake ) external {
        for( uint i = 0; i < pids.length; i++ ) {
            uint pid = pids[i];
            if ( pid != 0 ) { 
                IMasterChef( masterChef ).withdraw( pid, 0 ); 
            }
        }
        enterSushiBar( _stake );
    }



    

    
    function enterSushiBar( bool _stake ) internal {
        uint balance = IERC20( sushi ).balanceOf( address(this) );
        if ( balance > 0 ) {
            if ( !_stake ) {
                IERC20( sushi ).safeTransfer( treasury, balance ); 
            } else {
                IERC20( sushi ).approve( xSushi, balance );
                ISushiBar( xSushi ).enter( balance ); 

                uint xBalance = IERC20( xSushi ).balanceOf( address(this) );
                IERC20( xSushi ).safeTransfer( treasury, xBalance ); 
            }
        }
    }



    

    
    function pendingSushi() external view returns ( uint ) {
        uint pending;
        for ( uint i = 0; i < pids.length; i++ ) {
            uint pid = pids[i];
            if ( pid != 0 ) {
                pending = pending.add( IMasterChef( masterChef ).pendingSushi( pid, address(this) ) );
            }
        }
        return pending;
    }



    

    
    function deposit( uint _pid, uint _amount, bool _stake ) external onlyPolicy() {
        address LP = pools[ _pid ];
        require( LP != address(0) );

        ITreasury( treasury ).manage( LP, _amount ); 
        
        IERC20( LP ).approve( masterChef, _amount );
        IMasterChef( masterChef ).deposit( _pid, _amount ); 

        uint value = ITreasury( treasury ).valueOf( LP, _amount );
        totalValueDeployed = totalValueDeployed.add( value ); 
        
        enterSushiBar( _stake ); 
    }

    
    function withdraw( uint _pid, uint _amount, bool _stake ) external onlyPolicy() {
        address LP = pools[ _pid ];
        require( LP != address(0) );

        IMasterChef( masterChef ).withdraw( _pid, _amount ); 

        uint value = ITreasury( treasury ).valueOf( LP, _amount );
        
        if ( value < totalValueDeployed ) {
            totalValueDeployed = totalValueDeployed.sub( value ); 
        } else { 
            totalValueDeployed = 0;
        }
        
        
        IERC20( LP ).approve( treasury, _amount );
        
        ITreasury( treasury ).deposit( _amount, LP, value );
        
        enterSushiBar( _stake ); 
    }

    
    function enterSushiBarFromTreasury( uint _amount ) external onlyPolicy() {
        ITreasury( treasury ).manage( sushi, _amount ); 
        
        enterSushiBar( true ); 
    }
    
    
    function exitSushiBar( uint _amount ) external onlyPolicy() {
        ITreasury( treasury ).manage( xSushi, _amount ); 
        
        ISushiBar( xSushi ).leave( _amount ); 
        
        IERC20( sushi ).safeTransfer( treasury, IERC20( sushi ).balanceOf( address(this) ) ); 
    }

    
    function addPool( address _pool, uint _pid ) external onlyPolicy() {
        require( _pool != address(0) );
        require( pools[ _pid ] == address(0) );

        pids.push( _pid );
        pools[ _pid ] = _pool;
    }

    
    function removePool( address _pool, uint _index ) external onlyPolicy() {
        uint pid = pids[_index];
        require( pools[ pid ] == _pool );

        pids[ _index ] = 0;
        pools[ pid ] = address(0);
    }

    
    function emergencyWithdraw( uint _pid ) external onlyPolicy() {
        address LP = pools[ _pid ];

        IMasterChef( masterChef ).emergencyWithdraw( _pid ); 

        uint balance = IERC20( LP ).balanceOf( address(this) );
        uint value = ITreasury( treasury ).valueOf( LP, balance );
        if ( value < totalValueDeployed ) {
            totalValueDeployed = totalValueDeployed.sub( value ); 
        } else { 
            totalValueDeployed = 0;
        }

        
        IERC20( LP ).approve( treasury, balance );
        
        ITreasury( treasury ).deposit( balance, LP, value ); 
    }
}