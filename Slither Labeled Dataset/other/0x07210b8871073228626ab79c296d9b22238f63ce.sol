

pragma solidity 0.6.7;

abstract contract OracleRelayerLike {
    function redemptionPrice() virtual public returns (uint256);
}

contract RedemptionPriceSnap {
    
    mapping (address => uint256) public authorizedAccounts;
    
    function addAuthorization(address account) external isAuthorized {
        authorizedAccounts[account] = 1;
        emit AddAuthorization(account);
    }
    
    function removeAuthorization(address account) external isAuthorized {
        authorizedAccounts[account] = 0;
        emit RemoveAuthorization(account);
    }
    
    modifier isAuthorized {
        require(authorizedAccounts[msg.sender] == 1, "RedemptionPriceSnap/account-not-authorized");
        _;
    }

    
    
    uint256           public snappedRedemptionPrice;

    OracleRelayerLike public oracleRelayer;

    
    event AddAuthorization(address account);
    event RemoveAuthorization(address account);
    event ModifyParameters(bytes32 parameter, address data);
    event FailUpdateSnappedPrice(bytes revertReason);

    constructor(
      address oracleRelayer_
    ) public {
        require(oracleRelayer_ != address(0), "RedemptionPriceSnap/null-oracle-relayer");

        authorizedAccounts[msg.sender] = 1;

        oracleRelayer = OracleRelayerLike(oracleRelayer_);
        oracleRelayer.redemptionPrice();

        emit AddAuthorization(msg.sender);
    }

    
    uint256 public TEN_THOUSAND = 10000 * 10 ** 27;
    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require((z = x - y) <= x, "RedemptionPriceSnap/sub-uint-uint-underflow");
    }
    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {
        require(y == 0 || (z = x * y) / y == x, "RedemptionPriceSnap/multiply-uint-uint-overflow");
    }
    function delta(uint256 x, uint256 y) internal pure returns (uint256 z) {
        z = (x >= y) ? subtract(x, y) : subtract(y, x);
    }

    
    
    function modifyParameters(bytes32 parameter, address data) external isAuthorized {
        require(data != address(0), "RedemptionPriceSnap/null-address");

        if (parameter == "oracleRelayer") {
          oracleRelayer = OracleRelayerLike(data);
          require(oracleRelayer.redemptionPrice() > 0, "RedemptionPriceSnap/null-redemption-price");
        }
        else revert("RedemptionPriceSnap/modify-unrecognized-param");

        emit ModifyParameters(parameter, data);
    }

    
    
    function updateSnappedPrice() public {
        try oracleRelayer.redemptionPrice() returns (uint256 price) {
          if (price == 0) return;
          snappedRedemptionPrice = price;
        } catch(bytes memory revertReason) {
          emit FailUpdateSnappedPrice(revertReason);
        }
    }
    
    function updateAndGetSnappedPrice() external returns (uint256) {
        updateSnappedPrice();
        return snappedRedemptionPrice;
    }
}