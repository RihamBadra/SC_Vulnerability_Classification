







pragma solidity >=0.6.0 <0.8.0;


library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}






pragma solidity >=0.6.0 <0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity >=0.6.2 <0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}






pragma solidity >=0.6.0 <0.8.0;




library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}




pragma solidity >=0.5.0;

interface IUniswapV2Pair {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;

    event Mint(address indexed sender, uint amount0, uint amount1);
    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);
    event Swap(
        address indexed sender,
        uint amount0In,
        uint amount1In,
        uint amount0Out,
        uint amount1Out,
        address indexed to
    );
    event Sync(uint112 reserve0, uint112 reserve1);

    function MINIMUM_LIQUIDITY() external pure returns (uint);
    function factory() external view returns (address);
    function token0() external view returns (address);
    function token1() external view returns (address);
    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
    function price0CumulativeLast() external view returns (uint);
    function price1CumulativeLast() external view returns (uint);
    function kLast() external view returns (uint);

    function mint(address to) external returns (uint liquidity);
    function burn(address to) external returns (uint amount0, uint amount1);
    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;
    function skim(address to) external;
    function sync() external;

    function initialize(address, address) external;
}




pragma solidity >=0.5.0;


library UniswapV2Library {
    using SafeMath for uint256;

    
    function sortTokens(address tokenA, address tokenB)
        internal
        pure
        returns (address token0, address token1)
    {
        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");
        (token0, token1) = tokenA < tokenB
            ? (tokenA, tokenB)
            : (tokenB, tokenA);
        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");
    }

    
    function pairFor(
        address factory,
        address tokenA,
        address tokenB
    ) internal pure returns (address pair) {
        (address token0, address token1) = sortTokens(tokenA, tokenB);
        pair = address(
            uint256(
                keccak256(
                    abi.encodePacked(
                        hex"ff",
                        factory,
                        keccak256(abi.encodePacked(token0, token1)),
                        hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" 
                    )
                )
            )
        );
    }

    
    function getReserves(
        address factory,
        address tokenA,
        address tokenB
    ) internal view returns (uint256 reserveA, uint256 reserveB) {
        (address token0, ) = sortTokens(tokenA, tokenB);
        (uint256 reserve0, uint256 reserve1, ) =
            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
        (reserveA, reserveB) = tokenA == token0
            ? (reserve0, reserve1)
            : (reserve1, reserve0);
    }

    
    function quote(
        uint256 amountA,
        uint256 reserveA,
        uint256 reserveB
    ) internal pure returns (uint256 amountB) {
        require(amountA > 0, "UniswapV2Library: INSUFFICIENT_AMOUNT");
        require(
            reserveA > 0 && reserveB > 0,
            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"
        );
        amountB = amountA.mul(reserveB) / reserveA;
    }

    
    function getAmountOut(
        uint256 amountIn,
        uint256 reserveIn,
        uint256 reserveOut
    ) internal pure returns (uint256 amountOut) {
        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");
        require(
            reserveIn > 0 && reserveOut > 0,
            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"
        );
        uint256 amountInWithFee = amountIn.mul(997);
        uint256 numerator = amountInWithFee.mul(reserveOut);
        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);
        amountOut = numerator / denominator;
    }

    
    function getAmountIn(
        uint256 amountOut,
        uint256 reserveIn,
        uint256 reserveOut
    ) internal pure returns (uint256 amountIn) {
        require(amountOut > 0, "UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT");
        require(
            reserveIn > 0 && reserveOut > 0,
            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"
        );
        uint256 numerator = reserveIn.mul(amountOut).mul(1000);
        uint256 denominator = reserveOut.sub(amountOut).mul(997);
        amountIn = (numerator / denominator).add(1);
    }

    
    function getAmountsOut(
        address factory,
        uint256 amountIn,
        address[] memory path
    ) internal view returns (uint256[] memory amounts) {
        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");
        amounts = new uint256[](path.length);
        amounts[0] = amountIn;
        for (uint256 i; i < path.length - 1; i++) {
            (uint256 reserveIn, uint256 reserveOut) =
                getReserves(factory, path[i], path[i + 1]);
            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);
        }
    }

    
    function getAmountsIn(
        address factory,
        uint256 amountOut,
        address[] memory path
    ) internal view returns (uint256[] memory amounts) {
        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");
        amounts = new uint256[](path.length);
        amounts[amounts.length - 1] = amountOut;
        for (uint256 i = path.length - 1; i > 0; i--) {
            (uint256 reserveIn, uint256 reserveOut) =
                getReserves(factory, path[i - 1], path[i]);
            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);
        }
    }
}




pragma solidity ^0.6.2;

library Constants {
    
    uint256 private constant INITIAL_STAKE_MULTIPLE = 1e6;
    uint256 private constant VESTING_DURATION = 7; 
    uint32 private constant VESTING_INTERVAL = 1; 
    uint256 private constant STAKE_LOCKUP_DURATION = 60; 

    
    function getInitialStakeMultiple() internal pure returns (uint256) {
        return INITIAL_STAKE_MULTIPLE;
    }

    function getVestingDuration() internal pure returns (uint256) {
        return VESTING_DURATION;
    }

    function getVestingInterval() internal pure returns (uint32) {
        return VESTING_INTERVAL;
    }

    function getStakeLockupDuration() internal pure returns (uint256) {
        return STAKE_LOCKUP_DURATION;
    }
}






pragma solidity >=0.6.0 <0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}






pragma solidity >=0.6.0 <0.8.0;




contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    
    constructor (string memory name_, string memory symbol_) public {
        _name = name_;
        _symbol = symbol_;
        _decimals = 18;
    }

    
    function name() public view virtual returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal virtual {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}






pragma solidity >=0.6.0 <0.8.0;


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}






pragma solidity >=0.6.0 <0.8.0;


library EnumerableSet {
    
    
    
    
    
    
    
    

    struct Set {
        
        bytes32[] _values;

        
        
        mapping (bytes32 => uint256) _indexes;
    }

    
    function _add(Set storage set, bytes32 value) private returns (bool) {
        if (!_contains(set, value)) {
            set._values.push(value);
            
            
            set._indexes[value] = set._values.length;
            return true;
        } else {
            return false;
        }
    }

    
    function _remove(Set storage set, bytes32 value) private returns (bool) {
        
        uint256 valueIndex = set._indexes[value];

        if (valueIndex != 0) { 
            
            
            

            uint256 toDeleteIndex = valueIndex - 1;
            uint256 lastIndex = set._values.length - 1;

            
            

            bytes32 lastvalue = set._values[lastIndex];

            
            set._values[toDeleteIndex] = lastvalue;
            
            set._indexes[lastvalue] = toDeleteIndex + 1; 

            
            set._values.pop();

            
            delete set._indexes[value];

            return true;
        } else {
            return false;
        }
    }

    
    function _contains(Set storage set, bytes32 value) private view returns (bool) {
        return set._indexes[value] != 0;
    }

    
    function _length(Set storage set) private view returns (uint256) {
        return set._values.length;
    }

   
    function _at(Set storage set, uint256 index) private view returns (bytes32) {
        require(set._values.length > index, "EnumerableSet: index out of bounds");
        return set._values[index];
    }

    

    struct Bytes32Set {
        Set _inner;
    }

    
    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _add(set._inner, value);
    }

    
    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {
        return _remove(set._inner, value);
    }

    
    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {
        return _contains(set._inner, value);
    }

    
    function length(Bytes32Set storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {
        return _at(set._inner, index);
    }

    

    struct AddressSet {
        Set _inner;
    }

    
    function add(AddressSet storage set, address value) internal returns (bool) {
        return _add(set._inner, bytes32(uint256(uint160(value))));
    }

    
    function remove(AddressSet storage set, address value) internal returns (bool) {
        return _remove(set._inner, bytes32(uint256(uint160(value))));
    }

    
    function contains(AddressSet storage set, address value) internal view returns (bool) {
        return _contains(set._inner, bytes32(uint256(uint160(value))));
    }

    
    function length(AddressSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(AddressSet storage set, uint256 index) internal view returns (address) {
        return address(uint160(uint256(_at(set._inner, index))));
    }


    

    struct UintSet {
        Set _inner;
    }

    
    function add(UintSet storage set, uint256 value) internal returns (bool) {
        return _add(set._inner, bytes32(value));
    }

    
    function remove(UintSet storage set, uint256 value) internal returns (bool) {
        return _remove(set._inner, bytes32(value));
    }

    
    function contains(UintSet storage set, uint256 value) internal view returns (bool) {
        return _contains(set._inner, bytes32(value));
    }

    
    function length(UintSet storage set) internal view returns (uint256) {
        return _length(set._inner);
    }

   
    function at(UintSet storage set, uint256 index) internal view returns (uint256) {
        return uint256(_at(set._inner, index));
    }
}






pragma solidity >=0.6.0 <0.8.0;




abstract contract AccessControl is Context {
    using EnumerableSet for EnumerableSet.AddressSet;
    using Address for address;

    struct RoleData {
        EnumerableSet.AddressSet members;
        bytes32 adminRole;
    }

    mapping (bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    
    function hasRole(bytes32 role, address account) public view returns (bool) {
        return _roles[role].members.contains(account);
    }

    
    function getRoleMemberCount(bytes32 role) public view returns (uint256) {
        return _roles[role].members.length();
    }

    
    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {
        return _roles[role].members.at(index);
    }

    
    function getRoleAdmin(bytes32 role) public view returns (bytes32) {
        return _roles[role].adminRole;
    }

    
    function grantRole(bytes32 role, address account) public virtual {
        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");

        _grantRole(role, account);
    }

    
    function revokeRole(bytes32 role, address account) public virtual {
        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");

        _revokeRole(role, account);
    }

    
    function renounceRole(bytes32 role, address account) public virtual {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);
        _roles[role].adminRole = adminRole;
    }

    function _grantRole(bytes32 role, address account) private {
        if (_roles[role].members.add(account)) {
            emit RoleGranted(role, account, _msgSender());
        }
    }

    function _revokeRole(bytes32 role, address account) private {
        if (_roles[role].members.remove(account)) {
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}




pragma solidity ^0.6.2;



contract Account {
    struct State {
        uint256 staked; 
        uint256 phantom;
        Vesting[] vestings;
        Vesting[] stakings;
        uint256 claimed; 
        
        
        
        
        bool isBlacklisted;
    }
}

struct Vesting {
    uint256 start;
    uint256 amount; 
}

contract Storage {
    struct Provider {
        IERC20 cook;
        IERC20 univ2;
    }

    struct Balance {
        uint256 staked; 
        uint256 rewarded; 
        uint256 claimed; 
        uint256 vesting; 
        uint256 phantom;
    }

    struct State {
        Balance balance;
        Provider provider;
        uint256 lastRewardBlock;
        mapping(address => Account.State) accounts;
        

        
        
        
        
        
        bool pauseMinig;

        
        uint256 REWARD_PER_BLOCK;
        
        uint256 totalPoolCapLimit;
        
        uint256 stakeLimitPerAddress;
    }
}

contract PoolState is Ownable, AccessControl {
    bytes32 public constant MANAGER_ROLE = keccak256("MANAGER");
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN");
    Storage.State _state;
}




pragma solidity ^0.6.2;



contract PoolGetters is PoolState {
    using SafeMath for uint256;

    uint32 private constant SECONDS_PER_DAY = 86400; 

    
    function cook() public view virtual returns (IERC20) {
        return _state.provider.cook;
    }

    function univ2() public view virtual returns (IERC20) {
        return _state.provider.univ2;
    }

    function totalStaked() public view returns (uint256) {
        return _state.balance.staked;
    }

    function totalRewarded() public view returns (uint256) {
        return _state.balance.rewarded;
    }

    function totalClaimed() public view returns (uint256) {
        return _state.balance.claimed;
    }

    function totalVesting() public view returns (uint256) {
        return _state.balance.vesting;
    }

    function totalPhantom() public view returns (uint256) {
        return _state.balance.phantom;
    }

    function lastRewardBlock() public view returns (uint256) {
        return _state.lastRewardBlock;
    }

    function getRewardPerBlock() public view virtual returns (uint256) {
        return _state.REWARD_PER_BLOCK;
    }

    
    function getStakeLockupDuration() public view virtual returns (uint256) {
        return Constants.getStakeLockupDuration();
    }

    function getVestingDuration() public view virtual returns (uint256) {
        return Constants.getVestingDuration();
    }

    function blockNumber() public view virtual returns (uint256) {
        return block.number;
    }

    function blockTimestamp() public view virtual returns (uint256) {
        return block.timestamp;
    }

    
    function balanceOfStaked(address account) public view returns (uint256) {
        return _state.accounts[account].staked;
    }

    function stakingScheduleStartTime(address account)
        public
        view
        returns (uint256[] memory)
    {
        uint256 stakingsLength = _state.accounts[account].stakings.length;
        uint256[] memory array = new uint256[](stakingsLength);
        for (uint256 i = 0; i < stakingsLength; i++) {
            array[i] = _state.accounts[account].stakings[i].start;
        }
        return array;
    }

    function stakingScheduleAmount(address account)
        public
        view
        returns (uint256[] memory)
    {
        uint256 stakingsLength = _state.accounts[account].stakings.length;
        uint256[] memory array = new uint256[](stakingsLength);
        for (uint256 i = 0; i < stakingsLength; i++) {
            array[i] = _state.accounts[account].stakings[i].amount;
        }
        return array;
    }

    function balanceOfUnstakable(address account)
        public
        view
        returns (uint256)
    {
        uint256 unstakable;

        for (uint256 i = 0; i < _state.accounts[account].stakings.length; i++) {
            uint256 totalStakingAmount =
                _state.accounts[account].stakings[i].amount;
            uint256 start = _state.accounts[account].stakings[i].start;

            uint32 startDay = uint32(start / SECONDS_PER_DAY);
            uint32 today = uint32(blockTimestamp() / SECONDS_PER_DAY);

            
            if (
                (today >= (startDay + getStakeLockupDuration())) ||
                isAddrBlacklisted(account)
            ) {
                unstakable = unstakable.add(totalStakingAmount); 
            } else {
                unstakable += 0; 
            }
        }
        return unstakable;
    }

    function balanceOfPhantom(address account) public view returns (uint256) {
        return _state.accounts[account].phantom;
    }

    function balanceOfRewarded(address account) public view returns (uint256) {
        uint256 totalStakedAmount = totalStaked();
        if (totalStakedAmount == 0) {
            return 0;
        }
        uint256 totalRewardedWithPhantom = totalRewarded().add(totalPhantom());
        uint256 balanceOfRewardedWithPhantom =
            totalRewardedWithPhantom.mul(balanceOfStaked(account)).div(
                totalStakedAmount
            );

        uint256 phantomBalance = balanceOfPhantom(account);
        if (balanceOfRewardedWithPhantom > phantomBalance) {
            return balanceOfRewardedWithPhantom.sub(phantomBalance);
        }
        return 0;
    }

    function balanceOfClaimed(address account) public view returns (uint256) {
        return _state.accounts[account].claimed;
    }

    function balanceOfVesting(address account) public view returns (uint256) {
        uint256 totalVestingAmount;
        for (uint256 i = 0; i < _state.accounts[account].vestings.length; i++) {
            totalVestingAmount = totalVestingAmount.add(_state.accounts[account].vestings[i].amount);
        }
        return totalVestingAmount;
    }

    function balanceOfClaimable(address account) public view returns (uint256) {
        uint256 claimable;

        for (uint256 i = 0; i < _state.accounts[account].vestings.length; i++) {
            uint256 totalVestingAmount =
                _state.accounts[account].vestings[i].amount;
            uint256 start = _state.accounts[account].vestings[i].start;

            uint32 startDay = uint32(start.div(SECONDS_PER_DAY));
            uint32 today = uint32(blockTimestamp().div(SECONDS_PER_DAY));
            uint32 vestingInterval = Constants.getVestingInterval();
            uint256 vestingDuration = getVestingDuration();

            if (today >= (startDay + vestingDuration)) {
                claimable = claimable.add(totalVestingAmount); 
            } else if (today <= startDay) {
                claimable += 0; 
            } else {
                
                
                uint32 daysVested = today - startDay;
                
                uint32 effectiveDaysVested =
                    (daysVested / vestingInterval) * vestingInterval;
                uint256 vested =
                    totalVestingAmount.mul(effectiveDaysVested).div(
                        vestingDuration
                    );
                claimable = claimable.add(vested);
            }
        }
        return claimable.sub(balanceOfClaimed(account));
    }

    function isMiningPaused() public view returns (bool) {
        return _state.pauseMinig;
    }

    function isFull() public view returns (bool) {
        return
            _state.totalPoolCapLimit != 0 &&
            _state.balance.staked >= _state.totalPoolCapLimit;
    }

    function isAddrBlacklisted(address addr) public view returns (bool) {
        return _state.accounts[addr].isBlacklisted;
    }

    function totalPoolCapLimit() public view returns (uint256) {
        return _state.totalPoolCapLimit;
    }

    function stakeLimitPerAddress() public view returns (uint256) {
        return _state.stakeLimitPerAddress;
    }

    function checkMiningPaused() public {
        require(
            isMiningPaused() == false,
            "liquidity mining program is paused"
        );
    }

    function ensureAddrNotBlacklisted(address addr) public {
        require(
            isAddrBlacklisted(addr) == false,
            "Your address is blacklisted"
        );
    }

    function checkPoolStakeCapLimit(uint256 amountToStake) public {
        require(
            (_state.totalPoolCapLimit == 0 || 
                (_state.balance.staked.add(amountToStake)) <=
                _state.totalPoolCapLimit) == true,
            "Exceed pool limit"
        );
    }

    function checkPerAddrStakeLimit(uint256 amountToStake, address account)
        public
    {
        require(
            (_state.stakeLimitPerAddress == 0 || 
                (balanceOfStaked(account).add(amountToStake)) <=
                _state.stakeLimitPerAddress) == true,
            "Exceed per address stake limit"
        );
    }
}




pragma solidity ^0.6.2;



contract PoolSetters is PoolState, PoolGetters {
    using SafeMath for uint256;

    
    function incrementTotalRewarded(uint256 amount) internal {
        _state.balance.rewarded = _state.balance.rewarded.add(amount);
    }

    function decrementTotalRewarded(uint256 amount, string memory reason)
        internal
    {
        _state.balance.rewarded = _state.balance.rewarded.sub(amount, reason);
    }

    function updateLastRewardBlock(uint256 lastRewardBlock) internal {
        _state.lastRewardBlock = lastRewardBlock;
    }

    
    function incrementBalanceOfStaked(address account, uint256 amount)
        internal
    {
        _state.accounts[account].staked = _state.accounts[account].staked.add(
            amount
        );
        _state.balance.staked = _state.balance.staked.add(amount);

        Vesting memory staking = Vesting(blockTimestamp(), amount);
        _state.accounts[account].stakings.push(staking);
    }

    function decrementBalanceOfStaked(
        address account,
        uint256 amount,
        string memory reason
    ) internal {
        _state.accounts[account].staked = _state.accounts[account].staked.sub(
            amount,
            reason
        );
        _state.balance.staked = _state.balance.staked.sub(amount, reason);

        uint256 remainingAmount = amount;
        for (uint256 i = 0; i < _state.accounts[account].stakings.length; i++) {
            if (remainingAmount == 0) {
                break;
            }
            uint256 totalStakingAmount =
                _state.accounts[account].stakings[i].amount;

            uint256 unstakeAmount =
                totalStakingAmount > remainingAmount
                    ? remainingAmount
                    : totalStakingAmount;
            _state.accounts[account].stakings[i].amount = totalStakingAmount
                .sub(unstakeAmount, reason);
            remainingAmount = remainingAmount.sub(unstakeAmount, reason);
        }
    }

    function incrementBalanceOfPhantom(address account, uint256 amount)
        internal
    {
        _state.accounts[account].phantom = _state.accounts[account].phantom.add(
            amount
        );
        _state.balance.phantom = _state.balance.phantom.add(amount);
    }

    function decrementBalanceOfPhantom(
        address account,
        uint256 amount,
        string memory reason
    ) internal {
        _state.accounts[account].phantom = _state.accounts[account].phantom.sub(
            amount,
            reason
        );
        _state.balance.phantom = _state.balance.phantom.sub(amount, reason);
    }

    function incrementBalanceOfClaimed(address account, uint256 amount)
        internal
    {
        _state.accounts[account].claimed = _state.accounts[account].claimed.add(
            amount
        );
        _state.balance.claimed = _state.balance.claimed.add(amount);
    }

    function addToVestingSchdule(address account, uint256 amount) internal {
        Vesting memory vesting = Vesting(blockTimestamp(), amount);
        _state.accounts[account].vestings.push(vesting);
        _state.balance.vesting = _state.balance.vesting.add(amount);
    }

    
    
    function blacklistAddress(address addr) public {
        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");
        _state.accounts[addr].isBlacklisted = true;
    }

    
    function removeAddressFromBlacklist(address addr) public {
        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");
        _state.accounts[addr].isBlacklisted = false;
    }

    
    function pauseMinigReward() public {
        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");
        _state.pauseMinig = true;
        _state.REWARD_PER_BLOCK = 0;
    }

    
    function resumeMiningReward(uint256 rewardPerBlock) public {
        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");
        _state.pauseMinig = false;
        _state.REWARD_PER_BLOCK = rewardPerBlock;
    }

    function setTotalPoolCapLimit(uint256 totalPoolCapLimit) public {
        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");
        _state.totalPoolCapLimit = totalPoolCapLimit;
    }

    function setStakeLimitPerAddress(uint256 stakeLimitPerAddress) public {
        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");
        _state.stakeLimitPerAddress = stakeLimitPerAddress;
    }
}






pragma solidity ^0.6.2;
pragma experimental ABIEncoderV2;

abstract contract IPool {
    function stake(uint256 value) external virtual;

    function unstake(uint256 value) external virtual;

    function harvest(uint256 value) public virtual;

    function claim(uint256 value) public virtual;

    function zapStake(uint256 value, address userAddress) external virtual;
}




pragma solidity ^0.6.2;

abstract contract IWETH {
    function deposit() public payable virtual;
}




pragma solidity ^0.6.2;








contract CookPool is PoolSetters, IPool {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    constructor(
        address cook,
        uint256 cook_reward_per_block,
        uint256 totalPoolCapLimit,
        uint256 stakeLimitPerAddress
    ) public {
        require(cook != address(0), "Cook address can not be empty");
        require(
            cook_reward_per_block != 0,
            "cook_reward_per_block can not be zero"
        );

        _state.provider.cook = IERC20(cook); 
        _state.pauseMinig = false;
        
        _state.REWARD_PER_BLOCK = cook_reward_per_block;
        _state.totalPoolCapLimit = totalPoolCapLimit;
        _state.stakeLimitPerAddress = stakeLimitPerAddress;

        
        _setupRole(MANAGER_ROLE, msg.sender);
        _setupRole(ADMIN_ROLE, msg.sender);
        _setRoleAdmin(MANAGER_ROLE, ADMIN_ROLE);
    }

    event Stake(address indexed account, uint256 cookAmount);
    event Unstake(address indexed account, uint256 cookAmount);
    event Claim(address indexed account, uint256 cookAmount);
    event Harvest(address indexed account, uint256 cookAmount);
    event ZapCook(address indexed account, uint256 cookAmount);

    function stake(uint256 cookAmount) external override {
        checkMiningPaused();
        ensureAddrNotBlacklisted(msg.sender);

        checkPoolStakeCapLimit(cookAmount);
        checkPerAddrStakeLimit(cookAmount, msg.sender);

        updateStakeStates(cookAmount, msg.sender);
        cook().safeTransferFrom(msg.sender, address(this), cookAmount);
        cookBalanceCheck();

        emit Stake(msg.sender, cookAmount);
    }

    function updateStakeStates(uint256 cookAmount, address userAddress)
        internal
    {
        require(cookAmount > 0, "zero stake cook amount");

        calculateNewRewardSinceLastRewardBlock();

        uint256 totalRewardedWithPhantom = totalRewarded().add(totalPhantom());
        uint256 newPhantom =
            totalStaked() == 0
                ? totalRewarded() == 0
                    ? Constants.getInitialStakeMultiple().mul(cookAmount)
                    : 0
                : totalRewardedWithPhantom.mul(cookAmount).div(totalStaked());

        incrementBalanceOfStaked(userAddress, cookAmount);
        incrementBalanceOfPhantom(userAddress, newPhantom);
    }

    function zapStake(uint256 cookAmount, address userAddress)
        external
        override
    {
        checkMiningPaused();
        ensureAddrNotBlacklisted(userAddress);

        checkPoolStakeCapLimit(cookAmount);
        checkPerAddrStakeLimit(cookAmount, userAddress);

        updateStakeStates(cookAmount, userAddress);
        cook().safeTransferFrom(msg.sender, address(this), cookAmount);
        cookBalanceCheck();

        emit ZapCook(userAddress, cookAmount);
    }

    function calculateNewRewardSinceLastRewardBlock() internal virtual {
        uint256 lastRewardBlock = lastRewardBlock();
        uint256 blockNumber = blockNumber();
        if (blockNumber > lastRewardBlock) {
            if (totalStaked() != 0) {
                uint256 currentBlock = blockNumber;
                uint256 numOfBlocks = currentBlock.sub(lastRewardBlock);
                uint256 rewardAmount = numOfBlocks.mul(getRewardPerBlock());
                incrementTotalRewarded(rewardAmount);
            }
            updateLastRewardBlock(blockNumber);
        }
        cookBalanceCheck();
    }

    function unstake(uint256 cookAmount) external override {
        require(cookAmount > 0, "zero unstake cook amount");

        uint256 stakedBalance = balanceOfStaked(msg.sender);
        uint256 unstakableBalance = balanceOfUnstakable(msg.sender);
        require(
            unstakableBalance >= cookAmount,
            "insufficient unstakable balance"
        );

        calculateNewRewardSinceLastRewardBlock();

        uint256 newClaimable =
            balanceOfRewarded(msg.sender).mul(cookAmount).div(stakedBalance);
        uint256 lessPhantom =
            balanceOfPhantom(msg.sender).mul(cookAmount).div(stakedBalance);

        addToVestingSchdule(msg.sender, newClaimable);
        decrementTotalRewarded(newClaimable, "insufficient rewarded balance");
        decrementBalanceOfStaked(
            msg.sender,
            cookAmount,
            "insufficient staked balance"
        );
        decrementBalanceOfPhantom(
            msg.sender,
            lessPhantom,
            "insufficient phantom balance"
        );

        cook().transfer(msg.sender, cookAmount);
        cookBalanceCheck();

        emit Unstake(msg.sender, cookAmount);
    }

    function harvest(uint256 cookAmount) public override {
        ensureAddrNotBlacklisted(msg.sender);

        require(cookAmount > 0, "zero harvest amount");

        require(totalRewarded() > 0, "insufficient total rewarded");

        require(
            balanceOfRewarded(msg.sender) >= cookAmount,
            "insufficient rewarded balance"
        );

        addToVestingSchdule(msg.sender, cookAmount);
        decrementTotalRewarded(cookAmount, "insufficient rewarded balance");
        incrementBalanceOfPhantom(msg.sender, cookAmount);

        cookBalanceCheck();

        emit Harvest(msg.sender, cookAmount);
    }

    function claim(uint256 cookAmount) public override {
        ensureAddrNotBlacklisted(msg.sender);

        require(cookAmount > 0, "zero claim cook amount");

        require(
            balanceOfClaimable(msg.sender) >= cookAmount,
            "insufficient claimable cook balance"
        );

        cook().safeTransfer(msg.sender, cookAmount);
        incrementBalanceOfClaimed(msg.sender, cookAmount);

        emit Claim(msg.sender, cookAmount);
    }

    function _calWethAmountToPairCook(uint256 cookAmount)
        internal
        returns (uint256, address)
    {
        IUniswapV2Pair lpPair = IUniswapV2Pair(address(univ2()));

        uint256 reserve0;
        uint256 reserve1;
        address weth;
        if (lpPair.token0() == address(cook())) {
            (reserve0, reserve1, ) = lpPair.getReserves();
            weth = lpPair.token1();
        } else {
            (reserve1, reserve0, ) = lpPair.getReserves();
            weth = lpPair.token0();
        }

        uint256 wethAmount =
            (reserve0 == 0 && reserve1 == 0)
                ? cookAmount
                : UniswapV2Library.quote(cookAmount, reserve0, reserve1);

        return (wethAmount, weth);
    }

    function zapCook(uint256 cookAmount) external {
        require(cookAmount > 0, "zero zap amount");

        require(
            balanceOfClaimable(msg.sender) >= cookAmount,
            "insufficient claimable balance"
        );

        checkMiningPaused();
        ensureAddrNotBlacklisted(msg.sender);

        checkPoolStakeCapLimit(cookAmount);
        checkPerAddrStakeLimit(cookAmount, msg.sender);

        incrementBalanceOfClaimed(msg.sender, cookAmount);
        updateStakeStates(cookAmount, msg.sender);
        cookBalanceCheck();

        emit ZapCook(msg.sender, cookAmount);
    }

    function cookBalanceCheck() private view {
        require(
            cook().balanceOf(address(this)) >=
                totalVesting().add(totalRewarded()).sub(totalClaimed()),
            "Inconsistent COOK balances"
        );
    }

    
    function emergencyWithdraw(uint256 amount) public onlyOwner {
        cook().safeTransfer(msg.sender, amount);
    }

    
    function setRewardPerBlock(uint256 rewardPerBlock) public {
        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");
        calculateNewRewardSinceLastRewardBlock();
        _state.REWARD_PER_BLOCK = rewardPerBlock;
    }
}