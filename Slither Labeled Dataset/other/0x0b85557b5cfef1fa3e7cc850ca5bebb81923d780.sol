



pragma solidity ^0.5.0;



library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


contract Context {
    
    
    constructor () internal { }
    

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}

interface IERC1155 {
	event TransferSingle(
		address indexed _operator,
		address indexed _from,
		address indexed _to,
		uint256 _id,
		uint256 _amount
	);

	event TransferBatch(
		address indexed _operator,
		address indexed _from,
		address indexed _to,
		uint256[] _ids,
		uint256[] _amounts
	);

	event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);

	event URI(string _amount, uint256 indexed _id);

	function mint(
		address _to,
		uint256 _id,
		uint256 _quantity,
		bytes calldata _data
	) external;

	function create(
		uint256 _maxSupply,
		uint256 _initialSupply,
		string calldata _uri,
		bytes calldata _data
	) external returns (uint256 tokenId);

	function safeTransferFrom(
		address _from,
		address _to,
		uint256 _id,
		uint256 _amount,
		bytes calldata _data
	) external;

	function safeBatchTransferFrom(
		address _from,
		address _to,
		uint256[] calldata _ids,
		uint256[] calldata _amounts,
		bytes calldata _data
	) external;

	function balanceOf(address _owner, uint256 _id) external view returns (uint256);

	function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)
		external
		view
		returns (uint256[] memory);

	function setApprovalForAll(address _operator, bool _approved) external;

	function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract NFTPOE is Ownable {
    uint256 public nftid;
    mapping(address => bool) private purchased;
    mapping(address => bool) private blacklist;
    address public seller;
    address public rarigang;
    address public currency;
    address public gdao;
    address public xgdao;
    

    constructor(uint256 _nftid, address _seller, address _rarigang, address _currency, address _gdao, address _xgdao) public{
        nftid = _nftid;
        seller = _seller;
        rarigang = _rarigang;
        currency = _currency;
        gdao = _gdao;
        xgdao = _xgdao;
    }
    
    function addBlacklist(address user) public onlyOwner{
        blacklist[user] = true;
    }

    function addManyBlacklist(address[] memory user) public onlyOwner{
        for (uint i = 0; i < user.length; i++){
            blacklist[user[i]] = true;
        }
    }

    function removeBlacklist(address user) public onlyOwner{
        blacklist[user] = false;
    }

    function isBlacklisted(address user) public view returns (bool){
        return blacklist[user];
    }

    function hasPurchased(address buyer) public view returns (bool){
        return purchased[buyer];
    }

    function purchase() public {
        require(!isBlacklisted(msg.sender), "Cannot buy: blacklisted wallet!");
        require(IERC20(currency).balanceOf(msg.sender) == 1, "Need to authenticate first!");
        require(IERC20(gdao).balanceOf(msg.sender) >= 50*1e18 || 
        IERC20(xgdao).balanceOf(msg.sender) >= 50*1e18, "Must hold 50 GDAO!");
        require(!hasPurchased(msg.sender), "Cannot buy: Already purchased!");
        require(IERC1155(rarigang).balanceOf(seller, nftid) > 0, "Cannot buy: No more available!");
        IERC1155(rarigang).safeTransferFrom(seller, msg.sender, nftid, 1, "");
        purchased[msg.sender] = true;
    }
}