





pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; 
        return msg.data;
    }
}




abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}








library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            
            
            
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}




interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}





interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}




contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        _approve(sender, _msgSender(), currentAllowance - amount);

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);

        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        _balances[account] = accountBalance - amount;
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}




contract UnizenRealCirculatingSupply is Ownable {
   struct AddressInfo {
       address lockAddress;
       string name;
   }
   
   IERC20 public zcxToken;
   
   mapping(uint8 => AddressInfo) public lockedAddresses;
   mapping(uint8 => address) public burnAddresses;
   
   uint8 public lockedAddressCount;
   uint8 public burnAddressCount;
   uint8 internal _lockIdx;
   uint8 internal _burnIdx;
   
   constructor(address _tokenAddress) {
       require(_tokenAddress != address(0), "ZERO_ADDRESS");
       zcxToken = IERC20(_tokenAddress);
   }
   
   
   function getTotalSupply() external view returns(uint256 totalSupply) {
       totalSupply = zcxToken.totalSupply();
   }
   
   function getCirculatingSupply() external view returns(uint256 circulatingSupply) {
       uint256 totalSupply = zcxToken.totalSupply();
       circulatingSupply = totalSupply;
       
       circulatingSupply = SafeMath.sub(circulatingSupply, getLockedAmount());
       circulatingSupply = SafeMath.sub(circulatingSupply, getBurnedAmount());
   }
   
   function getDescriptiveCirculatingSupply() external view returns(uint256, uint256, string[] memory, uint256[] memory) {
       uint256 totalSupply = zcxToken.totalSupply();
       uint256 circulatingSupply = totalSupply;
       string[] memory descriptions = new string[](lockedAddressCount + 1);
       uint256[] memory supplies = new uint256[](lockedAddressCount + 1);
       uint8 _idx;
       
       for(uint8 i = 0; i < _lockIdx; i++) {
           if(lockedAddresses[i].lockAddress != address(0)) {
               descriptions[_idx] = lockedAddresses[i].name;
               supplies[_idx] = zcxToken.balanceOf(lockedAddresses[i].lockAddress);
               circulatingSupply = SafeMath.sub(circulatingSupply, supplies[_idx]);
               _idx++;
           }
       }
       
       descriptions[lockedAddressCount] = "Burned";
       supplies[lockedAddressCount] = getBurnedAmount();


       circulatingSupply = SafeMath.sub(circulatingSupply, supplies[lockedAddressCount]);
       
       return (totalSupply,circulatingSupply, descriptions, supplies);
   }
   
   function getLockedAddresses() public view returns(address[] memory, string[] memory) {
       address[] memory addresses = new address[](lockedAddressCount);
       string[] memory descriptions = new string[](lockedAddressCount);
       uint8 _idx;
       for(uint8 i = 0; i < _lockIdx; i++) {
           if(lockedAddresses[i].lockAddress != address(0)) {
               addresses[_idx] = lockedAddresses[i].lockAddress;
               descriptions[_idx] = lockedAddresses[i].name;
               _idx++;
           }
       }
       return (addresses, descriptions);
   }
   
   function getBurnAddress() public view returns(address[] memory) {
       address[] memory addresses = new address[](burnAddressCount);
       uint8 _idx;
       for(uint8 i = 0; i < _burnIdx; i++) {
           if(burnAddresses[i] != address(0)) {
               addresses[_idx] = burnAddresses[i];
               _idx++;
           }
       }
       return addresses;
   }
   
   function getLockedAmount() public view returns(uint256 lockedAmount) {
       for(uint8 i = 0; i < _lockIdx; i++) {
           if(lockedAddresses[i].lockAddress != address(0)) {
               lockedAmount = SafeMath.add(lockedAmount,zcxToken.balanceOf(lockedAddresses[i].lockAddress));
           }
       }
   }
   
   function getBurnedAmount() public view returns(uint256 burnedAmount) {
       for(uint8 i = 0; i < _burnIdx; i++) {
           if(burnAddresses[i] != address(0)) {
               burnedAmount = SafeMath.add(burnedAmount, zcxToken.balanceOf(burnAddresses[i]));
           }
       }
       burnedAmount = SafeMath.add(burnedAmount, zcxToken.balanceOf(address(0)));
   }
   
   
   function addBurnAddress(address _address) external onlyOwner {
       uint8 _idx = _burnAddressExists(_address);
       require(_idx == 255, "ALREADY_EXISTS");
       
       burnAddresses[_burnIdx] = _address;
       _burnIdx++;
       burnAddressCount++;
   }
   function removeBurnAddress(address _address) external onlyOwner {
       uint8 _idx = _burnAddressExists(_address);
       require(_idx < 255, "DOES_NOT_EXIST");
       
       burnAddresses[_idx] = address(0);
       burnAddressCount--;
   }
   function addLockedAddress(address _address, string calldata _description) external onlyOwner {
       uint8 _idx = _lockedAddressExists(_address);
       require(_idx == 255, "ALREADY_EXISTS");
       AddressInfo storage info = lockedAddresses[_lockIdx];
       info.lockAddress = _address;
       info.name = _description;
       
       lockedAddressCount++;
       _lockIdx++;
   }
   function removeLockedAddress(address _address) external onlyOwner {
       uint8 _idx = _lockedAddressExists(_address);
       require(_idx < 255, "DOES_NOT_EXIST");
       lockedAddresses[_idx].lockAddress = address(0);
       lockedAddressCount--;
   }
   function updateLockeAddressDescription(address _address, string calldata _newDescription) external onlyOwner {
       uint8 _idx = _lockedAddressExists(_address);
       require(_idx < 255, "DOES_NOT_EXIST");
       lockedAddresses[_idx].name = _newDescription;
   }
   
   function transferTokenOut(address _token) external onlyOwner {
       IERC20 token = IERC20(_token);
       uint256 balance = token.balanceOf(address(this));
       require(balance > 0);
       require(token.transfer(owner(), balance) == true);
   }
   
   receive() external payable {
       require(payable(owner()).send(msg.value) == true);
   }
   
   
   function _lockedAddressExists(address _address) internal view returns(uint8) {
       if(lockedAddressCount == 0) return 255;
       for(uint8 i = 0; i < _lockIdx; i++) {
           if(lockedAddresses[i].lockAddress == _address) {
               return i;
           }
       }
       return 255;
   }
   
   function _burnAddressExists(address _address) internal view returns(uint8) {
       if(burnAddressCount == 0) return 255;
       for(uint8 i = 0; i < _burnIdx; i++) {
           if(burnAddresses[i] == _address) {
               return i;
           }
       }
       return 255;
   }
}