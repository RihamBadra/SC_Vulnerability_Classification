







pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity ^0.8.6;


library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

    function safeTransferETH(address to, uint value) internal {
        (bool success,) = to.call{value:value}(new bytes(0));
        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');
    }
}






pragma solidity ^0.8.6;


interface IHedgeVaultForStaking {

    
    
    
    
    function batchSetPoolWeight(
        address[] calldata xtokens, 
        uint64[] calldata cycles, 
        uint160[] calldata weights
    ) external;

    
    
    
    
    
    
    function getChannelInfo(
        address xtoken, 
        uint64 cycle
    ) external view returns (
        uint totalStaked, 
        uint totalRewards,
        uint unlockBlock
    );

    
    
    
    
    function balanceOf(address xtoken, uint64 cycle, address addr) external view returns (uint);

    
    
    
    
    function earned(address xtoken, uint64 cycle, address addr) external view returns (uint);

    
    
    
    function stake(address xtoken, uint64 cycle, uint160 amount) external;

    
    
    function withdraw(address xtoken, uint64 cycle) external;

    
    
    function getReward(address xtoken, uint64 cycle) external;
}






pragma solidity ^0.8.6;


interface IHedgeMapping {

    
    
    
    
    
    
    
    function setBuiltinAddress(
        address dcuToken,
        address hedgeDAO,
        address hedgeOptions,
        address hedgeFutures,
        address hedgeVaultForStaking,
        address nestPriceFacade
    ) external;

    
    
    
    
    
    
    
    function getBuiltinAddress() external view returns (
        address dcuToken,
        address hedgeDAO,
        address hedgeOptions,
        address hedgeFutures,
        address hedgeVaultForStaking,
        address nestPriceFacade
    );

    
    
    function getDCUTokenAddress() external view returns (address);

    
    
    function getHedgeDAOAddress() external view returns (address);

    
    
    function getHedgeOptionsAddress() external view returns (address);

    
    
    function getHedgeFuturesAddress() external view returns (address);

    
    
    function getHedgeVaultForStakingAddress() external view returns (address);

    
    
    function getNestPriceFacade() external view returns (address);

    
    
    
    function registerAddress(string calldata key, address addr) external;

    
    
    
    function checkAddress(string calldata key) external view returns (address);
}






pragma solidity ^0.8.6;

interface IHedgeGovernance is IHedgeMapping {

    
    
    
    
    
    function setGovernance(address addr, uint flag) external;

    
    
    
    
    
    function getGovernance(address addr) external view returns (uint);

    
    
    
    
    
    function checkGovernance(address addr, uint flag) external view returns (bool);
}






pragma solidity ^0.8.6;


interface IHedgeDAO {

    
    
    
    event ApplicationChanged(address addr, uint flag);
    
    
    
    
    function setApplication(address addr, uint flag) external;

    
    
    
    function checkApplication(address addr) external view returns (uint);

    
    
    function addETHReward(address pool) external payable;

    
    
    function totalETHRewards(address pool) external view returns (uint);

    
    
    
    
    
    function settle(address pool, address tokenAddress, address to, uint value) external payable;
}






pragma solidity ^0.8.6;

contract HedgeBase {

    
    address public _governance;

    
    
    function initialize(address governance) public virtual {
        require(_governance == address(0), "Hedge:!initialize");
        _governance = governance;
    }

    
    
    
    function update(address newGovernance) public virtual {

        address governance = _governance;
        require(governance == msg.sender || IHedgeGovernance(governance).checkGovernance(msg.sender, 0), "Hedge:!gov");
        _governance = newGovernance;
    }

    
    
    
    function migrate(address tokenAddress, uint value) external onlyGovernance {

        address to = IHedgeGovernance(_governance).getHedgeDAOAddress();
        if (tokenAddress == address(0)) {
            IHedgeDAO(to).addETHReward { value: value } (address(0));
        } else {
            TransferHelper.safeTransfer(tokenAddress, to, value);
        }
    }

    

    modifier onlyGovernance() {
        require(IHedgeGovernance(_governance).checkGovernance(msg.sender, 0), "Hedge:!gov");
        _;
    }

    modifier noContract() {
        require(msg.sender == tx.origin, "Hedge:!contract");
        _;
    }
}






pragma solidity ^0.8.6;

contract HedgeFrequentlyUsed is HedgeBase {

    
    address constant DCU_TOKEN_ADDRESS = 0xf56c6eCE0C0d6Fbb9A53282C0DF71dBFaFA933eF;

    
    address constant NEST_PRICE_FACADE_ADDRESS = 0xB5D2890c061c321A5B6A4a4254bb1522425BAF0A;
    
    
    address constant USDT_TOKEN_ADDRESS = 0xdAC17F958D2ee523a2206206994597C13D831ec7;

    
    uint constant USDT_BASE = 1000000;
}






pragma solidity ^0.8.0;


interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}






pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;




contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}






pragma solidity ^0.8.6;

contract DCU is HedgeBase, ERC20("Decentralized Currency Unit", "DCU") {

    
    mapping(address=>uint) _minters;

    constructor() {
    }

    modifier onlyMinter {
        require(_minters[msg.sender] == 1, "DCU:not minter");
        _;
    }

    
    
    
    function setMinter(address account, uint flag) external onlyGovernance {
        _minters[account] = flag;
    }

    
    
    
    function checkMinter(address account) external view returns (uint) {
        return _minters[account];
    }

    
    
    
    function mint(address to, uint value) external onlyMinter {
        _mint(to, value);
    }

    
    
    
    function burn(address from, uint value) external onlyMinter {
        _burn(from, value);
    }
}






pragma solidity ^0.8.6;

contract HedgeVaultForStaking is HedgeFrequentlyUsed, IHedgeVaultForStaking {

    

    
    struct Account {
        
        uint160 balance;
        
        uint96 rewardCursor;
    }
    
    
    struct StakeChannel{

        
        uint192 totalStaked;

        
        uint64 unlockBlock;

        
        uint160 weight;

        
        uint96 rewardPerToken;

        
        
        mapping(address=>Account) accounts;
    }
    
    uint constant UI128 = 0x100000000000000000000000000000000;

    
    uint128 _dcuUnit;
    
    uint64 _startBlock;
    
    uint64 _stopBlock;

    
    mapping(uint=>StakeChannel) _channels;
    
    
    constructor () {
    }

    
    
    
    
    function setConfig(uint128 dcuUnit, uint64 startBlock, uint64 stopBlock) external onlyGovernance {
        _dcuUnit = dcuUnit;
        _startBlock = startBlock;
        _stopBlock = stopBlock;
    }

    
    
    
    
    function getConfig() external view returns (uint dcuUnit, uint startBlock, uint stopBlock) {
        return (uint(_dcuUnit), uint(_startBlock), uint(_stopBlock));
    }

    
    
    
    
    function batchSetPoolWeight(
        address[] calldata xtokens, 
        uint64[] calldata cycles, 
        uint160[] calldata weights
    ) external override onlyGovernance {
        uint64 stopBlock = _stopBlock;
        uint cnt = xtokens.length;
        require(cnt == weights.length && cnt == cycles.length, "FVFS:mismatch len");

        for (uint i = 0; i < cnt; ++i) {
            address xtoken = xtokens[i];
            
            StakeChannel storage channel = _channels[_getKey(xtoken, cycles[i])];
            _updateReward(channel);

            channel.weight = weights[i];
            channel.unlockBlock = stopBlock + cycles[i];
        }
    }

    
    
    
    
    
    
    function getChannelInfo(
        address xtoken, 
        uint64 cycle
    ) external view override returns (
        uint totalStaked, 
        uint totalRewards,
        uint unlockBlock
    ) {
        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];
        return (
            uint(channel.totalStaked), 
            uint(channel.weight) * uint(_dcuUnit), 
            uint(channel.unlockBlock) 
        );
    }

    
    
    
    
    
    function balanceOf(address xtoken, uint64 cycle, address addr) external view override returns (uint) {
        return uint(_channels[_getKey(xtoken, cycle)].accounts[addr].balance);
    }

    
    
    
    
    
    function earned(address xtoken, uint64 cycle, address addr) external view override returns (uint) {
        
        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];
        
        uint newReward = _calcReward(channel);
        
        
        Account memory account = channel.accounts[addr];
        uint balance = uint(account.balance);
        
        uint totalStaked = uint(channel.totalStaked);

        
        uint rewardPerToken = _decodeFloat(channel.rewardPerToken);
        if (totalStaked > 0) {
            rewardPerToken += newReward * UI128 / totalStaked;
        }
        
        return (rewardPerToken - _decodeFloat(account.rewardCursor)) * balance / UI128;
    }

    
    
    
    
    function stake(address xtoken, uint64 cycle, uint160 amount) external override {

        require(block.number >= uint(_startBlock) && block.number <= uint(_stopBlock), "FVFS:!block");
        
        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];
        require(uint(channel.weight) > 0, "FVFS:no reward");
        
        
        TransferHelper.safeTransferFrom(xtoken, msg.sender, address(this), uint(amount));
        
        
        Account memory account = _getReward(channel, msg.sender);

        
        channel.totalStaked += uint192(amount);

        
        account.balance += amount;
        channel.accounts[msg.sender] = account;
    }

    
    
    
    function withdraw(address xtoken, uint64 cycle) external override {
        
        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];
        require(block.number >= uint(channel.unlockBlock), "FVFS:!block");

        
        Account memory account = _getReward(channel, msg.sender);
        uint amount = uint(account.balance);

        
        channel.totalStaked -= uint192(amount);
        
        account.balance = uint160(0);
        channel.accounts[msg.sender] = account;

        
        TransferHelper.safeTransfer(xtoken, msg.sender, amount);
    }

    
    
    
    function getReward(address xtoken, uint64 cycle) external override {
        StakeChannel storage channel = _channels[_getKey(xtoken, cycle)];
        channel.accounts[msg.sender] = _getReward(channel, msg.sender);
    }

    
    function _getReward(
        StakeChannel storage channel, 
        address to
    ) private returns (Account memory account) {
        
        account = channel.accounts[to];
        
        uint rewardPerToken = _updateReward(channel);
        
        
        uint balance = uint(account.balance);
        uint reward = (rewardPerToken - _decodeFloat(account.rewardCursor)) * balance / UI128;
        
        
        account.rewardCursor = _encodeFloat(rewardPerToken);
        

        
        if (reward > 0) {
            DCU(DCU_TOKEN_ADDRESS).mint(to, reward);
        }
    }

    
    function _updateReward(StakeChannel storage channel) private returns (uint rewardPerToken) {
        
        uint newReward = _calcReward(channel);

        
        uint totalStaked = uint(channel.totalStaked);
        
        rewardPerToken = _decodeFloat(channel.rewardPerToken);
        if (totalStaked > 0) {
            rewardPerToken += newReward * UI128 / totalStaked;
        }

        
        channel.rewardPerToken = _encodeFloat(rewardPerToken);
        if (newReward > 0) {
            channel.weight = uint160(0);
        }
    }

    
    function _calcReward(StakeChannel storage channel) private view returns (uint newReward) {

        if (block.number > uint(_stopBlock)) {
            newReward = uint(channel.weight) * uint(_dcuUnit);
        } else {
            newReward = 0;
        }
    }

    
    
    
    function _encodeFloat(uint value) private pure returns (uint96) {

        uint exponent = 0; 
        while (value > 0x3FFFFFFFFFFFFFFFFFFFFFF) {
            value >>= 4;
            ++exponent;
        }
        return uint96((value << 6) | exponent);
    }

    
    
    
    function _decodeFloat(uint96 floatValue) private pure returns (uint) {
        return (uint(floatValue) >> 6) << ((uint(floatValue) & 0x3F) << 2);
    }

    function _getKey(address xtoken, uint64 cycle) private pure returns (uint){
        return (uint(uint160(xtoken)) << 96) | uint(cycle);
    }
}