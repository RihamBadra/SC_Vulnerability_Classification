pragma solidity 0.5.2;

contract Ownable {


    address private _owner;





    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);





    


    constructor () internal {


        _owner = msg.sender;


        emit OwnershipTransferred(address(0), _owner);


    }





    


    function owner() public view returns (address) {


        return _owner;


    }





    


    modifier onlyOwner() {


        require(isOwner());


        _;


    }





    


    function isOwner() public view returns (bool) {


        return msg.sender == _owner;


    }





    


    function renounceOwnership() public onlyOwner {


        emit OwnershipTransferred(_owner, address(0));


        _owner = address(0);


    }





    


    function transferOwnership(address newOwner) public onlyOwner {


        _transferOwnership(newOwner);


    }





    


    function _transferOwnership(address newOwner) internal {


        require(newOwner != address(0));


        emit OwnershipTransferred(_owner, newOwner);


        _owner = newOwner;


    }


}

contract ABIV2 is Ownable{


    event NewMemberCertificate(address memberAddr, bytes32 name, uint validityDate);


    constructor() public{


    }





    function generateCertificate(bytes32 _name, uint _validityDate) public onlyOwner() returns(address){


        MemberCertificateV2 member = new MemberCertificateV2(_name, _validityDate);


        emit NewMemberCertificate(address(member), _name, _validityDate);


        return address(member);


    }


    


    function setName(address certificateAddr, bytes32 newName) onlyOwner() public {


        MemberCertificateV2 member = MemberCertificateV2(certificateAddr);


        member.setName(newName);


    }





    


    function setValidityDate(address certificateAddr, uint newValidityDate) onlyOwner() public{


        MemberCertificateV2 member = MemberCertificateV2(certificateAddr);


        member.setValidityDate(newValidityDate);


    }


}

contract MemberCertificateV2 is Ownable{


    address public creator;


    uint public validityDate;


    bytes32 public name;





    event ChangeName(bytes32 prevName, bytes32 newName);


    event ChangeValidityDate(uint prevValidityDate, uint newValidityDate);





    constructor(bytes32 _name, uint _validityDate) public{


        creator = msg.sender;


        name = _name;


        validityDate = _validityDate;


    }





    function setName(bytes32 newName) onlyOwner() public {


        bytes32 prevName = name;


        name = newName;


        emit ChangeName(prevName, name);


    }





    


    function setValidityDate(uint newValidityDate) onlyOwner() public{


        uint prevValidityDate = validityDate;


        validityDate = newValidityDate;


        emit ChangeValidityDate(prevValidityDate, validityDate);


    }





}
