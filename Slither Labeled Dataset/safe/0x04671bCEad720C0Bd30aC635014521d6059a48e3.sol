





pragma solidity ^0.6.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function decimals() external view returns (uint8);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}





pragma solidity ^0.6.0;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }

    
    function sqrt(uint y) internal pure returns (uint256 z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }

        return z;
    }
}





pragma solidity ^0.6.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call.value(amount)("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call.value(value)(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}





pragma solidity ^0.6.0;





library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}




pragma solidity ^0.6.0;


contract Context {
    
    
    constructor () internal { }
    

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; 
        return msg.data;
    }
}





pragma solidity ^0.6.0;


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor (address owner_) internal {
        _owner = owner_;
        emit OwnershipTransferred(address(0), owner_);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



pragma experimental ABIEncoderV2;
pragma solidity ^0.6.0;



contract ERC20TimeLock is Ownable {
   using SafeERC20 for IERC20;
   using SafeMath for uint256;

   IERC20 public lockedToken;
   uint256 public minLockedTime = 365 * 24 * 3600;

   struct userLockedInfo {
      uint256 amount;
      uint256 unlockedTime;
      IERC20 token;
      bool withdrawn;
   }

   mapping (address=>userLockedInfo[]) public lockList;

   event AddLockedInfo(address indexed user, address indexed token, uint256 amount, uint256 unlockedTime, uint256 idx);
   event AddLockedAmount(address indexed user,  address indexed token, uint256 idx,uint256 amount);
   event SubLockedAmount(address indexed user,  address indexed token, uint256 idx,uint256 amount);
   event SetNewUnlockedTime(address indexed user,  uint256 idx, uint256 unlockedTime);
   event RemoveLockedInfo(address indexed user, address indexed token, uint256 indexed idx, uint256 amount);
   event Withdrawn(address indexed user, address indexed token, uint256 indexed idx, uint256 amount);

   constructor(address _owner, address _initToken) public Ownable(_owner) {
      lockedToken = IERC20(_initToken);
   }

   function addUser(address _user, uint256 _amount, uint256 _unlockedTime) external onlyOwner {
      addUserWithToken(_user, _amount, _unlockedTime, address(lockedToken));
   }

   function removeUser(address _user, uint256 _idx) external onlyOwner {
      userLockedInfo storage uli = _getUserLockedInfo(_user, _idx);

      require(!uli.withdrawn, "token has been withdrawn");
      uli.withdrawn = true;
      uli.token.safeTransfer(msg.sender, uli.amount);
      emit RemoveLockedInfo(_user, address(uli.token), _idx, uli.amount);
      uli.amount = 0;
   }

   function addUserWithToken(address _user, uint256 _amount, uint256 _unlockedTime, address _token) public onlyOwner {
      require(_unlockedTime > block.timestamp + minLockedTime, "unlocked time too small");

      IERC20 token = IERC20(_token);

      token.safeTransferFrom(msg.sender, address(this), _amount);

      userLockedInfo[] storage uList = lockList[_user];
      emit AddLockedInfo(_user, _token, _amount, _unlockedTime, uList.length);

      uList.push(userLockedInfo({
         amount: _amount,
         unlockedTime: _unlockedTime,
         token: token,
         withdrawn: false
      }));
   }
   
   function _getUserLockedInfo(address _user, uint256 _idx) internal view returns(userLockedInfo storage uli) {
      userLockedInfo[] storage ul =  lockList[_user];
      require(ul.length > _idx, "no such locked information");

      return ul[_idx];
   }

   function setUserUnlockedTime(address _user, uint256 _idx, uint256 _newUnlockedTime) external onlyOwner {
      userLockedInfo storage uli = _getUserLockedInfo(_user, _idx);
      uli.unlockedTime = _newUnlockedTime;

      emit SetNewUnlockedTime(_user, _idx, _newUnlockedTime);
   }

   function subUserUnlockAmount(address _user, uint256 _idx, uint256 _amount) external onlyOwner {
      userLockedInfo storage uli = _getUserLockedInfo(_user, _idx);
      require(!uli.withdrawn, "token has been withdrawn");

      uli.token.safeTransfer(msg.sender, _amount);
      uli.amount = uli.amount.sub(_amount);

      emit SubLockedAmount(_user, address(uli.token), _idx, _amount);
   }

   function addUserUnlockAmount(address _user, uint256 _idx, uint256 _amount) external onlyOwner {
      userLockedInfo storage uli = _getUserLockedInfo(_user, _idx);
      require(!uli.withdrawn, "token has been withdrawn");

      uli.token.safeTransferFrom(msg.sender, address(this), _amount);
      uli.amount = uli.amount.add(_amount);

      emit AddLockedAmount(_user, address(uli.token), _idx, _amount);
   }

   function setNewMinLockedTime(uint256 _newMinLockedTime) external onlyOwner {
      minLockedTime = _newMinLockedTime;
   }

   function withdraw(uint256 _idx) external {
      address user = msg.sender;
      userLockedInfo storage uli = _getUserLockedInfo(user, _idx);

      require(!uli.withdrawn, "already withdrawn");
      require(uli.unlockedTime < block.timestamp, "still locked");

      uli.withdrawn = true;
      uli.token.safeTransfer(user, uli.amount);
      emit Withdrawn(user, address(uli.token), _idx, uli.amount);
      uli.amount = 0;
   }

   function getLockedListOf(address _user) external view returns(userLockedInfo[] memory list) {
      return lockList[_user];
   }
}