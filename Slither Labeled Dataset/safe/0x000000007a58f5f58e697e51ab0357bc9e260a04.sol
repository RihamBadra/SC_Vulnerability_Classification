


pragma solidity >=0.8;







abstract contract ERC20 {
    
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

contract ConcaveToken is Ownable, ERC20("Concave", "CNV", 18) {

    
    
    

    event MinterSet(address indexed caller, address indexed who, bool indexed canMint);


    mapping(address => bool) public isMinter;

    address[] public minters;

    
    
    

    function mint(
        address account,
        uint256 amount
    ) external {

        require(isMinter[msg.sender], "!MINTER");

        _mint(account, amount);
    }

    function burn(
        address account,
        uint256 amount
    ) external {

        require(isMinter[msg.sender], "!MINTER");

        _burn(account, amount);
    }

    function setMinter(
        address who,
        bool canMint
    ) external onlyOwner {

        if (canMint == true && isMinter[who] == false ) minters.push(who);

        isMinter[who] = canMint;

        emit MinterSet(msg.sender, who, canMint);
    }

    function mintersLength() external view returns(uint256) {
        return minters.length;
    }
}


