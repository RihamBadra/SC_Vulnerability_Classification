





interface IMintableNft{
    
    
    function mint(
        address toAddress
    ) external;

    
    function mintedCount() external returns(uint256);
}





pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}






contract FactoryBase is Ownable {
    address public nftAddress;
    uint256 public price;
    address public withdrawAddress;

    function setNftAddress(address newNftAddress) external onlyOwner {
        nftAddress = newNftAddress;
    }

    function setPrice(uint256 newPrice) external onlyOwner {
        price = newPrice;
    }

    function setWithdrawAddress(address newWithdrawAddress) external onlyOwner {
        withdrawAddress = newWithdrawAddress;
    }

    function _mint(address toAddress) internal {
        (IMintableNft(nftAddress)).mint(toAddress);
    }
}





contract FactoryEth is FactoryBase {
    constructor() {
        price = 7e16;
        withdrawAddress = 0xa3eBf7bB02f83E43D3C0C9eEC28FEB2d0684Ad84;
    }

    function withdraw() external onlyOwner {
        payable(withdrawAddress).transfer(address(this).balance);
    }

    function mint(address to) external payable {
        require(msg.value >= price, "not enough eth");
        _mint(to);
    }
}