pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

struct ProtocolBalance {

    ProtocolMetadata metadata;

    AdapterBalance[] adapterBalances;

}

struct ProtocolMetadata {

    string name;

    string description;

    string websiteURL;

    string iconURL;

    uint256 version;

}

struct AdapterBalance {

    AdapterMetadata metadata;

    FullTokenBalance[] balances;

}

struct AdapterMetadata {

    address adapterAddress;

    string adapterType; 

}

struct FullTokenBalance {

    TokenBalance base;

    TokenBalance[] underlying;

}

struct TokenBalance {

    TokenMetadata metadata;

    uint256 amount;

}

struct TokenMetadata {

    address token;

    string name;

    string symbol;

    uint8 decimals;

}

struct Component {

    address token;

    string tokenType;  

    uint256 rate;  

}

interface ERC20 {

    function approve(address, uint256) external returns (bool);

    function transfer(address, uint256) external returns (bool);

    function transferFrom(address, address, uint256) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address) external view returns (uint256);

}

interface TokenAdapter {



    

    function getMetadata(address token) external view returns (TokenMetadata memory);



    

    function getComponents(address token) external view returns (Component[] memory);

}

interface TheProtocol {

    function loanPoolToUnderlying(address iToken)

        external

        view

        returns(address);

}

interface IToken {

    function tokenPrice()

        external

        view

        returns(uint256);

}

contract BzxTokenAdapter is TokenAdapter {

    

    address internal constant bZxContract = 0xD8Ee69652E4e4838f2531732a46d1f7F584F0b7f;



    

    function getMetadata(address token) external view override returns (TokenMetadata memory) {

        return TokenMetadata({

            token: token,

            name: ERC20(token).name(),

            symbol: ERC20(token).symbol(),

            decimals: ERC20(token).decimals()

        });

    }



    

    function getComponents(address token) external view override returns (Component[] memory) {

        Component[] memory underlyingTokens = new Component[](1);



        underlyingTokens[0] = Component({

            token: TheProtocol(bZxContract).loanPoolToUnderlying(token),

            tokenType: "ERC20",

            rate: IToken(token).tokenPrice()

        });



        return underlyingTokens;

    }

}
