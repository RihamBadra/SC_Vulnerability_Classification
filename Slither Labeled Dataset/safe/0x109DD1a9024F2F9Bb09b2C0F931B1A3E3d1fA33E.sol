






pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address to, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity ^0.8.1;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        return account.code.length > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}






pragma solidity ^0.8.0;



library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        
        
        
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}






pragma solidity ^0.8.0;


interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}






pragma solidity ^0.8.0;


abstract contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}




pragma solidity ^0.8.13;




contract LiquidityBridgeERC is ReentrancyGuard {
  using SafeERC20 for IERC20;

  
  
  
  mapping(address => address) acceptedTokens;
  address[] public acceptedTokensKeys;
  address public owner;

  address immutable weth;

  uint256 public feeAmount;
  uint256 public feeAccrued;
  address public feeAddr;

  
  event DepositERC(
    address indexed sender,
    string tokenName,
    address tokenAddress,
    uint256 amount,
    string cardanoAddress
  );

  event FeeConfigUpdated(address indexed user, uint256 feeAmount, address feeAddr);

  event FeeWithdrawn(address user, uint256 amount);

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  modifier onlyOwner() {
    require(msg.sender == owner, "Unauthorized");
    _;
  }

  constructor(address _weth, uint256 _feeAmount, address _feeAddr) {
    weth = _weth;
    owner = msg.sender;
    feeAmount = _feeAmount;
    feeAddr = _feeAddr;
  }

  function acceptedTokensKeysLength() external view returns (uint256) {
    return acceptedTokensKeys.length;
  }

  function voidAddress(address token) external view returns (address) {
    return acceptedTokens[token];
  }

  function isWhitelisted(address token) external view returns (bool) {
    return acceptedTokens[token] != address(0);
  }

  
  
  function updateConfig(
    address[] calldata tokenAddresses,
    address[] calldata tokenDests,
    uint256[] calldata indexesToRemove
  ) external onlyOwner {

    for (uint256 i = 0; i < indexesToRemove.length; i++) {
      uint256 index = indexesToRemove[i];
      require(index < acceptedTokensKeys.length, "Index out of bounds");
      address token = acceptedTokensKeys[index];
      delete acceptedTokens[token];
      acceptedTokensKeys[index] = acceptedTokensKeys[acceptedTokensKeys.length - 1];
      acceptedTokensKeys.pop();
    }

    for (uint256 i = 0; i < tokenAddresses.length; i++) {
      address token = tokenAddresses[i];
      address tokenDest = tokenDests[i];

      require(tokenDest != address(0), "Dest token is zero address");

      acceptedTokens[token] = tokenDest;
      acceptedTokensKeys.push(token);
    }
  }

  
  function _deposit(address tokenERC, uint amount, string memory cardanoAddress) private {

    
    require(acceptedTokens[tokenERC] != address(0), "Token not whitelisted");
    
    require(amount > 0, "No tokens provided");

    emit DepositERC(
      msg.sender,
      IERC20Metadata(tokenERC).symbol(),
      tokenERC,
      amount,
      cardanoAddress
    );
  }

  
  function depositEth(string calldata cardanoAddress) external payable nonReentrant {
    require(msg.value > feeAmount, "Invalid fee");

    uint256 depositAmount;

    unchecked {
      depositAmount = msg.value - feeAmount;
    }

    
    (bool success, ) = payable(acceptedTokens[weth]).call{value: depositAmount}("");
    require(success, "Deposit eth failed");

    _deposit(weth, depositAmount, cardanoAddress);

    unchecked {
      feeAccrued += feeAmount;
    }
  }

  
  function depositERC(address token, string calldata cardanoAddress) external payable nonReentrant {
    require(msg.value == feeAmount, "Invalid fee");

    IERC20 tokenERC = IERC20(token);
    
    uint256 amount = tokenERC.allowance(msg.sender, address(this));
    tokenERC.safeTransferFrom(msg.sender, acceptedTokens[token], amount);

    _deposit(token, amount, cardanoAddress);

    unchecked {
      feeAccrued += feeAmount;
    }
  }

  function updateFeeConfig(uint256 _feeAmount, address _feeAddr) external onlyOwner {
    feeAmount = _feeAmount;
    feeAddr = _feeAddr;
    emit FeeConfigUpdated(msg.sender, _feeAmount, _feeAddr);
  }

  function transferOwnership(address newOwner) external onlyOwner {
    require(newOwner != address(0), "New owner is zero address");
    address oldOwner = owner;


    if (newOwner != oldOwner) {
      owner = newOwner;
    }

    emit OwnershipTransferred(oldOwner, newOwner);
  }

  function withdrawFee() external nonReentrant {
    if (feeAccrued > 0) {
      uint256 amount = feeAccrued;
      feeAccrued = 0;
      (bool success, ) = payable(feeAddr).call{value: amount}("");
      require(success, "Withdraw failed");
      emit FeeWithdrawn(msg.sender, amount);
    }
  }
}