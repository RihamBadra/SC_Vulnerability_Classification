pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

interface ILimitStorage {



    struct Limit {

        

        uint128 current;

        

        uint128 pending;

        

        uint64 changeAfter;

    }



    struct DailySpent {

        

        uint128 alreadySpent;

        

        uint64 periodEnd;

    }



    function setLimit(address _wallet, Limit memory _limit) external;



    function getLimit(address _wallet) external view returns (Limit memory _limit);



    function setDailySpent(address _wallet, DailySpent memory _dailySpent) external;



    function getDailySpent(address _wallet) external view returns (DailySpent memory _dailySpent);



    function setLimitAndDailySpent(address _wallet, Limit memory _limit, DailySpent memory _dailySpent) external;



    function getLimitAndDailySpent(address _wallet) external view returns (Limit memory _limit, DailySpent memory _dailySpent);

}

interface ILockStorage {

    function isLocked(address _wallet) external view returns (bool);



    function getLock(address _wallet) external view returns (uint256);



    function getLocker(address _wallet) external view returns (address);



    function setLock(address _wallet, address _locker, uint256 _releaseAfter) external;

}

interface IModule {

    

    function init(address _wallet) external;



    	

    function addModule(address _wallet, address _module) external;

}

interface IModuleRegistry {

    function registerModule(address _module, bytes32 _name) external;



    function deregisterModule(address _module) external;



    function registerUpgrader(address _upgrader, bytes32 _name) external;



    function deregisterUpgrader(address _upgrader) external;



    function recoverToken(address _token) external;



    function moduleInfo(address _module) external view returns (bytes32);



    function upgraderInfo(address _upgrader) external view returns (bytes32);



    function isRegisteredModule(address _module) external view returns (bool);



    function isRegisteredModule(address[] calldata _modules) external view returns (bool);



    function isRegisteredUpgrader(address _upgrader) external view returns (bool);

}

interface IVersionManager {

    

    function isFeatureAuthorised(address _wallet, address _feature) external view returns (bool);



    

    function checkAuthorisedFeatureAndInvokeWallet(

        address _wallet,

        address _to,

        uint256 _value,

        bytes calldata _data

    ) external returns (bytes memory _res);



    



    

    function setOwner(address _wallet, address _newOwner) external;



    

    function invokeStorage(address _wallet, address _storage, bytes calldata _data) external;



    

    function upgradeWallet(address _wallet, uint256 _toVersion) external;

 

}

interface IWallet {

    

    function owner() external view returns (address);



    

    function modules() external view returns (uint);



    

    function setOwner(address _newOwner) external;



    

    function authorised(address _module) external view returns (bool);



    

    function enabled(bytes4 _sig) external view returns (address);



    

    function authoriseModule(address _module, bool _value) external;



    

    function enableStaticCall(address _module, bytes4 _method) external;

}

contract UpgraderToVersionManager is IModule {



    IModuleRegistry private registry;

    ILockStorage private lockStorage;

    address[] public toDisable;

    address public versionManager;



    



    constructor(

        IModuleRegistry _registry,

        ILockStorage _lockStorage,

        address[] memory _toDisable,

        address _versionManager

    )

        public

    {

        registry = _registry;

        lockStorage = _lockStorage;

        toDisable = _toDisable;

        versionManager = _versionManager;

    }



    



    

    function init(address _wallet) public override {

        require(msg.sender == _wallet, "SU: only wallet can call init");

        require(!lockStorage.isLocked(_wallet), "SU: wallet locked");

        require(registry.isRegisteredModule(versionManager), "SU: VersionManager not registered");



        

        IWallet(_wallet).authoriseModule(versionManager, true);



        

        IVersionManager(versionManager).upgradeWallet(_wallet, 1);



        

        for (uint256 i = 0; i < toDisable.length; i++) {

            IWallet(_wallet).authoriseModule(toDisable[i], false);

        }

        

        IWallet(_wallet).authoriseModule(address(this), false);

    }



    

    function addModule(address _wallet, address _module) external override {}

}
