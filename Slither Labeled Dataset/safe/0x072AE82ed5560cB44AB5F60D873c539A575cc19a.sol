





pragma solidity >=0.6.0 <0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}





pragma solidity >=0.6.0 <0.8.0;


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}





pragma solidity >=0.6.0 <0.8.0;


library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}





pragma solidity >=0.6.0 <0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}





pragma solidity >=0.6.2 <0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}





pragma solidity >=0.6.0 <0.8.0;





library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}




pragma solidity 0.6.11;
pragma experimental ABIEncoderV2;





struct Whitelist {
    address wallet;
    uint256 amount;
    uint256 rewardedAmount;
    uint256 tier;
    bool whitelist;
    bool redeemed;
}

struct Tier {
    uint256 paidAmount;
    uint256 maxPayableAmount;
}

contract Ignition is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    mapping(address => Whitelist) public whitelist;
    mapping(uint256 => Tier) public tiers;
    IERC20 private _token;
    IERC20 private _paidToken;
    bool public isFinalized;
    uint256 public soldAmount;
    uint256 public totalRaise;

    constructor() public {
        
        tiers[1] = Tier(1000000000000000000000, 50077620311482800);
        tiers[2] = Tier(1000000000000000000000, 100155240622966000);
        tiers[3] = Tier(1000000000000000000000, 150232860934448000);
        tiers[4] = Tier(1000000000000000000000, 200310481245931000);
        tiers[5] = Tier(1000000000000000000000, 250388101557414000);
        tiers[6] = Tier(1000000000000000000000, 300465721868897000);
        tiers[7] = Tier(1000000000000000000000, 350543342180380000);
        tiers[8] = Tier(1000000000000000000000, 400620962491862000);
        tiers[9] = Tier(1000000000000000000000, 450698582803345000);
        tiers[10] = Tier(1000000000000000000000, 500776203114828000);
        tiers[11] = Tier(1000000000000000000000, 550853823426311000);
        tiers[12] = Tier(1000000000000000000000, 600931443737794000);
        tiers[13] = Tier(1000000000000000000000, 651009064049276000);
        tiers[14] = Tier(1000000000000000000000, 701086684360759000);
        tiers[15] = Tier(1000000000000000000000, 751164304672242000);
        tiers[16] = Tier(1000000000000000000000, 801241924983725000);
        tiers[33] = Tier(1000000000000000000000, 1652561470278930000);
    }

    
    function setTokenAddress(IERC20 token) external onlyOwner returns (bool) {
        _token = token;
        return true;
    }

    
    function setPAIDTokenAddress(IERC20 token)
        external
        onlyOwner
        returns (bool)
    {
        _paidToken = token;
        return true;
    }

    
    function addWhitelist(address[] memory addresses, uint256 tier)
        external
        onlyOwner
        returns (bool)
    {
        uint256 addressesLength = addresses.length;

        for (uint256 i = 0; i < addressesLength; i++) {
            address address_ = addresses[i];
            Whitelist memory whitelist_ =
                Whitelist(address_, 0, 0, tier, true, false);
            whitelist[address_] = whitelist_;
        }

        return true;
    }

    
    function getContractAddress() public view returns (address) {
        return address(this);
    }

    
    function getTotalToken() public view returns (uint256) {
        return _token.balanceOf(getContractAddress());
    }

    
    function getStartTime() public pure returns (uint256) {
        return 1617926340; 
    }

    
    function isStart() public view returns (bool) {
        uint256 startTime = getStartTime();
        uint256 timestamp = block.timestamp;

        return timestamp > startTime;
    }

    function muldiv(uint256 x, uint256 yPercentage)
        internal
        pure
        returns (uint256 c)
    {
        return x.mul(yPercentage).div(10e10);
    }

    
    function getRate() public view returns (uint256) {
        return 16640833333333300000000;
    }

    
    function calculateAmount(uint256 amount) public view returns (uint256) {
        uint256 rate = getRate();
        uint256 oneEther = 1 ether;

        uint256 etherMul = muldiv(amount, rate).div(10e6);

        return etherMul;
    }

    
    function finalize() external onlyOwner returns (bool) {
        isFinalized = true;
        return isFinalized;
    }

    
    function redeemTokens() external returns (bool) {
        require(whitelist[_msgSender()].whitelist, "Sender isn't in whitelist");

        Whitelist memory whitelistWallet = whitelist[_msgSender()];

        require(isFinalized, "Sale isn't finalized yet");
        require(!whitelistWallet.redeemed, "Redeemed before");
        require(whitelistWallet.rewardedAmount > 0, "No token");

        whitelist[_msgSender()].redeemed = true;
        _token.safeTransfer(
            whitelistWallet.wallet,
            whitelistWallet.rewardedAmount
        );
    }

    
    function getWhitelist(address _address)
        public
        view
        returns (
            address,
            uint256,
            uint256,
            bool,
            bool,
            uint256
        )
    {
        if (whitelist[_address].whitelist) {
            Whitelist memory whitelistWallet = whitelist[_address];
            return (
                whitelistWallet.wallet,
                whitelistWallet.amount,
                whitelistWallet.rewardedAmount,
                whitelistWallet.redeemed,
                true,
                whitelistWallet.tier
            );
        }

        return (address(0), 0, 0, false, false, 0);
    }

    
    function controlPAIDTokens() public view returns (bool) {
        address sender = _msgSender();
        uint256 tier = whitelist[sender].tier;

        return _paidToken.balanceOf(sender) >= tiers[tier].paidAmount;
    }

    
    fallback() external {
        revert();
    }

    function withdraw() external onlyOwner {
        
        (bool success, ) = _msgSender().call{value: address(this).balance}("");
        require(
            success,
            "Address: unable to send value, recipient may have reverted"
        );
    }

    
    function buyTokens() external payable {
        address sender = _msgSender();
        uint256 value = msg.value;

        require(isStart(), "Sale isn't started yet");
        require(!isFinalized, "Sale is finished");
        require(whitelist[sender].whitelist, "You're not in whitelist");

        uint256 tier = whitelist[sender].tier;

        require(
            value <= tiers[tier].maxPayableAmount,
            "You can't send ether more than max payable amount"
        );
        require(controlPAIDTokens(), "You dont have enough paid token");

        uint256 totalToken = getTotalToken();
        uint256 rewardedAmount = calculateAmount(value);

        require(
            soldAmount.add(rewardedAmount) <= totalToken,
            "Insufficient token"
        );

        whitelist[sender].amount = value;
        whitelist[sender].rewardedAmount = rewardedAmount;
        soldAmount = soldAmount.add(rewardedAmount);
        totalRaise = totalRaise.add(value);
    }
}