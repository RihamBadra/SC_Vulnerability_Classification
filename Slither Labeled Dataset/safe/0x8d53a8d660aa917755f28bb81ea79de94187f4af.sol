pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

interface ERC20 {

    function approve(address, uint256) external returns (bool);

    function transfer(address, uint256) external returns (bool);

    function transferFrom(address, address, uint256) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address) external view returns (uint256);

}

interface ProtocolAdapter {



    

    function adapterType() external pure returns (string memory);



    

    function tokenType() external pure returns (string memory);



    

    function getBalance(address token, address account) external view returns (uint256);

}

interface ValidatorShare {

    function getLiquidRewards(address) external view returns (uint256);

}

contract MaticStakingAdapter is ProtocolAdapter {



    string public constant override adapterType = "Asset";



    string public constant override tokenType = "ERC20";



    address internal constant VALIDATOR_SHARE = 0xD9AeF0814e7eCBB4447eab08EDe33b6EBC29F842;



    

    function getBalance(address, address account) external view override returns (uint256) {

        uint256 totalBalance = 0;

        totalBalance += ERC20(VALIDATOR_SHARE).balanceOf(account);

        totalBalance += ValidatorShare(VALIDATOR_SHARE).getLiquidRewards(account);

        return totalBalance;

    }

}
