







pragma solidity >=0.6.0 <0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}




pragma solidity >=0.6.0 <0.8.0;


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}




pragma solidity >=0.6.0 <0.8.0;




pragma solidity >=0.6.0 <0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}




pragma solidity >=0.6.0 <0.8.0;


library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}




pragma solidity >=0.6.2 <0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




pragma solidity 0.6.8;


interface IERC20 {
    
    event Transfer(address indexed _from, address indexed _to, uint256 _value);

    
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address owner) external view returns (uint256);

    
    function transfer(address to, uint256 value) external returns (bool);

    
    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);

    
    function approve(address spender, uint256 value) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);
}




pragma solidity 0.6.8;


interface IERC20Detailed {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}




pragma solidity 0.6.8;


interface IERC20Allowance {
    
    function increaseAllowance(address spender, uint256 value) external returns (bool);

    
    function decreaseAllowance(address spender, uint256 value) external returns (bool);
}




pragma solidity 0.6.8;


interface IERC20SafeTransfers {
    
    function safeTransfer(
        address to,
        uint256 amount,
        bytes calldata data
    ) external returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 amount,
        bytes calldata data
    ) external returns (bool);
}




pragma solidity 0.6.8;


interface IERC20MultiTransfers {
    
    function multiTransfer(address[] calldata recipients, uint256[] calldata amounts) external returns (bool);

    
    function multiTransferFrom(
        address from,
        address[] calldata recipients,
        uint256[] calldata amounts
    ) external returns (bool);
}




pragma solidity 0.6.8;


interface IERC20Metadata {
    
    function tokenURI() external view returns (string memory);
}




pragma solidity 0.6.8;


interface IERC20Permit {
    
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external;

    
    function nonces(address owner) external view returns (uint256);

    
    
    function DOMAIN_SEPARATOR() external view returns (bytes32);
}




pragma solidity 0.6.8;


interface IERC20Receiver {
    
    function onERC20Received(
        address sender,
        address from,
        uint256 value,
        bytes calldata data
    ) external returns (bytes4);
}




pragma solidity 0.6.8;













contract ERC20 is IERC165, Context, IERC20, IERC20Detailed, IERC20Metadata, IERC20Allowance, IERC20MultiTransfers, IERC20SafeTransfers, IERC20Permit {
    using Address for address;

    
    bytes4 internal constant _ERC20_RECEIVED = 0x4fc35859;

    
    bytes32 internal constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;

    
    bytes32 public immutable override DOMAIN_SEPARATOR;

    mapping(address => uint256) public override nonces;

    string internal _name;
    string internal _symbol;
    uint8 internal immutable _decimals;
    string internal _tokenURI;

    mapping(address => uint256) internal _balances;
    mapping(address => mapping(address => uint256)) internal _allowances;
    uint256 internal _totalSupply;

    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals,
        string memory version,
        string memory tokenURI
    ) internal {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
        _tokenURI = tokenURI;

        uint256 chainId;
        assembly {
            chainId := chainid()
        }

        DOMAIN_SEPARATOR = keccak256(
            abi.encode(
                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),
                keccak256(bytes(name)),
                keccak256(bytes(version)),
                chainId,
                address(this)
            )
        );
    }

    

    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return
            interfaceId == type(IERC165).interfaceId ||
            interfaceId == type(IERC20).interfaceId ||
            interfaceId == type(IERC20Detailed).interfaceId ||
            interfaceId == 0x06fdde03 || 
            interfaceId == 0x95d89b41 || 
            interfaceId == 0x313ce567 || 
            interfaceId == type(IERC20Metadata).interfaceId ||
            interfaceId == type(IERC20Allowance).interfaceId ||
            interfaceId == type(IERC20MultiTransfers).interfaceId ||
            interfaceId == type(IERC20SafeTransfers).interfaceId ||
            interfaceId == type(IERC20Permit).interfaceId;
    }

    

    
    function name() public view override returns (string memory) {
        return _name;
    }

    
    function symbol() public view override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view override returns (uint8) {
        return _decimals;
    }

    

    
    function tokenURI() public view override returns (string memory) {
        return _tokenURI;
    }

    

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        if (owner == spender) {
            return type(uint256).max;
        }
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 value) public virtual override returns (bool) {
        _approve(_msgSender(), spender, value);
        return true;
    }

    

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {
        require(spender != address(0), "ERC20: zero address");
        address owner = _msgSender();
        uint256 allowance_ = _allowances[owner][spender];
        uint256 newAllowance = allowance_ + addedValue;
        require(newAllowance >= allowance_, "ERC20: allowance overflow");
        _allowances[owner][spender] = newAllowance;
        emit Approval(owner, spender, newAllowance);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {
        require(spender != address(0), "ERC20: zero address");
        _decreaseAllowance(_msgSender(), spender, subtractedValue);
        return true;
    }

    
    function transfer(address to, uint256 value) public virtual override returns (bool) {
        _transfer(_msgSender(), to, value);
        return true;
    }

    
    function transferFrom(
        address from,
        address to,
        uint256 value
    ) public virtual override returns (bool) {
        _transferFrom(_msgSender(), from, to, value);
        return true;
    }

    

    
    function multiTransfer(address[] calldata recipients, uint256[] calldata amounts) external virtual override returns (bool) {
        uint256 length = recipients.length;
        require(length == amounts.length, "ERC20: inconsistent arrays");
        address sender = _msgSender();
        for (uint256 i = 0; i != length; ++i) {
            _transfer(sender, recipients[i], amounts[i]);
        }
        return true;
    }

    
    function multiTransferFrom(
        address from,
        address[] calldata recipients,
        uint256[] calldata values
    ) external virtual override returns (bool) {
        uint256 length = recipients.length;
        require(length == values.length, "ERC20: inconsistent arrays");
        uint256 total;
        for (uint256 i = 0; i != length; ++i) {
            uint256 value = values[i];
            _transfer(from, recipients[i], value);
            total += value; 
        }

        _decreaseAllowance(from, _msgSender(), total);

        return true;
    }

    

    
    function safeTransfer(
        address to,
        uint256 amount,
        bytes calldata data
    ) external virtual override returns (bool) {
        address sender = _msgSender();
        _transfer(sender, to, amount);
        if (to.isContract()) {
            require(IERC20Receiver(to).onERC20Received(sender, sender, amount, data) == _ERC20_RECEIVED, "ERC20: transfer refused");
        }
        return true;
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 amount,
        bytes calldata data
    ) external virtual override returns (bool) {
        address sender = _msgSender();
        _transferFrom(sender, from, to, amount);
        if (to.isContract()) {
            require(IERC20Receiver(to).onERC20Received(sender, from, amount, data) == _ERC20_RECEIVED, "ERC20: transfer refused");
        }
        return true;
    }

    

    
    function permit(
        address owner,
        address spender,
        uint256 value,
        uint256 deadline,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) external virtual override {
        require(owner != address(0), "ERC20: zero address owner");
        require(block.timestamp <= deadline, "ERC20: expired permit");
        bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));
        bytes32 hash = keccak256(abi.encodePacked("\x19\x01", DOMAIN_SEPARATOR, hashStruct));
        address signer = ecrecover(hash, v, r, s);
        require(signer != address(0) && signer == owner, "ERC20: invalid permit");
        _approve(owner, spender, value);
    }

    

    function _approve(
        address owner,
        address spender,
        uint256 value
    ) internal {
        require(spender != address(0), "ERC20: zero address");
        _allowances[owner][spender] = value;
        emit Approval(owner, spender, value);
    }

    function _decreaseAllowance(
        address owner,
        address spender,
        uint256 subtractedValue
    ) internal {
        if (owner == spender) return;

        uint256 allowance_ = _allowances[owner][spender];
        if (allowance_ != type(uint256).max && subtractedValue != 0) {
            
            uint256 newAllowance = allowance_ - subtractedValue;
            require(newAllowance <= allowance_, "ERC20: insufficient allowance");
            _allowances[owner][spender] = newAllowance;
            allowance_ = newAllowance;
        }
        emit Approval(owner, spender, allowance_);
    }

    function _transfer(
        address from,
        address to,
        uint256 value
    ) internal virtual {
        require(to != address(0), "ERC20: zero address");
        uint256 balance = _balances[from];
        require(balance >= value, "ERC20: insufficient balance");
        _balances[from] = balance - value;
        _balances[to] += value;
        emit Transfer(from, to, value);
    }

    function _transferFrom(
        address sender,
        address from,
        address to,
        uint256 value
    ) internal {
        _decreaseAllowance(from, sender, value);
        _transfer(from, to, value);
    }

    function _mint(address to, uint256 value) internal virtual {
        require(to != address(0), "ERC20: zero address");
        uint256 supply = _totalSupply;
        uint256 newSupply = supply + value;
        require(newSupply >= supply, "ERC20: supply overflow");
        _totalSupply = newSupply;
        _balances[to] += value; 
        emit Transfer(address(0), to, value);
    }

    function _batchMint(address[] memory recipients, uint256[] memory values) internal virtual {
        uint256 length = recipients.length;
        require(length == values.length, "ERC20: inconsistent arrays");
        uint256 supply = _totalSupply;
        for (uint256 i = 0; i != length; ++i) {
            address to = recipients[i];
            require(to != address(0), "ERC20: zero address");
            uint256 value = values[i];
            uint256 newSupply = supply + value;
            require(newSupply >= supply, "ERC20: supply overflow");
            supply = newSupply;
            _balances[to] += value; 
            emit Transfer(address(0), to, value);
        }
        _totalSupply = supply;
    }

    function _burn(address from, uint256 value) internal virtual {
        uint256 balance = _balances[from];
        require(balance >= value, "ERC20: insufficient balance");
        _balances[from] = balance - value;
        _totalSupply -= value; 
        emit Transfer(from, address(0), value);
    }

    function _burnFrom(address from, uint256 value) internal virtual {
        _decreaseAllowance(from, _msgSender(), value);
        _burn(from, value);
    }
}




pragma solidity 0.6.8;


interface IERC20Burnable {
    
    function burn(uint256 value) external returns (bool);

    
    function burnFrom(address from, uint256 value) external returns (bool);
}




pragma solidity 0.6.8;



contract ERC20Burnable is ERC20, IERC20Burnable {
    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals,
        string memory version,
        string memory tokenURI
    ) public ERC20(name, symbol, decimals, version, tokenURI) {}

    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC20Burnable).interfaceId || super.supportsInterface(interfaceId);
    }

    
    function burn(uint256 amount) public virtual override returns (bool) {
        _burn(_msgSender(), amount);
        return true;
    }

    
    function burnFrom(address from, uint256 value) public virtual override returns (bool) {
        _burnFrom(from, value);
        return true;
    }
}




pragma solidity 0.6.8;



contract TOWERChest is ERC20Burnable, Ownable {
    
    constructor(
        string memory name,
        string memory symbol,
        uint8 decimals,
        string memory version,
        string memory tokenURI,
        address holder,
        uint256 totalSupply
    ) public ERC20Burnable(name, symbol, decimals, version, tokenURI) {
        _mint(holder, totalSupply);
    }

    
    function updateTokenURI(string calldata tokenURI_) external {
        require(_msgSender() == owner(), "TOWERChest: not the owner");
        _tokenURI = tokenURI_;
    }
}