pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

interface ProtocolAdapter {



    

    function adapterType() external pure returns (string memory);



    

    function tokenType() external pure returns (string memory);



    

    function getBalance(address token, address account) external view returns (uint256);

}

interface DODOMine {

    function getUserLpBalance(address, address) external view returns (uint256);

    function getAllPendingReward(address) external view returns (uint256);

}

contract DodoStakingAdapter is ProtocolAdapter {



    string public constant override adapterType = "Asset";



    string public constant override tokenType = "ERC20";



    address internal constant DODO = 0x43Dfc4159D86F3A37A5A4B3D4580b888ad7d4DDd;

    address internal constant DODO_MINE = 0xaeD7384F03844Af886b830862FF0a7AFce0a632C;



    

    function getBalance(address token, address account) external view override returns (uint256) {

        if (token == DODO) {

            uint256 totalBalance = 0;



            totalBalance += DODOMine(DODO_MINE).getAllPendingReward(account);

            totalBalance += DODOMine(DODO_MINE).getUserLpBalance(token, account);



            return totalBalance;

        } else {

            return DODOMine(DODO_MINE).getUserLpBalance(token, account);

        }

    }

}
