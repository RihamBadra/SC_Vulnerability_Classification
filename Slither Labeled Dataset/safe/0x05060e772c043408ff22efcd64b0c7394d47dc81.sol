

pragma solidity ^0.5.0;



interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.5.0;



interface IRewardDistributionRecipient {
    function notifyRewardAmount(uint256 reward) external;

    
    function rewardToken() external view returns (IERC20 token);
}



pragma solidity 0.5.16;




contract RewardsInitiator {
    string constant private ERROR_TOO_EARLY = "REWARDS_CTRL:TOO_EARLY";

    uint256 constant public earliestStartTime = 1603983600; 

    
    IRewardDistributionRecipient uniPool = IRewardDistributionRecipient(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    IRewardDistributionRecipient bptPool = IRewardDistributionRecipient(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

    function initiate() external {
        require(block.timestamp >= earliestStartTime, ERROR_TOO_EARLY);

        uint256 uniRewardBalance = uniRewardBalance();
        uniPool.notifyRewardAmount(uniRewardBalance);

        uint256 bptRewardBalance = bptRewardBalance();
        bptPool.notifyRewardAmount(bptRewardBalance);
    }

    function uniRewardBalance() public view returns (uint256) {
        IERC20 uniRewardToken = uniPool.rewardToken();
        return uniRewardToken.balanceOf(address(uniPool));
    }

    function bptRewardBalance() public view returns (uint256) {
        IERC20 bptRewardToken = bptPool.rewardToken();
        return bptRewardToken.balanceOf(address(bptPool));
    }
}