pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

interface ERC20 {

    function approve(address, uint256) external returns (bool);

    function transfer(address, uint256) external returns (bool);

    function transferFrom(address, address, uint256) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address) external view returns (uint256);

}

interface ProtocolAdapter {



    

    function adapterType() external pure returns (string memory);



    

    function tokenType() external pure returns (string memory);



    

    function getBalance(address token, address account) external view returns (uint256);

}

contract SwerveStakingAdapter is ProtocolAdapter {



    string public constant override adapterType = "Asset";



    string public constant override tokenType = "ERC20";



    address internal constant SWUSD = 0x77C6E4a580c0dCE4E5c7a17d0bc077188a83A059;



    address internal constant SWUSD_GAUGE = 0xb4d0C929cD3A1FbDc6d57E7D3315cF0C4d6B4bFa;



    

    function getBalance(address token, address account) external view override returns (uint256) {

        if (token == SWUSD) {

            return ERC20(SWUSD_GAUGE).balanceOf(account);

        } else {

            return 0;

        }

    }

}
