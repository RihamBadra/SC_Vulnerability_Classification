pragma solidity 0.7.1;
pragma experimental ABIEncoderV2;

struct PoolInfo {

    address swap;       

    address deposit;    

    uint256 totalCoins; 

    string name;        

}

abstract contract Ownable {



    modifier onlyOwner {

        require(msg.sender == owner_, "O: only owner");

        _;

    }



    modifier onlyPendingOwner {

        require(msg.sender == pendingOwner_, "O: only pending owner");

        _;

    }



    address private owner_;

    address private pendingOwner_;



    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);



    

    constructor() {

        owner_ = msg.sender;

        emit OwnershipTransferred(address(0), msg.sender);

    }



    

    function proposeOwnership(address newOwner) external onlyOwner {

        require(newOwner != address(0), "O: empty newOwner");

        require(newOwner != owner_, "O: equal to owner_");

        require(newOwner != pendingOwner_, "O: equal to pendingOwner_");

        pendingOwner_ = newOwner;

    }



    

    function acceptOwnership() external onlyPendingOwner {

        emit OwnershipTransferred(owner_, msg.sender);

        owner_ = msg.sender;

        delete pendingOwner_;

    }



    

    function owner() external view returns (address) {

        return owner_;

    }



    

    function pendingOwner() external view returns (address) {

        return pendingOwner_;

    }

}

contract CurveRegistry is Ownable {



    mapping (address => PoolInfo) internal poolInfo_;



    function setPoolsInfo(

        address[] memory tokens,

        PoolInfo[] memory poolsInfo

    )

        external

        onlyOwner

    {

        uint256 length = tokens.length;

        for (uint256 i = 0; i < length; i++) {

            setPoolInfo(tokens[i], poolsInfo[i]);

        }

    }



    function setPoolInfo(

        address token,

        PoolInfo memory poolInfo

    )

        internal

    {

        poolInfo_[token] = poolInfo;

    }



    function getPoolInfo(address token) external view returns (PoolInfo memory) {

        return poolInfo_[token];

    }

}
