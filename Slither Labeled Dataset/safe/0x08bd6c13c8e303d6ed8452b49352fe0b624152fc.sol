

pragma solidity ^0.8.0;







library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            
            
            
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}



interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}



library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        
        
        
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



abstract contract Initializable {
    
    bool private _initialized;

    
    bool private _initializing;

    
    modifier initializer() {
        require(_initializing || !_initialized, "Initializable: contract is already initialized");

        bool isTopLevelCall = !_initializing;
        if (isTopLevelCall) {
            _initializing = true;
            _initialized = true;
        }

        _;

        if (isTopLevelCall) {
            _initializing = false;
        }
    }
}

contract TimelockInvestors is Initializable {

    using SafeERC20 for IERC20;
    using SafeMath for uint256;

    struct Investor {
        address account; 
        uint256 amount; 
        uint256 released; 
        bool available;
    }

    struct Strategy {
        uint256 firstReleaseBegin;  
        uint256 firstReleaseScale;  

        uint256 intervalReleaseBegin;   
        uint256 intervalReleaseScale;   
        uint256 intervalReleaseTimes;   
        uint256 intervalReleasePeriod;  

        uint256 lastReleaseBegin;   
        uint256 lastReleaseScale;   
    }

    address public _owner;
    IERC20 public token;
    uint256 public startTimestamp;

    mapping(address => Investor) public investors;
    mapping(address => Strategy) public accountStrategy;

    event Released(address account, uint256 amount);

    function initialize(address _token, uint256 _startTimestamp) public initializer {
        token = IERC20(_token);
        _owner = msg.sender;
        startTimestamp = _startTimestamp;
    }


    function setStartTimestamp(uint256 _startTimestamp) external {
        require(_owner == msg.sender, "only owner");
        startTimestamp = _startTimestamp;
    }

    function updateInvestor(Investor memory _investor) public {
        require(_owner == msg.sender, "only owner");
        investors[_investor.account] = _investor;
    }

    function updateAccountStrategy(address account, Strategy memory strategy) public {
        require(_owner == msg.sender, "only owner");
        accountStrategy[account] = strategy;
    }

    function setInvestorAndStrategy(Investor[] memory _investors, Strategy[] memory _strategies) public {
        require(_owner == msg.sender, "only owner");
        require(_investors.length == _strategies.length, "length not match");

        for (uint256 i = 0; i < _investors.length; i++) {
            Investor memory investor = _investors[i];
            Strategy memory strategy = _strategies[i];

            investors[investor.account] = investor;
            accountStrategy[investor.account] = strategy;
        }
    }

    function blockTimestamp() public view virtual returns (uint256) {
        return block.timestamp;
    }

    
    function getInvestor(address account) public view returns (Investor memory){
        return investors[account];
    }

    function checkReleased(address account) external view returns (uint256) {
        return getInvestor(account).released;
    }

    function checkUnReleased(address account) external view returns (uint256) {
        Investor memory investor = getInvestor(account);
        return investor.amount.sub(investor.released);
    }

    function checkActiveRelease(address account) public view returns (uint256){
        uint256 now = blockTimestamp();
        Strategy memory strategy = accountStrategy[account];
        Investor memory investor = getInvestor(account);

        uint res = 0;
        if (now < strategy.firstReleaseBegin) {
            return res;
        }
        
        res = investor.amount.mul(strategy.firstReleaseScale).div(100);

        
        for (uint i = 0; i < strategy.intervalReleaseTimes; i++) {
            uint distributeTime = strategy.intervalReleaseBegin + strategy.intervalReleasePeriod * i;
            if (distributeTime > now) {
                return res.sub(investor.released);
            }
            uint tmp = investor.amount.mul(strategy.intervalReleaseScale).div(100);
            res = res.add(tmp);
        }

        
        if (now > strategy.lastReleaseBegin) {
            uint tmp = investor.amount.mul(strategy.lastReleaseScale).div(100);
            res = res.add(tmp);
        }

        return res.sub(investor.released);
    }


    function release() external {
        address account = msg.sender;
        Strategy memory strategy = accountStrategy[account];
        Investor storage investor = investors[account];

        require(account == investor.account, "error account");
        require(blockTimestamp() > startTimestamp, "too early to release");
        require(investor.available, "can't to release");

        uint256 vested = checkActiveRelease(account);
        require(vested > 0, "No tokens to release");

        investor.released = investor.released.add(vested);
        token.safeTransfer(account, vested);

        emit Released(account, vested);

    }


    function transfer(
        IERC20 token,
        address recipient,
        uint256 amount
    ) external {
        require(_owner == msg.sender, "only owner");
        token.safeTransfer(recipient, amount);
    }


}