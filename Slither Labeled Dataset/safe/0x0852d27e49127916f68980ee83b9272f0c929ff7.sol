



pragma solidity ^0.6.0;


contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}


pragma solidity ^0.6.11;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


pragma solidity ^0.6.11;
interface IERC20Token {
    function transfer(address to, uint256 value) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
    function totalSupply() external view returns (uint256);
    function balanceOf(address who) external view returns (uint256);
    function allowance(address owner, address spender) external view returns (uint256);
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


pragma solidity ^0.6.11;




contract Payment is ReentrancyGuard {
    
    using SafeMath for uint256;
    using SafeMath for uint8;
    address private owner;
    bool public initialized;
    address private tokenAddress;
    address private recipientAddress;
    uint8 private decimals;
    
    mapping(address => uint256) public balances;
    
    
    event OwnerSet(address indexed oldOwner, address indexed newOwner);
    
    
    modifier isOwner() {
        
        
        
        
        
        require(msg.sender == owner, "Caller is not owner");
        _;
    }
    
    
    function changeOwner(address newOwner) public isOwner {
        emit OwnerSet(owner, newOwner);
        owner = newOwner;
    }
    
    function changeDecimals(uint8 _decimals) public isOwner {
        decimals = _decimals;
    }
    
    
    function getOwner() external view returns (address) {
        return owner;
    }
    
    constructor(address _tokenAddress, address _recipientAddress) public {
        owner = msg.sender; 
        emit OwnerSet(address(0), owner);
        tokenAddress = _tokenAddress;
        recipientAddress = _recipientAddress;
        decimals = 18;
        initialized = true;
    }
    
    function deposit(uint64 amount) external {
        IERC20Token token = IERC20Token(tokenAddress);
        require(token.transferFrom(msg.sender, address(recipientAddress), uint256(amount) * 10 ** 18), 'Transfer ERROR');
        balances[msg.sender] = SafeMath.add(balances[msg.sender], uint256(amount) * 10 ** 18);
    }
    
    
    
    
    
    function spend(address user, uint256 amount) public isOwner {
        require(balances[user] >= uint256(amount) * 10 ** 18, 'Insufficient Balance');
        balances[user] = SafeMath.sub(balances[user], uint256(amount) * 10 ** 18);
    }
    
    function changePayee(address user) public isOwner {
       recipientAddress = user;
    }
    
    function changeToken(address token) public isOwner {
       tokenAddress = token;
    }
}