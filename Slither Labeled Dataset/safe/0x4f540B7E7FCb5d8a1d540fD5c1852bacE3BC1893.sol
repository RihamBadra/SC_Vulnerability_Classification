pragma solidity 0.5.17;

contract ERC20 {

    using SafeMath for uint256;



    mapping(address => uint256) private _balances;



    uint256 private _totalSupply;



    event Transfer(address indexed from, address indexed to, uint256 value);



    

    function totalSupply() public view returns (uint256) {

        return _totalSupply;

    }



    

    function balanceOf(address owner) public view returns (uint256) {

        return _balances[owner];

    }



    

    function transfer(address to, uint256 value) public returns (bool) {

        _transfer(msg.sender, to, value);

        return true;

    }



    

    function transferFrom(

        address from,

        address to,

        uint256 value

    ) public returns (bool) {

        _transfer(from, to, value);

        return true;

    }



    

    function _transfer(

        address from,

        address to,

        uint256 value

    ) internal {

        require(value <= _balances[from]);

        require(to != address(0));



        _balances[from] = _balances[from].sub(value);

        _balances[to] = _balances[to].add(value);

        emit Transfer(from, to, value);

    }



    

    function _mint(address account, uint256 value) internal {

        require(account != address(0));

        _totalSupply = _totalSupply.add(value);

        _balances[account] = _balances[account].add(value);

        emit Transfer(address(0), account, value);

    }

}

contract MyERC20 is ERC20 {

    string private _name;

    string private _symbol;

    uint8 private _decimals;



    constructor(

        string memory name,

        string memory symbol,

        uint8 decimals,

        uint256 cap

    ) public {

        _name = name;

        _symbol = symbol;

        _decimals = decimals;

        super._mint(msg.sender, cap);

    }



    

    function name() public view returns (string memory) {

        return _name;

    }



    

    function symbol() public view returns (string memory) {

        return _symbol;

    }



    

    function decimals() public view returns (uint8) {

        return _decimals;

    }

}

library SafeMath {

    

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        

        

        

        if (a == 0) {

            return 0;

        }



        uint256 c = a * b;

        require(c / a == b);



        return c;

    }



    

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b > 0); 

        uint256 c = a / b;

        



        return c;

    }



    

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b <= a);

        uint256 c = a - b;



        return c;

    }



    

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a);



        return c;

    }



    

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b != 0);

        return a % b;

    }

}
