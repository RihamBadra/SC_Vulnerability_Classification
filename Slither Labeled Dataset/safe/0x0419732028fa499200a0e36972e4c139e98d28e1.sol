

pragma solidity ^0.8.0;



 
 
 interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



       
       
       interface ERC721  {
           
           
           
           
           
           event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);

           
           
           
           
           event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);

           
           
           event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);

           
           
           
           
           
           function balanceOf(address _owner) external view returns (uint256);

           
           
           
           
           
           function ownerOf(uint256 _tokenId) external view returns (address);

           
           
           
           
           
           
           
           
           
           
           
           
           function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external payable;

           
           
           
           
           
           
           function safeTransferFrom(address _from, address _to, uint256 _tokenId) external payable;

           
           
           
           
           
           
           
           
           
           
           function transferFrom(address _from, address _to, uint256 _tokenId) external payable;

           
           
           
           
           
           
           function approve(address _approved, uint256 _tokenId) external payable;

           
           
           
           
           
           
           function setApprovalForAll(address _operator, bool _approved) external;

           
           
           
           
           function getApproved(uint256 _tokenId) external view returns (address);

           
           
           
           
           function isApprovedForAll(address _owner, address _operator) external view returns (bool);
       }

       interface ERC165 {
           
           
           
           
           
           
           function supportsInterface(bytes4 interfaceID) external view returns (bool);
       }

       interface ERC721TokenReceiver {
           
           
           
           
           
           
           
           
           
           
           
           function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);
        }
        
        interface ProjectBasedNFT {
            function tokenIdToProjectId(uint256 tokenId) external returns(uint256);
        }









contract Owned {

    address public owner;

    address public newOwner;


    event OwnershipTransferred(address indexed _from, address indexed _to);


    constructor() public {

        owner = msg.sender;

    }


    modifier onlyOwner {

        require(msg.sender == owner);

        _;

    }


    function transferOwnership(address _newOwner) public onlyOwner {

        newOwner = _newOwner;

    }

    function acceptOwnership() public {

        require(msg.sender == newOwner);

        emit OwnershipTransferred(owner, newOwner);

        owner = newOwner;

        newOwner = address(0);

    }

}




contract ECRecovery {

  
  function recover(bytes32 hash, bytes memory sig) internal  pure returns (address) {
    bytes32 r;
    bytes32 s;
    uint8 v;

    
    if (sig.length != 65) {
      return (address(0));
    }

    
    assembly {
      r := mload(add(sig, 32))
      s := mload(add(sig, 64))
      v := byte(0, mload(add(sig, 96)))
    }

    
    if (v < 27) {
      v += 27;
    }

    
    if (v != 27 && v != 28) {
      return (address(0));
    } else {
      return ecrecover(hash, v, r, s);
    }
  }

}




contract BlockStore is Owned, ECRecovery  {
 
    
  mapping (address => mapping(bytes32 => uint)) public burnedNonces; 
    
  

  mapping(address => uint256) public _fee_pct;
  mapping(address => bool) public _allowedNFTContractAddress;

  address constant internal NATIVE_ETH = 0x0000000000000000000000000000000000000010;
 
  mapping (address => uint256) userSellOrderNonce; 
                                         
 
  constructor(  ) public { 
   
  }

  function setFee( address projectContract, uint fee_pct ) public onlyOwner { 
    require(fee_pct >= 0 && fee_pct <=1000);

    _fee_pct[projectContract] = fee_pct; 
  }



  function setProjectAllowed( address projectContract, bool allow ) public onlyOwner { 
    
    _allowedNFTContractAddress[projectContract] = allow; 
  }


  
  receive() external payable {
    revert();
  }

  fallback() external payable {
    revert();
  }

  function getChainID() public view returns (uint256) {
    uint256 id;
    assembly {
        id := chainid()
    }
    return id;
  }
  
  
   
  event nftSale(address sellerAddress, address buyerAddress, address nftContractAddress, uint256 nftTokenId, address currencyTokenAddress, uint256 currencyTokenAmount);
  
  event nonceBurned(address indexed signer, bytes32 nonce);

  struct OffchainOrder {
   
    address orderCreator;
    bool isSellOrder;  

    address nftContractAddress;
    uint256 nftTokenId;

    address currencyTokenAddress; 
    uint256 currencyTokenAmount;
    
    bytes32 nonce;
    uint256 expires; 
  }
 
  
     bytes32 constant EIP712DOMAIN_TYPEHASH = keccak256(
          "EIP712Domain(string contractName,string version,uint256 chainId,address verifyingContract)"
      );

   function getBidDomainTypehash() public pure returns (bytes32) {
      return EIP712DOMAIN_TYPEHASH;
   }

   function getEIP712DomainHash(string memory contractName, string memory version, uint256 chainId, address verifyingContract) public pure returns (bytes32) {

      return keccak256(abi.encode(
            EIP712DOMAIN_TYPEHASH,
            keccak256(bytes(contractName)),
            keccak256(bytes(version)),
            chainId,
            verifyingContract
        ));
    }
 

  bytes32 constant ORDER_TYPEHASH = keccak256(  
    "OffchainOrder(address orderCreator,bool isSellOrder,address nftContractAddress,uint256 nftTokenId,address currencyTokenAddress,uint256 currencyTokenAmount,bytes32 nonce,uint256 expires)"
  );

  


  function getOrderTypehash()  public pure returns (bytes32) {
      return ORDER_TYPEHASH;
  }


  
  function getOrderHash(address orderCreator,bool isSellOrder,address nftContractAddress,uint256 nftTokenId,address currencyTokenAddress, uint256 currencyTokenAmount,bytes32 nonce,uint256 expires) public pure returns (bytes32) {
          return keccak256(abi.encode(
              ORDER_TYPEHASH,
              orderCreator,
              isSellOrder,
              nftContractAddress,
              nftTokenId,
              currencyTokenAddress,
              currencyTokenAmount,
              nonce,
              expires
          ));
      }

 

  function getOrderTypedDataHash(address orderCreator,bool isSellOrder,address nftContractAddress,uint256 nftTokenId,address currencyTokenAddress, uint256 currencyTokenAmount,bytes32 nonce,uint256 expires) public view returns (bytes32) {
 
              bytes32 digest = keccak256(abi.encodePacked(
                  "\x19\x01",
                  getEIP712DomainHash('BlockStore','1',getChainID(),address(this)),
                  getOrderHash(orderCreator,isSellOrder,nftContractAddress,nftTokenId,currencyTokenAddress,currencyTokenAmount,nonce,expires)
              ));
              return digest;
          }
  

  
  function sellNFTUsingBuyOrder(address buyer, address nftContractAddress, uint256 nftTokenId, address currencyToken, uint256 currencyAmount, bytes32 nonce, uint256 expires, bytes memory buyerSignature) public returns (bool){

      require(_allowedNFTContractAddress[nftContractAddress],'Project not allowed');

      
      bytes32 sigHash = getOrderTypedDataHash(buyer,false,nftContractAddress,nftTokenId,currencyToken,currencyAmount,nonce,expires);
 
       
      require(buyer ==  recover(sigHash,buyerSignature) , 'Invalid signature');
         
      
      require(block.number < expires || expires == 0, 'bid expired');

      require(burnedNonces[buyer][nonce] == 0, 'nonce already burned');
      burnedNonces[buyer][nonce] = 0x1;
       
      
      ERC721(nftContractAddress).safeTransferFrom(msg.sender, buyer, nftTokenId);
      
      _transferCurrencyForSale(buyer,msg.sender,currencyToken,currencyAmount,_fee_pct[nftContractAddress]);
      
      
      emit nftSale(msg.sender, buyer,  nftContractAddress, nftTokenId, currencyToken, currencyAmount);
      emit nonceBurned(buyer, nonce);

      return true;
  }


  function buyNFTUsingSellOrder(address seller, address nftContractAddress, uint256 nftTokenId, address currencyToken, uint256 currencyAmount, bytes32 nonce, uint256 expires, bytes memory sellerSignature) payable public returns (bool){

      require(_allowedNFTContractAddress[nftContractAddress],'Project not allowed');


      
      bytes32 sigHash = getOrderTypedDataHash(seller,true,nftContractAddress,nftTokenId,currencyToken,currencyAmount,nonce,expires);

      
       
      require(seller == recover(sigHash,sellerSignature), 'Invalid signature');
       
      
      require(block.number < expires || expires == 0, 'bid expired');
     
      require(burnedNonces[seller][nonce] == 0, 'nonce already burned');
      burnedNonces[seller][nonce] = 0x1;
       
      
      ERC721(nftContractAddress).safeTransferFrom(seller, msg.sender, nftTokenId);
      
      _transferCurrencyForSale(msg.sender,seller,currencyToken,currencyAmount,_fee_pct[nftContractAddress]);
      
      
      emit nftSale(  seller,  msg.sender, nftContractAddress, nftTokenId, currencyToken, currencyAmount);
      emit nonceBurned(seller, nonce);

      return true;
  }
  
  function _transferCurrencyForSale(address from, address to, address currencyToken, uint256 currencyAmount, uint256 feePct) internal returns (bool){
    uint256 feeAmount = (currencyAmount * feePct)/(10000);

    if(currencyToken == NATIVE_ETH){  
      require(msg.value == currencyAmount,'incorrect payment value'); 
      payable(to).transfer( currencyAmount - (feeAmount) );
      payable(owner).transfer( feeAmount );
    }else{
      require(msg.value == 0,'incorrect payment value'); 
      require( IERC20(currencyToken).transferFrom(from, to, currencyAmount - (feeAmount) ), 'unable to pay' );
      require( IERC20(currencyToken).transferFrom(from, owner, feeAmount ), 'unable to pay'  ); 
    }
    
    return true;
  } 
  
   
  function cancelOffchainOrder(address orderCreator, bool isSellOrder, address nftContractAddress, uint256 nftTokenId, address currencyToken, uint256 currencyAmount, bytes32 nonce, uint256 expires, bytes memory offchainSignature ) public returns (bool){
      bytes32 sigHash = getOrderTypedDataHash(orderCreator,isSellOrder,nftContractAddress,nftTokenId,currencyToken,currencyAmount,nonce,expires);
      address recoveredSignatureSigner = recover(sigHash,offchainSignature);
      
      require(orderCreator == recoveredSignatureSigner, 'Invalid signature');
      require(msg.sender == recoveredSignatureSigner, 'Not signature owner');


      require(burnedNonces[orderCreator][nonce] == 0, 'Nonce already burned');
      burnedNonces[orderCreator][nonce] = 0x2;
        
      emit nonceBurned(orderCreator, nonce);
      
      return true;
  }
  
  
  
}