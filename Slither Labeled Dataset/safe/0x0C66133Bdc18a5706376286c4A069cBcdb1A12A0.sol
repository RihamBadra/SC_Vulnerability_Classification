





pragma solidity >=0.6.12;

















interface TinlakeRootLike {
    function relyContract(address, address) external;
    function denyContract(address, address) external;
}

interface FileLike {
    function file(bytes32, uint) external;
    function file(bytes32, address) external;
}

interface NAVFeedLike {
    function file(bytes32 name, uint value) external;
    function file(bytes32 name, uint risk_, uint thresholdRatio_, uint ceilingRatio_, uint rate_, uint recoveryRatePD_) external;
    function discountRate() external returns(uint);
}



contract TinlakeSpell {

    bool public done;
    string constant public description = "Tinlake CF4 Mainnet Spell - 3";

    
    
    

    address constant public ROOT = 0x4B6CA198d257D755A5275648D471FE09931b764A;
    address constant public NAV_FEED = 0xcAB9ed8e5EF4607A97f4e22Ad1D984ADB93ce890;
                                                             
    uint256 constant ONE = 10**27;
    address self;
    
    function cast() public {
        require(!done, "spell-already-cast");
        done = true;
        execute();
    }

    function execute() internal {
        TinlakeRootLike root = TinlakeRootLike(address(ROOT));
        NAVFeedLike navFeed = NAVFeedLike(address(NAV_FEED));
        self = address(this);
        
        root.relyContract(NAV_FEED, self); 

        
        navFeed.file("riskGroup", 6, ONE, ONE, uint(1000000001696470000000000000), 99.5*10**25);
        
        navFeed.file("riskGroup", 7, ONE, ONE, uint(1000000001848680000000000000), 99.5*10**25);
        
        navFeed.file("riskGroup", 8, ONE, ONE, uint(1000000001997720000000000000), 99.5*10**25);
        
        navFeed.file("riskGroup", 9, ONE, ONE, uint(1000000002146750000000000000), 99.5*10**25);
        
        navFeed.file("riskGroup", 10, ONE, ONE, uint(1000000004433030000000000000), 98.5*10**25);
     }   
}