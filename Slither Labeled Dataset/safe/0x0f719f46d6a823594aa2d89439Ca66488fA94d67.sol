





pragma solidity ^0.5.2;


library SafeMath {
    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b);

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        
        require(b > 0);
        uint256 c = a / b;
        

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        uint256 c = a - b;

        return c;
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a);

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0);
        return a % b;
    }
}



pragma solidity ^0.5.0;

interface AggregatorInterface {
  function latestAnswer() external view returns (int256);
  function latestTimestamp() external view returns (uint256);
  function latestRound() external view returns (uint256);
  function getAnswer(uint256 roundId) external view returns (int256);
  function getTimestamp(uint256 roundId) external view returns (uint256);

  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 timestamp);
  event NewRound(uint256 indexed roundId, address indexed startedBy);
}





pragma solidity 0.5.7;





contract ChainlinkOracleAdapter {
    using SafeMath for uint256;

    
    uint256 public constant PRICE_MULTIPLIER = 1e10;

    
    AggregatorInterface public oracle;

    
    
    constructor(
        AggregatorInterface _oracle
    )
        public
    {
        oracle = _oracle;
    }

    

    
    function read()
        external
        view
        returns (uint256)
    {
        
        uint256 oracleOutput = uint256(oracle.latestAnswer());

        
        return oracleOutput.mul(PRICE_MULTIPLIER);
    }
}