





pragma solidity >=0.4.24 <0.7.0;



contract Initializable {

  
  bool private initialized;

  
  bool private initializing;

  
  modifier initializer() {
    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");

    bool isTopLevelCall = !initializing;
    if (isTopLevelCall) {
      initializing = true;
      initialized = true;
    }

    _;

    if (isTopLevelCall) {
      initializing = false;
    }
  }

  
  function isConstructor() private view returns (bool) {
    
    
    
    
    
    address self = address(this);
    uint256 cs;
    assembly { cs := extcodesize(self) }
    return cs == 0;
  }

  
  uint256[50] private ______gap;
}



pragma solidity ^0.6.0;



contract ContextUpgradeSafe is Initializable {
    
    

    function __Context_init() internal initializer {
        __Context_init_unchained();
    }

    function __Context_init_unchained() internal initializer {


    }


    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }

    uint256[50] private __gap;
}



pragma solidity ^0.6.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.6.0;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



pragma solidity ^0.6.2;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}



pragma solidity ^0.6.0;







contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    

    function __ERC20_init(string memory name, string memory symbol) internal initializer {
        __Context_init_unchained();
        __ERC20_init_unchained(name, symbol);
    }

    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {


        _name = name;
        _symbol = symbol;
        _decimals = 18;

    }


    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

    uint256[44] private __gap;
}



pragma solidity ^0.6.0;




contract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    

    function __Pausable_init() internal initializer {
        __Context_init_unchained();
        __Pausable_init_unchained();
    }

    function __Pausable_init_unchained() internal initializer {


        _paused = false;

    }


    
    function paused() public view returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!_paused, "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(_paused, "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }

    uint256[49] private __gap;
}



pragma solidity ^0.6.0;





abstract contract ERC20PausableUpgradeSafe is Initializable, ERC20UpgradeSafe, PausableUpgradeSafe {
    function __ERC20Pausable_init() internal initializer {
        __Context_init_unchained();
        __Pausable_init_unchained();
        __ERC20Pausable_init_unchained();
    }

    function __ERC20Pausable_init_unchained() internal initializer {


    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);

        require(!paused(), "ERC20Pausable: token transfer while paused");
    }

    uint256[50] private __gap;
}



pragma solidity ^0.6.0;





library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        

        
        
        
        
        
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



pragma solidity ^0.6.0;



contract ReentrancyGuardUpgradeSafe is Initializable {
    bool private _notEntered;


    function __ReentrancyGuard_init() internal initializer {
        __ReentrancyGuard_init_unchained();
    }

    function __ReentrancyGuard_init_unchained() internal initializer {


        
        
        
        
        
        
        _notEntered = true;

    }


    
    modifier nonReentrant() {
        
        require(_notEntered, "ReentrancyGuard: reentrant call");

        
        _notEntered = false;

        _;

        
        
        _notEntered = true;
    }

    uint256[49] private __gap;
}



pragma solidity ^0.6.12;


library AddressArrayUtils {

    
    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {
        uint256 length = A.length;
        for (uint256 i = 0; i < length; i++) {
            if (A[i] == a) {
                return (i, true);
            }
        }
        return (uint256(-1), false);
    }

    
    function contains(address[] memory A, address a) internal pure returns (bool) {
        (, bool isIn) = indexOf(A, a);
        return isIn;
    }

    
    function remove(address[] memory A, address a)
        internal
        pure
        returns (address[] memory)
    {
        (uint256 index, bool isIn) = indexOf(A, a);
        if (!isIn) {
            revert("Address not in array.");
        } else {
            (address[] memory _A,) = pop(A, index);
            return _A;
        }
    }

    
    function pop(address[] memory A, uint256 index)
        internal
        pure
        returns (address[] memory, address)
    {
        uint256 length = A.length;
        require(index < A.length, "Index must be < A length");
        address[] memory newAddresses = new address[](length - 1);
        for (uint256 i = 0; i < index; i++) {
            newAddresses[i] = A[i];
        }
        for (uint256 j = index + 1; j < length; j++) {
            newAddresses[j - 1] = A[j];
        }
        return (newAddresses, A[index]);
    }
}



pragma solidity ^0.6.12;


interface ILimaSwap {
    function getGovernanceToken(address token) external view returns (address);

    function getExpectedReturn(
        address fromToken,
        address toToken,
        uint256 amount
    ) external view returns (uint256 returnAmount);

    function swap(
        address recipient,
        address from,
        address to,
        uint256 amount,
        uint256 minReturnAmount
    ) external returns (uint256 returnAmount);

    function unwrap(
        address interestBearingToken,
        uint256 amount,
        address recipient
    ) external;

    function getUnderlyingAmount(address token, uint256 amount)
        external
        returns (uint256 underlyingAmount);
}



pragma solidity ^0.6.12;



interface ILimaTokenStorage {
    function MAX_UINT256() external view returns (uint256);

    function WETH() external view returns (address);

    function LINK() external view returns (address);

    function currentUnderlyingToken() external view returns (address);

    
    function limaSwap() external view returns (ILimaSwap);

    function rebalanceBonus() external view returns (uint256);

    function rebalanceGas() external view returns (uint256);

    
    function feeWallet() external view returns (address);

    function burnFee() external view returns (uint256);

    function mintFee() external view returns (uint256);

    function performanceFee() external view returns (uint256);

    function requestId() external view returns (bytes32);

    
    function lastUnderlyingBalancePer1000() external view returns (uint256);

    function lastRebalance() external view returns (uint256);

    function rebalanceInterval() external view returns (uint256);

    function limaGovernance() external view returns (address);

    function owner() external view returns (address);

    function governanceToken(uint256 _protocoll)
        external
        view
        returns (address);

    

    function addUnderlyingToken(address _underlyingToken) external;

    function removeUnderlyingToken(address _underlyingToken) external;

    function setCurrentUnderlyingToken(address _currentUnderlyingToken)
        external;

    function setFeeWallet(address _feeWallet) external;

    function setBurnFee(uint256 _burnFee) external;

    function setMintFee(uint256 _mintFee) external;

    function setLimaToken(address _limaToken) external;

    function setPerformanceFee(uint256 _performanceFee) external;

    function setLastUnderlyingBalancePer1000(
        uint256 _lastUnderlyingBalancePer1000
    ) external;

    function setLastRebalance(uint256 _lastRebalance) external;

    function setLimaSwap(address _limaSwap) external;

    function setRebalanceInterval(uint256 _rebalanceInterval) external;

    

    function isUnderlyingTokens(address _underlyingToken)
        external
        view
        returns (bool);
}



pragma solidity ^0.6.12;

interface IInvestmentToken {
    function isInvestmentToken(address _investmentToken)
        external
        view
        returns (bool);

    function removeInvestmentToken(address _investmentToken) external;

    function addInvestmentToken(address _investmentToken) external;
}



pragma solidity ^0.6.12;

interface IAmunUser {
    function isAmunUser(address _amunUser) external view returns (bool);
    function isOnlyAmunUserActive() external view returns (bool);
}



pragma solidity ^0.6.12;





interface ILimaTokenHelper is IInvestmentToken, IAmunUser, ILimaTokenStorage {
    function getNetTokenValue(address _targetToken)
        external
        view
        returns (uint256 netTokenValue);

    function getNetTokenValueOf(address _targetToken, uint256 _amount)
        external
        view
        returns (uint256 netTokenValue);

    function getExpectedReturn(
        address _from,
        address _to,
        uint256 _amount
    ) external view returns (uint256 returnAmount);

    function getUnderlyingTokenBalance()
        external
        view
        returns (uint256 balance);

    function getUnderlyingTokenBalanceOf(uint256 _amount)
        external
        view
        returns (uint256 balanceOf);

    function getPayback(uint256 gas) external view returns (uint256);

    function getGovernanceToken() external view returns (address token);

    function getPerformanceFee()
        external
        view
        returns (uint256 performanceFeeToWallet);

    function getFee(uint256 _amount, uint256 _fee)
        external
        view
        returns (uint256 feeAmount);

    function getExpectedReturnRedeem(uint256 _amount, address _to)
        external
        view
        returns (uint256 minimumReturn);

    function getExpectedReturnCreate(uint256 _amount, address _from)
        external
        view
        returns (uint256 minimumReturn);

    function getExpectedReturnRebalance(address _bestToken)
        external
        view
        returns (uint256 minimumReturnGov, uint256 minimumReturn);
}



pragma solidity ^0.6.12;



contract LimaTokenV2 is ERC20PausableUpgradeSafe, ReentrancyGuardUpgradeSafe {
    using AddressArrayUtils for address[];
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    event Create(address _from, uint256 _amount, uint16 indexed _referral);
    event Redeem(address _from, uint256 _amount);
    event RebalanceExecute(address _oldToken, address _newToken);

    
    ILimaTokenHelper public limaTokenHelper; 
    mapping(address => uint256) internal userLastDeposit;

    
    function initialize(
        string memory name,
        string memory symbol,
        address _limaTokenHelper,
        uint256 _underlyingAmount,
        uint256 _limaAmount
    ) public initializer {
        limaTokenHelper = ILimaTokenHelper(_limaTokenHelper);

        __ERC20_init(name, symbol);
        __ERC20Pausable_init();
        __ReentrancyGuard_init();

        if (_underlyingAmount > 0 && _limaAmount > 0) {
            IERC20(limaTokenHelper.currentUnderlyingToken()).safeTransferFrom(
                _msgSender(),
                address(this),
                _underlyingAmount
            );
            _mint(_msgSender(), _limaAmount);
        }
    }

    

    modifier onlyUnderlyingToken(address _token) {
        _isOnlyUnderlyingToken(_token);
        _;
    }

    function _isOnlyUnderlyingToken(address _token) internal view {
        
        require(
            limaTokenHelper.isUnderlyingTokens(_token),
            "LM1" 
        );
    }

    modifier onlyInvestmentToken(address _investmentToken) {
        
        _isOnlyInvestmentToken(_investmentToken);
        _;
    }

    function _isOnlyInvestmentToken(address _investmentToken) internal view {
        
        require(
            limaTokenHelper.isInvestmentToken(_investmentToken),
            "LM7" 
        );
    }

    
    modifier onlyLimaGovernanceOrOwner() {
        _isOnlyLimaGovernanceOrOwner();
        _;
    }

    function _isOnlyLimaGovernanceOrOwner() internal view {
        require(
            limaTokenHelper.limaGovernance() == _msgSender() ||
                limaTokenHelper.owner() == _msgSender(),
            "LM2" 
        );
    }

    modifier onlyAmunUsers() {
        _isOnlyAmunUser();
        _;
    }

    function _isOnlyAmunUser() internal view {
        if (limaTokenHelper.isOnlyAmunUserActive()) {
            require(
                limaTokenHelper.isAmunUser(_msgSender()),
                "LM3" 
            );
        }
    }

    

    function getUnderlyingTokenBalance() public view returns (uint256 balance) {
        return
            IERC20(limaTokenHelper.currentUnderlyingToken()).balanceOf(
                address(this)
            );
    }

    function getUnderlyingTokenBalanceOf(uint256 _amount)
        public
        view
        returns (uint256 balanceOf)
    {
        return getUnderlyingTokenBalance().mul(_amount).div(totalSupply());
    }

    

    function mint(address account, uint256 amount)
        public
        onlyLimaGovernanceOrOwner
    {
        _mint(account, amount);
    }

    
    function pause() external onlyLimaGovernanceOrOwner {
        _pause();
    }

    function unpause() external onlyLimaGovernanceOrOwner {
        _unpause();
    }

    function _approveLimaSwap(address _token, uint256 _amount) internal {
        if (
            IERC20(_token).allowance(
                address(this),
                address(limaTokenHelper.limaSwap())
            ) < _amount
        ) {
            IERC20(_token).safeApprove(address(limaTokenHelper.limaSwap()), 0);
            IERC20(_token).safeApprove(
                address(limaTokenHelper.limaSwap()),
                limaTokenHelper.MAX_UINT256()
            );
        }
    }

    function _swap(
        address _from,
        address _to,
        uint256 _amount,
        uint256 _minimumReturn
    ) internal returns (uint256 returnAmount) {
        if (address(_from) != address(_to) && _amount > 0) {
            _approveLimaSwap(_from, _amount);

            returnAmount = limaTokenHelper.limaSwap().swap(
                address(this),
                _from,
                _to,
                _amount,
                _minimumReturn
            );
            return returnAmount;
        }
        return _amount;
    }

    function _unwrap(
        address _token,
        uint256 _amount,
        address _recipient
    ) internal {
        if (_amount > 0) {
            _approveLimaSwap(_token, _amount);
            limaTokenHelper.limaSwap().unwrap(_token, _amount, _recipient);
        }
    }

    
    function swap(
        address _from,
        address _to,
        uint256 _amount,
        uint256 _minimumReturn
    ) public onlyLimaGovernanceOrOwner returns (uint256 returnAmount) {
        return _swap(_from, _to, _amount, _minimumReturn);
    }

    
    function rebalance(
        address _bestToken,
        uint256 _minimumReturnGov,
        uint256 _minimumReturn
    ) external onlyLimaGovernanceOrOwner() {
        require(
            limaTokenHelper.lastRebalance() +
                limaTokenHelper.rebalanceInterval() <
                now,
            "LM5" 
        );

        limaTokenHelper.setLastRebalance(now);

        
        _unwrap(
            limaTokenHelper.currentUnderlyingToken(),
            limaTokenHelper.getPerformanceFee(),
            limaTokenHelper.feeWallet()
        );

        address govToken = limaTokenHelper.getGovernanceToken();
        
        _swap(
            govToken,
            _bestToken,
            IERC20(govToken).balanceOf(address(this)),
            _minimumReturnGov
        );

        
        _swap(
            limaTokenHelper.currentUnderlyingToken(),
            _bestToken,
            getUnderlyingTokenBalance(),
            _minimumReturn
        );
        emit RebalanceExecute(
            limaTokenHelper.currentUnderlyingToken(),
            _bestToken
        );
        limaTokenHelper.setCurrentUnderlyingToken(_bestToken);
        limaTokenHelper.setLastUnderlyingBalancePer1000(
            getUnderlyingTokenBalanceOf(1000 ether)
        );
    }

    
    function forceRedeem(
        address _payoutToken,
        uint256 _amount,
        address _recipient,
        uint256 _minimumReturn
    ) external onlyLimaGovernanceOrOwner returns (bool) {
        return
            _redeem(
                _recipient,
                _payoutToken,
                _amount,
                _recipient,
                _minimumReturn
            );
    }

    

    
    function create(
        address _investmentToken,
        uint256 _amount,
        address _recipient,
        uint256 _minimumReturn,
        uint16  _referral
    )
        external
        nonReentrant
        onlyInvestmentToken(_investmentToken)
        onlyAmunUsers
        returns (bool)
    {
        require(
            block.number + 2 > userLastDeposit[_msgSender()],
            "cannot withdraw within the same block"
        );
        userLastDeposit[tx.origin] = block.number;
        uint256 balance = getUnderlyingTokenBalance();
        require(balance != 0, "balance cant be zero");
        IERC20(_investmentToken).safeTransferFrom(
            _msgSender(),
            address(this),
            _amount
        );
        
        uint256 fee = limaTokenHelper.getFee(
            _amount,
            limaTokenHelper.mintFee()
        );
        if (fee > 0) {
            IERC20(_investmentToken).safeTransfer(
                limaTokenHelper.feeWallet(),
                fee
            );
            _amount = _amount - fee;
        }
        _amount = _swap(
            _investmentToken,
            limaTokenHelper.currentUnderlyingToken(),
            _amount,
            _minimumReturn
        );

        _amount = totalSupply().mul(_amount).div(balance);

        require(_amount > 0, "zero");

        _mint(_recipient, _amount);

        emit Create(_msgSender(), _amount, _referral);
        return true;
    }

    function _redeem(
        address _investor,
        address _payoutToken,
        uint256 _amount,
        address _recipient,
        uint256 _minimumReturn
    ) internal nonReentrant onlyInvestmentToken(_payoutToken) returns (bool) {
        require(
            block.number + 2 > userLastDeposit[_msgSender()],
            "cannot withdraw within the same block"
        );
        userLastDeposit[tx.origin] = block.number;
        uint256 underlyingAmount = getUnderlyingTokenBalanceOf(_amount);
        _burn(_investor, _amount);

        uint256 fee = limaTokenHelper.getFee(
            underlyingAmount,
            limaTokenHelper.burnFee()
        );
        if (fee > 0) {
            _unwrap(
                limaTokenHelper.currentUnderlyingToken(),
                fee,
                limaTokenHelper.feeWallet()
            );
            underlyingAmount = underlyingAmount - fee;
        }
        emit Redeem(_msgSender(), _amount);

        _amount = _swap(
            limaTokenHelper.currentUnderlyingToken(),
            _payoutToken,
            underlyingAmount,
            _minimumReturn
        );
        require(_amount > 0, "zero");
        IERC20(_payoutToken).safeTransfer(_recipient, _amount);

        return true;
    }

    
    function redeem(
        address _payoutToken,
        uint256 _amount,
        address _recipient,
        uint256 _minimumReturn
    ) external returns (bool) {
        return
            _redeem(
                _msgSender(),
                _payoutToken,
                _amount,
                _recipient,
                _minimumReturn
            );
    }
}