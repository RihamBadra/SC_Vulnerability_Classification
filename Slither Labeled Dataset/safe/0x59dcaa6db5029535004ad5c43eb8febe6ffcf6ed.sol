pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

interface ERC20 {

    function approve(address, uint256) external returns (bool);

    function transfer(address, uint256) external returns (bool);

    function transferFrom(address, address, uint256) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address) external view returns (uint256);

}

interface ProtocolAdapter {



    

    function adapterType() external pure returns (string memory);



    

    function tokenType() external pure returns (string memory);



    

    function getBalance(address token, address account) external view returns (uint256);

}

interface StakingRewards {

    function earned(address) external view returns (uint256);

}

contract PickleStakingV1Adapter is ProtocolAdapter {



    string public constant override adapterType = "Asset";



    string public constant override tokenType = "ERC20";



    address internal constant PICKLE = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;

    address internal constant S_CRV = 0xC25a3A3b969415c80451098fa907EC722572917F;

    address internal constant PICKLE_POOL = 0xD86F33388BF0bfDF0cCb1ECB4A48a1579504DC0a;



    

    function getBalance(address token, address account) external view override returns (uint256) {

      if (token == PICKLE) {

          return ERC20(PICKLE_POOL).balanceOf(account);

      } else if (token == S_CRV) {

          return StakingRewards(PICKLE_POOL).earned(account);

      } else {

          return 0;

      }

    }

  }
