

pragma solidity ^0.8.0;




contract DegenDataAccess {
    
    address public owner;
    uint256 public registrationFee;
    address[] public addressList;

    
    struct Customer {
        bool isPaid;
        uint256 expirationDate;
    }

    
    mapping(address => Customer) public UserRegistion;

    
    constructor() {
        owner = msg.sender;
        registrationFee = .069 ether;
    }

    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only Owner Can Perform this function");
        _;
    }

    
    fallback() external payable {
        revert();
    }

    
    function getCustomerCount() public view returns (uint256) {
        return addressList.length;
    }

    
    function register() public payable {
        require(msg.value >= registrationFee, "Insufficient funds sent");
        require(
            UserRegistion[msg.sender].isPaid == false,
            "You already registered you knucklehead"
        );

        if (UserRegistion[msg.sender].expirationDate == 0) {
            addressList.push(msg.sender);
            UserRegistion[msg.sender].isPaid = true;
            UserRegistion[msg.sender].expirationDate =
                block.timestamp +
                365 days;
        }

        if (
            UserRegistion[msg.sender].expirationDate > block.timestamp &&
            UserRegistion[msg.sender].isPaid == false
        ) {
            UserRegistion[msg.sender].isPaid = true;
            UserRegistion[msg.sender].expirationDate =
                block.timestamp +
                365 days;
        }
    }

    
    function userPastExpiration(address _address) public view returns (bool) {
        if (
            block.timestamp > UserRegistion[_address].expirationDate &&
            UserRegistion[_address].expirationDate != 0
        ) {
            return true;
        }
        return false;
    }

    
    
    
    function setNewOwner(address _newOwner) public onlyOwner {
        owner = _newOwner;
    }

    
    
    function setNewRegistrationPrice(uint256 _newFee) public onlyOwner {
        registrationFee = _newFee;
    }

    
    
    function resetUserPaidStatus(address[] memory _address) public onlyOwner {
        for (uint256 i = 0; i < _address.length; i++) {
            if (userPastExpiration(_address[i])) {
                UserRegistion[_address[i]].isPaid = false;
            }
        }
    }

    
    function withdrawToOwner() public onlyOwner {
        payable(owner).transfer(address(this).balance);
    }

    
    
    function withdrawToAddress(address _recipient, uint256 _amount)
        public
        onlyOwner
    {
        payable(_recipient).transfer(_amount);
    }

    
    function giveAccountAway(address _address) public onlyOwner {
        UserRegistion[_address].isPaid = true;
    }
}