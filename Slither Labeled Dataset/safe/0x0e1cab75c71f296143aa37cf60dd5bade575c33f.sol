









abstract contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}









abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}











abstract contract Pausable is Context {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    
    constructor() {
        _paused = false;
    }

    
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}











abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}









interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address to, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address from,
        address to,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}









library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        return account.code.length > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}












library SafeERC20 {
    using Address for address;

    function safeTransfer(
        IERC20 token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20 token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        
        
        
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20 token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}










abstract contract Withdrawable {
    using SafeERC20 for IERC20;
    using Address for address;

    event WithdrawToken(address token, address recipient, uint256 amount);
    event Withdraw(address recipient, uint256 amount);

    function _deliverFunds(
        address _recipient,
        uint256 _value,
        string memory _message
    ) internal {
        (bool sent, ) = payable(_recipient).call{value: _value}("");

        require(sent, _message);
    }

    function _deliverTokens(
        address _token,
        address _recipient,
        uint256 _value
    ) internal {
        IERC20(_token).safeTransfer(_recipient, _value);
    }

    function _withdraw(address _recipient, uint256 _amount) internal virtual {
        require(_recipient != address(0x0), "NFTAirdrop: address is zero");
        require(
            _amount <= address(this).balance,
            "NFTAirdrop: not enought BNB balance"
        );

        _afterWithdraw(_recipient, _amount);

        _deliverFunds(_recipient, _amount, "NFTAirdrop: Can't send BNB");
        emit Withdraw(_recipient, _amount);
    }

    function _afterWithdraw(address _recipient, uint256 _amount)
        internal
        virtual
    {}

    function _withdrawToken(
        address _token,
        address _recipient,
        uint256 _amount
    ) internal virtual {
        require(_recipient != address(0x0), "NFTAirdrop: address is zero");
        require(
            _amount <= IERC20(_token).balanceOf(address(this)),
            "NFTAirdrop: not enought token balance"
        );

        IERC20(_token).safeTransfer(_recipient, _amount);

        _afterWithdrawToken(_token, _recipient, _amount);

        emit WithdrawToken(_token, _recipient, _amount);
    }

    function _afterWithdrawToken(
        address _token,
        address _recipient,
        uint256 _amount
    ) internal virtual {}
}









interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}











interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}











interface IERC721Enumerable is IERC721 {
    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}









interface ISNC is IERC721Enumerable {
    function mint(address _to, uint256 _tokenId) external;
}





pragma solidity ^0.8.9;








contract NFTAirdrop is Ownable, Pausable, ReentrancyGuard, Withdrawable {
    using SafeERC20 for IERC20;
    using Address for address;

    mapping(uint256 => uint256[]) public requests;

    
    mapping(address => uint256[]) public userRequests;

    mapping(uint256 => bool) public claimedTokenId;

    address public sncAddress;

    uint256 public maxTokenId;

    uint256 public requestsReceived;

    uint256 public tokenRewardAmount = 3;

    event RequestReceived(address user, uint256 requestId);

    event UpdateSncAddress(address sncAddress);

    event UpdateTokenRewardAmount(uint256 _tokenRewardAmount);

    event UpdateMaxTokenId(uint256 _maxTokenId);

    constructor(address _sncAddress, uint256 _maxTokenId) {
        sncAddress = _sncAddress;
        maxTokenId = _maxTokenId;
    }

    function claim() public whenNotPaused nonReentrant {
        address account = _msgSender();

        uint256 balance = ISNC(sncAddress).balanceOf(account);
        require(balance > 0, "NFTAirdrop: snc not found");

        uint256 requestId = requestsReceived;

        userRequests[account].push(requestId);

        for (uint256 i = 0; i < balance; i++) {
            uint256 tokenId = ISNC(sncAddress).tokenOfOwnerByIndex(account, i);

            if ((tokenId <= maxTokenId) && (!claimedTokenId[tokenId])) {
                uint256 totalSupply = ISNC(sncAddress).totalSupply();

                for (uint256 j = 1; j <= tokenRewardAmount; j++) {
                    uint256 tokenMinted = totalSupply + j;

                    ISNC(sncAddress).mint(account, tokenMinted);

                    requests[requestId].push(tokenMinted);
                }

                claimedTokenId[tokenId] = true;
            }
        }

        requestsReceived += 1;
    }

    function getTokenIdsOnBalance(address _account)
        external
        view
        returns (uint256[] memory ids)
    {
        uint256 balance = ISNC(sncAddress).balanceOf(_account);

        uint256 j = 0;

        for (uint256 i = 0; i < balance; i++) {
            uint256 tokenId = ISNC(sncAddress).tokenOfOwnerByIndex(_account, i);
             if ((tokenId <= maxTokenId) && (!claimedTokenId[tokenId])) {
                j = j + 1;
            }
        }

        uint256[] memory newIds = new uint256[](j);

        j = 0;

        for (uint256 i = 0; i < balance; i++) {
            uint256 tokenId = ISNC(sncAddress).tokenOfOwnerByIndex(_account, i);

            if ((tokenId <= maxTokenId) && (!claimedTokenId[tokenId])) {
                newIds[j] = tokenId;

                j = j + 1;
            }
        }

        ids = newIds;
    }

    function getUserRequestsLength(address _account)
        external
        view
        returns (uint256 length)
    {
        length = userRequests[_account].length;
    }

    function getTokenIds(address _account, uint256 _requestIndex)
        external
        view
        returns (uint256[] memory ids)
    {
        uint256 requestId = userRequests[_account][_requestIndex];

        ids = requests[requestId];
    }

    
    function withdrawToken(address _token, address _recipient)
        external
        virtual
        whenPaused
        onlyOwner
    {
        uint256 amount = IERC20(_token).balanceOf(address(this));

        _withdrawToken(_token, _recipient, amount);
        _afterWithdrawToken(_token, _recipient, amount);
    }

    
    function withdrawSomeToken(
        address _token,
        address _recipient,
        uint256 _amount
    ) public virtual whenPaused onlyOwner {
        _withdrawToken(_token, _recipient, _amount);
        _afterWithdrawToken(_token, _recipient, _amount);
    }

    
    function withdraw() external virtual whenPaused onlyOwner {
        _withdraw(_msgSender(), address(this).balance);
    }

    
    function withdrawSome(address _recipient, uint256 _amount)
        external
        virtual
        onlyOwner
    {
        _withdraw(_recipient, _amount);
    }

    
    function pause() external onlyOwner {
        _pause();
    }

    
    function unpause() external onlyOwner {
        _unpause();
    }

    function updateSncAddress(address _sncAddress) external onlyOwner {
        sncAddress = _sncAddress;
        emit UpdateSncAddress(_sncAddress);
    }

    function updateTokenRewardAmount(uint256 _tokenRewardAmount)
        external
        onlyOwner
    {
        tokenRewardAmount = _tokenRewardAmount;

        emit UpdateTokenRewardAmount(_tokenRewardAmount);
    }

    function updateMaxTokenId(uint256 _maxTokenId) 
        external
        onlyOwner
    {
        maxTokenId = _maxTokenId;
        emit UpdateMaxTokenId(_maxTokenId);
    }
}