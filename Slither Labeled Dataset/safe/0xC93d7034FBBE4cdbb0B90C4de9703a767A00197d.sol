pragma solidity 0.5.15;

contract IFactRegistry {

    

    function isValid(bytes32 fact)

        external view

        returns(bool);

}

contract IQueryableFactRegistry is IFactRegistry {



    

    function hasRegisteredFact()

        external view

        returns(bool);



}

contract Identity {



    

    function identify()

        external pure

        returns(string memory);

}

contract GpsFactRegistryAdapter is IQueryableFactRegistry, Identity {



    IQueryableFactRegistry gpsContract;

    uint256 programHash;



    constructor(

        IQueryableFactRegistry gpsStatementContract, uint256 programHash_)

    public {

        gpsContract = gpsStatementContract;

        programHash = programHash_;

    }



    function identify()

        external pure

        returns(string memory)

    {

        return "StarkWare_GpsFactRegistryAdapter_2020_1";

    }



    

    function isValid(bytes32 fact)

        external view

        returns(bool)

    {

        return gpsContract.isValid(keccak256(abi.encode(programHash, fact)));

    }





    

    function hasRegisteredFact()

        external view

        returns(bool)

    {

        return gpsContract.hasRegisteredFact();

    }

}
