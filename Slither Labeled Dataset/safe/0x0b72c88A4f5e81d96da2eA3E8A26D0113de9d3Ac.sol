

pragma solidity ^0.8.0;







library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        }
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b > a) return (false, 0);
            return (true, a - b);
        }
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            
            
            
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        }
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a / b);
        }
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        unchecked {
            if (b == 0) return (false, 0);
            return (true, a % b);
        }
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    
    function sub(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b <= a, errorMessage);
            return a - b;
        }
    }

    
    function div(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a / b;
        }
    }

    
    function mod(
        uint256 a,
        uint256 b,
        string memory errorMessage
    ) internal pure returns (uint256) {
        unchecked {
            require(b > 0, errorMessage);
            return a % b;
        }
    }
}

interface IMinerManage {

    function setOracleAddress(address _oracleAddress) external;
    function minerAdjustedStoragePowerInTiB(string memory minerId) external view returns(uint256);
    function whiteList(address walletAddress) external returns(bool);
    function minerInfoMap(address walletAddress) external returns(string memory);
    function getMinerList() external view returns(string[] memory);
    function getMinerId(address walletAddress) external view returns(string memory);
}



abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

interface IFilChainStatOracle {
    function sectorInitialPledge() external view returns(uint256);
    function minerAdjustedPower(string memory _minerId) external view returns(uint256);
    function minerMiningEfficiency(string memory _minerId) external view returns(uint256);
    function minerSectorInitialPledge(string memory _minerId) external view returns(uint256);
    function minerTotalAdjustedPower() external view returns(uint256);
    function avgMiningEfficiency() external view returns(uint256);
    function latest24hBlockReward() external view returns(uint256);
    function rewardAttenuationFactor() external view returns(uint256);
    function networkStoragePower() external view returns(uint256);
    function dailyStoragePowerIncrease() external view returns(uint256);
    function removeMinerAdjustedPower(string memory _minerId) external;
    
}

interface IMiningNFTMintingLimitationData {
    function totalMintLimitationInTiB() external view returns(uint256);
    function minerMintAmountLimitation(string memory _minerId) external view returns(uint256);
    function setTotalMintLimitationInTiB(uint _totalMintLimitationInTiB) external;
    function setMinerMintAmountLimitationBatch(string[] memory minerIds, uint[] memory limitations) external;
    function setMinerMintAmountLimitation(string memory minerId, uint limitation) external;
    function increaseTotalLimitation(uint256 _limitationDelta) external;
    function decreaseTotalLimitation(uint256 _limitationDelta) external;
    function increaseMinerLimitation(string memory _minerId, uint256 _minerLimitationDelta) external;
    function decreaseMinerLimitation(string memory _minerId, uint256 _minerLimitationDelta) external;
}

contract MiningNFTMintingLimitationBase is Ownable{
    using SafeMath for uint256;

    IMinerManage public minerManage;
    IFilChainStatOracle public filChainStatOracle;
    IMiningNFTMintingLimitationData public limitationData;

    uint256 public mintAmountLimitationRatio = 200; 
    uint constant public RATIO_DENOMINATOR = 1000;

    event FilChainStatOracleChanged(address originalOracle, address newOracle);
    event LimitationRatioChanged(uint256 originalValue, uint256 newValue);
    event MiningNFTMintingLimitationDataChanged(address originalDataContract, address newDataContract);
    event MinerManageChanged(address originalMinerManage, address newMinerManage);

    constructor(IMinerManage _minerManage,IFilChainStatOracle _filChainStatOracle, IMiningNFTMintingLimitationData _limitationData){
        minerManage = _minerManage;
        filChainStatOracle = _filChainStatOracle;
        limitationData = _limitationData;
    }

    function setMinerManage(IMinerManage _minerManage) public onlyOwner{
        require(address(_minerManage)!=address(0), "address should not be 0");
        address original = address(minerManage);
        minerManage = _minerManage;
        emit MinerManageChanged(original, address(_minerManage));
    }

    function getTotalLimitationCap() public view returns(uint256){
        return filChainStatOracle.minerTotalAdjustedPower().mul(mintAmountLimitationRatio).div(RATIO_DENOMINATOR);
    }

    function getMinerLimitationCap(string memory minerId) public view returns(uint256){
        return filChainStatOracle.minerAdjustedPower(minerId).mul(mintAmountLimitationRatio).div(RATIO_DENOMINATOR);
    }

    function setFilChainStatOracle(IFilChainStatOracle _filChainStatOracle) public onlyOwner{
        require(address(_filChainStatOracle)!=address(0), "address should not be 0");
        address originalOracle = address(filChainStatOracle);
        filChainStatOracle = _filChainStatOracle;
        emit FilChainStatOracleChanged(originalOracle, address(_filChainStatOracle));
    }

    function setLimitationRatio(uint256 _mintAmountLimitationRatio) public onlyOwner{
        require(_mintAmountLimitationRatio > 0, "value should be > 0");
        uint256 originalValue = mintAmountLimitationRatio;
        mintAmountLimitationRatio = _mintAmountLimitationRatio;
        emit LimitationRatioChanged(originalValue, _mintAmountLimitationRatio);
    }

    function setMiningNFTMintingLimitationData(IMiningNFTMintingLimitationData _limitationData) public onlyOwner{
        require(address(_limitationData)!=address(0), "address should not be 0");
        address original = address(limitationData);
        limitationData = _limitationData;
        emit MiningNFTMintingLimitationDataChanged(original, address(_limitationData));
    }
   

}

contract Poster is Ownable{
    address public poster;
    event PosterChanged(address originalPoster, address newPoster);

    modifier onlyPoster(){
        require(poster == _msgSender(), "not poster");
        _;
    }

    function setPoster(address _poster) public onlyOwner{
        require(_poster != address(0), "address should not be 0");
        emit PosterChanged(poster, _poster);
        poster = _poster;
    }
}

contract MiningNFTMintingLimitation is Poster,MiningNFTMintingLimitationBase{
    using SafeMath for uint256;

    constructor(IMinerManage _minerManage, IFilChainStatOracle _filChainStatOracle, IMiningNFTMintingLimitationData _limitationData) MiningNFTMintingLimitationBase(_minerManage, _filChainStatOracle, _limitationData){
        
    }

    function increaseLimitation(uint256 _limitationDelta) public onlyPoster{
        require(limitationData.totalMintLimitationInTiB().add(_limitationDelta) <= getTotalLimitationCap(), "limitaion exceed hardcap");
        
        string[] memory minerList = minerManage.getMinerList();
        uint256 totalAdjustedPower = filChainStatOracle.minerTotalAdjustedPower();

        for(uint i=0; i<minerList.length; i++){
            string memory minerId = minerList[i];
            increaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);
        }
    }

    function increaseLimitationBatch(string[] memory _minerList, uint256 _limitationDelta) public onlyPoster{
        require(limitationData.totalMintLimitationInTiB().add(_limitationDelta) <= getTotalLimitationCap(), "limitaion exceed hardcap");
        uint256 totalAdjustedPower = getTotalAdjustedPower(_minerList);

        for(uint i=0; i<_minerList.length; i++){
            string memory minerId = _minerList[i];
            increaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);
        }
    }

    function increaseMinerLimitation(string memory _minerId, uint256 _limitationDelta, uint256 totalAdjustedPower) internal {
        uint256 minerAdjustedPower = filChainStatOracle.minerAdjustedPower(_minerId);
        uint256 minerLimitationHardCap = minerAdjustedPower.mul(mintAmountLimitationRatio).div(RATIO_DENOMINATOR);
        uint256 minerLimitationDelta = minerAdjustedPower.mul(_limitationDelta).div(totalAdjustedPower);
        uint256 minerLimitationPrev = limitationData.minerMintAmountLimitation(_minerId);
        
        if(minerLimitationPrev.add(minerLimitationDelta) > minerLimitationHardCap){
            minerLimitationDelta = minerLimitationHardCap.sub(minerLimitationPrev);
        }

        limitationData.increaseMinerLimitation(_minerId, minerLimitationDelta);
    }

    function decreaseLimitation(uint256 _limitationDelta) public onlyPoster{
        string[] memory minerList = minerManage.getMinerList();
        uint256 totalAdjustedPower = filChainStatOracle.minerTotalAdjustedPower();

        for(uint i=0; i<minerList.length; i++){
            string memory minerId = minerList[i];
            decreaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);
        }
    }

    function decreaseLimitationBatch(string[] memory _minerList, uint256 _limitationDelta) public onlyPoster{
        uint256 totalAdjustedPower = getTotalAdjustedPower(_minerList);

        for(uint i=0; i<_minerList.length; i++){
            string memory minerId = _minerList[i];
            decreaseMinerLimitation(minerId, _limitationDelta, totalAdjustedPower);
        }
    }

    function decreaseMinerLimitation(string memory _minerId, uint256 _limitationDelta, uint256 totalAdjustedPower) internal{
        uint256 minerAdjustedPower = filChainStatOracle.minerAdjustedPower(_minerId);
        uint256 minerLimitationDelta = minerAdjustedPower.mul(_limitationDelta).div(totalAdjustedPower);

        limitationData.decreaseMinerLimitation(_minerId, minerLimitationDelta);
    }

    function getTotalAdjustedPower(string[] memory _minerList) internal view returns(uint256 totalAdjustedPower){
        for(uint i=0; i<_minerList.length; i++){
            string memory minerId = _minerList[i];
            uint256 minerAdjustedPower = filChainStatOracle.minerAdjustedPower(minerId);
            totalAdjustedPower = totalAdjustedPower.add(minerAdjustedPower);
        }
    }

    function checkLimitation(string memory _minerId, uint256 _minerTotalMinted, uint256 _allMinersTotalMinted) public view returns(bool, string memory){
        if(_minerTotalMinted > limitationData.minerMintAmountLimitation(_minerId)){
            return (false, "mint amount exceed miner limitation");
        }

        if(_allMinersTotalMinted > limitationData.totalMintLimitationInTiB()){
            return (false, "exceed platform total mint limitation");
        }

        return (true, "");
    }


}