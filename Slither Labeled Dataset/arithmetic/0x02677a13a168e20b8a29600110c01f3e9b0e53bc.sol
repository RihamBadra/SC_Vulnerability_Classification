

pragma solidity 0.6.6;





library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}

interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    
    constructor (string memory name_, string memory symbol_) public {
        _name = name_;
        _symbol = symbol_;
        _decimals = 18;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}



contract ITCO { 
    using SafeMath for uint256;
    address payable public tk; 
    address payable owner; 
    uint256 totalDeps = 0;
    uint256 public sta = 0;
    uint256 public end = 0; 
    uint256 public total;


    uint256 public base = 1000000000000000000;

    
    
    uint256 t1 =  450000000000000000000000;
    uint256 t2 =  550000000000000000000000;
    uint256 t3 =  750000000000000000000000;
    uint256 t4 = 1050000000000000000000000;
    uint256 t5 = 1400000000000000000000000;
    uint256 t6 = 1800000000000000000000000;

    
    uint256 p1 =  35000000000000;
    uint256 p2 =  40000000000000;
    uint256 p3 =  45000000000000;
    uint256 p4 =  50000000000000;
    uint256 p5 =  55000000000000;
    uint256 p6 =  60000000000000;


    
    constructor(address payable tk_) public {
        owner = msg.sender;
        tk = tk_;
    }

    modifier onlyOwner() {
        require(owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

      
    function transferOwner(address payable newOwner_) public onlyOwner {
      owner = newOwner_;
    }

    
    function open(uint a, uint256 t) external onlyOwner {
        ERC20 token = ERC20(tk);
        require(token.transferFrom(msg.sender, address(this), a), "transfer failed");
        sta = block.timestamp;
        end = block.timestamp + t;
        total = a;
    }

    
    function currentTier() external view returns (uint256, uint256){
        uint256 price;
        uint256 t;
        if (totalDeps >= t5) {
            t = 6;
            price = p6;
        } else if (totalDeps >= t4) {
            t = 5;
            price = p5;
        } else if (totalDeps >= t3) {
            t = 4;
            price = p4;
        } else if (totalDeps >= t2) {
            t = 3;
            price = p3;
        } else if (totalDeps >= t1) {
            t = 2;
            price = p2;
        } else {
            t = 1;
            price = p1;
        }
        return (t, price);
    }


    
    function collect() external onlyOwner {
        require(end != 0, "ITCO not opened yet");
        require(block.timestamp > end, "ITCO not ended yet");
        require(msg.sender.send(address(this).balance), "transfer failed");

        
        ERC20 token = ERC20(tk);
        uint256 balance = token.balanceOf(address(this));
        require(token.transfer(msg.sender, balance), "transfer failed");
    }

    

    
    fallback () external payable {
        require(sta > 0, "IBCO not opened yet");
        require(block.timestamp < end, "IBCO has ended");
        
        uint256 price;
        if (totalDeps >= t5) {
            price = p6;
        } else if (totalDeps >= t4) {
            price = p5;
        } else if (totalDeps >= t3) {
            price = p4;
        } else if (totalDeps >= t2) {
            price = p3;
        } else if (totalDeps >= t1) {
            price = p2;
        } else {
            price = p1;
        }
        
        require(msg.value > price, "insufficent payment for one token");

        
        uint256 tTS = (msg.value.div(price));
        tTS = tTS.mul(base);
        
        ERC20 token = ERC20(tk);
        uint256 balance = token.balanceOf(address(this));
        require(balance >= tTS, "insufficent balance left in itco");

        totalDeps = totalDeps.add(msg.value);
        require(token.transfer(msg.sender, tTS), "transfer failed");
    }
}