

pragma solidity ^0.5.0;





contract Context {
    
    
    constructor () internal { }
    

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; 
        return msg.data;
    }
}




contract Ownable  is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}

contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    
    function totalSupply() public view returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: mint to the zero address");

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal {
        require(account != address(0), "ERC20: burn from the zero address");

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _burnFrom(address account, uint256 amount) internal {
        _burn(account, amount);
        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
    }
}

contract ERC20Detailed is IERC20 {
    string private _name;
    string private _symbol;
    uint8 private _decimals;

    
    constructor (string memory name, string memory symbol, uint8 decimals) public {
        _name = name;
        _symbol = symbol;
        _decimals = decimals;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }
}

contract GreenClimateWorldToken is Context, ERC20, ERC20Detailed,Ownable {
    
   
    struct consumerRecords{
        address wallet;
        uint256 Ti; 
        uint256 RH; 
        uint256 Td; 
        uint256 C; 
        uint256 P;
        uint256 Co2; 
        uint256 O2;
        uint256 BP; 
        uint256 timestamp;
        uint256 rewards;
        uint256 dateID;
    }
 
    uint256[] private consumers;
    
    mapping(uint256=>consumerRecords)private consumer;
    mapping(address=>bool)private isConsumer;
    mapping(uint256=>mapping(uint256=>consumerRecords))public recordsList;


    
    constructor () public ERC20Detailed("Green Climate World Token", "WGC", 18) {
        _mint(_msgSender(), 150000000 * (10 ** uint256(decimals())));
    }
    
    
    function registerConsumer(uint256 _consumerNumber,address _address) public onlyOwner returns(bool){
     
        consumers.push(_consumerNumber);
        isConsumer[_address] = true;
        consumer[_consumerNumber].wallet = _address;
        
        return true;
    }
    
     
    function setConsumerReadings(uint256 _consumerNumber,uint256 _Ti,uint256 _RH,uint256 _Td,uint256 _C,uint256 _P,uint256 _Co2,uint256 _O2,uint256 _BP,uint256 _timestamp) public onlyOwner{
        
        consumer[_consumerNumber].Ti = _Ti;
        consumer[_consumerNumber].RH = _RH;
        consumer[_consumerNumber].Td= _Td;
        consumer[_consumerNumber].C = _C;
        consumer[_consumerNumber].P = _P;
        consumer[_consumerNumber].Co2 = _Co2;
        consumer[_consumerNumber].O2 = _O2;
        consumer[_consumerNumber].BP = _BP;
        consumer[_consumerNumber].timestamp = _timestamp;
        consumer[_consumerNumber].dateID = consumer[_consumerNumber].dateID.add(1);
        
        
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].Ti = _Ti;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].RH = _RH;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].Td= _Td;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].C = _C;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].P = _P;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].Co2 = _Co2;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].O2 = _O2;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].BP = _BP;
        recordsList[consumer[_consumerNumber].dateID][_consumerNumber].timestamp = _timestamp;
        
        
    }
    
     
    function returnConsumerReadings1(uint256 _consumerNumber) public view returns(uint256,uint256,uint256,uint256,uint256) {
        return (consumer[_consumerNumber].Ti, consumer[_consumerNumber].RH, consumer[_consumerNumber].Td,
        consumer[_consumerNumber].C, consumer[_consumerNumber].P);
    }
    
    
    function returnConsumerReadings2(uint256 _consumerNumber) public view returns(uint256,uint256,uint256,uint256) {
        return (consumer[_consumerNumber].Co2, consumer[_consumerNumber].O2, consumer[_consumerNumber].BP,consumer[_consumerNumber].timestamp);
    }
    
    
    
    function sendRewards() public onlyOwner returns(bool){
        
        for(uint i=0;i<consumers.length;i++){
            if(consumer[consumers[i]].O2>=consumer[consumers[i]].Co2){
                transfer(consumer[consumers[i]].wallet,consumer[consumers[i]].O2.div(consumer[consumers[i]].Co2).mul(10).mul((10 ** uint256(decimals()))));
                consumer[consumers[i]].rewards = consumer[consumers[i]].rewards.add(consumer[consumers[i]].O2.div(consumer[consumers[i]].Co2).mul(10).mul((10 ** uint256(decimals()))));
            }
        }
    }
    
    function sendTimelyRewards(uint256[] memory _consumerNumber,uint256[] memory _Co2List,uint256[] memory _O2List)public onlyOwner{
         
        for(uint i=0;i<_consumerNumber.length;i++){
          transfer(consumer[_consumerNumber[i]].wallet, _O2List[i].div(_Co2List[i]).mul(10).mul((10 ** uint256(decimals()))));
           consumer[consumers[i]].rewards = consumer[consumers[i]].rewards.add(_O2List[i].div(_Co2List[i]).mul(10).mul((10 ** uint256(decimals()))));
        }
    }
    
     
    function consumerWallet(uint256 _consumerNumber) public view returns(address){
        return consumer[_consumerNumber].wallet;
    }
    
     
    function consumerNumbers() public onlyOwner view returns(uint256[] memory){
        return consumers;
    }
    
     
    function consumerRewards(uint256 _consumerNumber) public view returns(uint256){
        return (consumer[_consumerNumber].rewards);
    }
    
    
    
    
}