





pragma solidity ^0.8.0;






library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
            uint256 c = a + b;
            if (c < a) return (false, 0);
            return (true, c);
        
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
            if (b > a) return (false, 0);
            return (true, a - b);
        
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
            
            
            
            if (a == 0) return (true, 0);
            uint256 c = a * b;
            if (c / a != b) return (false, 0);
            return (true, c);
        
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
            if (b == 0) return (false, 0);
            return (true, a / b);
        
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
            if (b == 0) return (false, 0);
            return (true, a % b);
        
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        return a + b;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        return a * b;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
            require(b <= a, errorMessage);
            return a - b;
        
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
            require(b > 0, errorMessage);
            return a / b;
        
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
            require(b > 0, errorMessage);
            return a % b;
        
    }
}



pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        this; 
        return msg.data;
    }
}



pragma solidity ^0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}



pragma solidity ^0.8.0;



abstract contract ERC165 is IERC165 {
    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}



pragma solidity ^0.8.0;


interface IAccessControl {
    function hasRole(bytes32 role, address account) external view returns (bool);
    function getRoleAdmin(bytes32 role) external view returns (bytes32);
    function grantRole(bytes32 role, address account) external;
    function revokeRole(bytes32 role, address account) external;
    function renounceRole(bytes32 role, address account) external;
}


abstract contract AccessControl is Context, IAccessControl, ERC165 {
    struct RoleData {
        mapping (address => bool) members;
        bytes32 adminRole;
    }

    mapping (bytes32 => RoleData) private _roles;

    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;

    
    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);

    
    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);

    
    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);

    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IAccessControl).interfaceId
            || super.supportsInterface(interfaceId);
    }

    
    function hasRole(bytes32 role, address account) public view override returns (bool) {
        return _roles[role].members[account];
    }

    
    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {
        return _roles[role].adminRole;
    }

    
    function grantRole(bytes32 role, address account) public virtual override {
        require(hasRole(getRoleAdmin(role), _msgSender()), "AccessControl: sender must be an admin to grant");

        _grantRole(role, account);
    }

    
    function revokeRole(bytes32 role, address account) public virtual override {
        require(hasRole(getRoleAdmin(role), _msgSender()), "AccessControl: sender must be an admin to revoke");

        _revokeRole(role, account);
    }

    
    function renounceRole(bytes32 role, address account) public virtual override {
        require(account == _msgSender(), "AccessControl: can only renounce roles for self");

        _revokeRole(role, account);
    }

    
    function _setupRole(bytes32 role, address account) internal virtual {
        _grantRole(role, account);
    }

    
    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {
        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);
        _roles[role].adminRole = adminRole;
    }

    function _grantRole(bytes32 role, address account) private {
        if (!hasRole(role, account)) {
            _roles[role].members[account] = true;
            emit RoleGranted(role, account, _msgSender());
        }
    }

    function _revokeRole(bytes32 role, address account) private {
        if (hasRole(role, account)) {
            _roles[role].members[account] = false;
            emit RoleRevoked(role, account, _msgSender());
        }
    }
}



pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}



pragma solidity ^0.8.0;


library SafeERC20 {
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



pragma solidity ^0.8.0;


abstract contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}



pragma solidity ^0.8.3;

interface Uniswap {
  function swapExactTokensForETH(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)
    external returns (uint256[] memory amounts);
  function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)
    external payable returns (uint256[] memory amounts);
  function addLiquidityETH(address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline)
    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);
  function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline)
    external returns (uint amountA, uint amountB);
  function getPair(address tokenA, address tokenB)
    external view returns (address pair);
  function WETH() external pure returns (address);
  function getAmountsOut(uint amountIn, address[] memory path)
    external view returns (uint[] memory amounts);
  function getAmountsIn(uint amountOut, address[] memory path)
    external view returns (uint[] memory amounts);
  function getReserves() 
    external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);
  function token0() external view returns (address);
  function token1() external view returns (address);
}



pragma solidity ^0.8.3;

contract MainnetBridgePool is AccessControl, ReentrancyGuard {
  bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

  using SafeMath for uint256;
  using SafeERC20 for IERC20;

  IERC20 public raini;

  event Deposited(address indexed spender, address recipient, uint256 amount, uint256 requestId);
  event Withdrawn(address indexed owner, uint256 amount, uint256 requestId);
  event EthWithdrawn(uint256 amount);
  event FeeSet(uint256 fee, uint256 percentFee, uint256 percentFeeDecimals);
  event AutoWithdrawFeeSet(bool autoWithdraw);
  event TreasuryAddressSet(address treasuryAddress);

  uint256 public  requestId;
  uint256 public  fee;
  uint256 public  percentFee;
  uint    public  percentFeeDecimals;
  bool    public  autoWithdrawFee;
  address public  treasuryAddress;

  address private constant  UNIROUTER     = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;
  address private constant  FACTORY       = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;
  address private           WETHAddress   = Uniswap(UNIROUTER).WETH();

  constructor(address _raini) {
    require(_raini != address(0), "MainnetBridgePool: _raini is zero address");

    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
    treasuryAddress = _msgSender();
    raini = IERC20(_raini);
  }

  modifier onlyMinter() {
    require(hasRole(MINTER_ROLE, _msgSender()), "MainnetBridgePool: caller is not a minter");
    _;
  }

  modifier onlyOwner() {
    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "MainnetBridgePool: caller is not an owner");
    _;
  }

  function getFee(uint _amount) public view returns (uint256) {
    address lp = Uniswap(FACTORY).getPair(address(raini), WETHAddress);
    (uint reserve0, uint reserve1, ) = Uniswap(lp).getReserves();
    uint256 eth;
    if(Uniswap(lp).token0() == address(raini)) {
      eth = reserve1.mul(_amount).div(reserve0);
    } else {
      eth = reserve0.mul(_amount).div(reserve1);
    }
    return fee + eth.mul(percentFee).div(10 ** percentFeeDecimals);
  }

  function setFee(uint256 _fee, uint256 _percentFee, uint256 _percentFeeDecimals)
    external onlyOwner {
      fee = _fee;
      percentFee = _percentFee;
      percentFeeDecimals = _percentFeeDecimals;
      emit FeeSet(_fee, _percentFee, _percentFeeDecimals);
  }

  function setAutoWithdrawFee(bool _autoWithdrawFee)
    external onlyOwner {
      autoWithdrawFee = _autoWithdrawFee;
      emit AutoWithdrawFeeSet(autoWithdrawFee);
  }

  function setTreasuryAddress(address _treasuryAddress)
    external onlyOwner {
      treasuryAddress = _treasuryAddress;
      emit TreasuryAddressSet(_treasuryAddress);
  }  

  function deposit(address _recipient, uint256 _amount) 
    external payable nonReentrant {
      uint256 depositFee = getFee(_amount);
      require(msg.value >= depositFee, "MainnetBridgePool: not enough eth");

      raini.safeTransferFrom(_msgSender(), address(this), _amount);

      uint256 refund = msg.value - depositFee;
      if(refund > 0) {
        (bool refundSuccess, ) = _msgSender().call{ value: refund }("");
        require(refundSuccess, "MainnetBridgePool: refund transfer failed");
      }

      if (autoWithdrawFee) {
        (bool withdrawSuccess, ) = treasuryAddress.call{ value: depositFee }("");
        require(withdrawSuccess, "MainnetBridgePool: withdraw transfer failed");
      }

      requestId++;
      emit Deposited(_msgSender(), _recipient, _amount, requestId);
  }

  function withdraw(address[] memory _owners, uint256[] memory _amounts, uint256[] memory _requestsIds) 
    external onlyMinter {
      require(_owners.length == _amounts.length && _owners.length == _requestsIds.length, "MainnetBridgePool: Arrays length not equal");

      for (uint256 i; i < _owners.length; i++) {
        raini.safeTransfer(_owners[i], _amounts[i]);
        emit Withdrawn(_owners[i], _amounts[i], _requestsIds[i]);
      }
  }

  function withdrawEth(uint256 _amount)
    external onlyOwner {
      require(_amount <= address(this).balance, "MainnetBridgePool: not enough balance");
      (bool success, ) = _msgSender().call{ value: _amount }("");
      require(success, "MainnetBridgePool: transfer failed");
      emit EthWithdrawn(_amount);
  }
}