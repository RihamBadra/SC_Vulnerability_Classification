



pragma solidity ^0.6.12;

abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}


library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}




contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    
    constructor (string memory name, string memory symbol) public {
        _name = name;
        _symbol = symbol;
        _decimals = 18;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}


contract CityToken is ERC20("CityToken", "CT"), Ownable {
    
    uint256 public constant MAX_SUPPLY = 6841000000 * 10**18;
        
    
    function mint(address _to, uint256 _amount) public onlyOwner {
        uint256 _totalSupply = totalSupply();
        
        if(_totalSupply.add(_amount) > MAX_SUPPLY) {
            _amount = MAX_SUPPLY.sub(_totalSupply);
        }

        require(_totalSupply.add(_amount) <= MAX_SUPPLY);
        
        _mint(_to, _amount);
    }
}

contract CityAgency is Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    
    struct UserInfo {
        uint256 amount;     
        uint256 rewardDebt; 
        
        
        
        
        
        
        
        
        
        
        
    }

    
    struct PoolInfo {
        IERC20 lpToken;             
        uint256 allocPoint;         
        uint256 lastRewardBlock;    
        uint256 accCityPerShare;    
        uint256 farmStartBlockNum;  
        uint256 bonus1EndBlockNum;  
        uint256 bonus2EndBlockNum;  
    }

    
    CityToken public city;
    
    address public devaddr;
    
    uint256 public cityPerBlock;
    
    uint256 public halvingEndBlock1;
    uint256 public halvingEndBlock2;
    
    uint256 public constant BONUS_MULTIPLIER_1WEEK = 4; 
    uint256 public constant BONUS_MULTIPLIER_2WEEK = 2; 
    
    uint256 public constant HALVING_MULTIPLIER_1 = 4;
    uint256 public constant HALVING_MULTIPLIER_2 = 2;

    
    PoolInfo[] public poolInfo;
    
    mapping (uint256 => mapping (address => UserInfo)) public userInfo;
    
    uint256 public totalAllocPoint = 0;
    
    uint256 public startBlock;
    
    uint256 public endBlock;

    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);
    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);
    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);

    constructor(
        CityToken _city,
        address _devaddr,
        uint256 _cityPerBlock,
        uint256 _startBlock
    ) public {
        city = _city;
        devaddr = _devaddr;
        cityPerBlock = _cityPerBlock;
        startBlock = _startBlock;
        halvingEndBlock1 = startBlock.add(3153600); 
        halvingEndBlock2 = startBlock.add(6307200); 
        endBlock = startBlock.add(31536000); 
    }

    function poolLength() external view returns (uint256) {
        return poolInfo.length;
    }

    
    
    function add(uint256 _allocPoint, uint256 _farmStartBlockNum, IERC20 _lpToken, bool _withUpdate) public onlyOwner {
        if (_withUpdate) {
            massUpdatePools();
        }
        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;
        uint256 bonus1EndBlockNum = _farmStartBlockNum.add(60480); 
        uint256 bonus2EndBlockNum = _farmStartBlockNum.add(120960); 

        if(lastRewardBlock < _farmStartBlockNum) {
            lastRewardBlock = _farmStartBlockNum;
        }
        totalAllocPoint = totalAllocPoint.add(_allocPoint);
        poolInfo.push(PoolInfo({
            lpToken: _lpToken,
            allocPoint: _allocPoint,
            lastRewardBlock: lastRewardBlock,
            accCityPerShare: 0,
            farmStartBlockNum: _farmStartBlockNum,            
            bonus1EndBlockNum: bonus1EndBlockNum,
            bonus2EndBlockNum: bonus2EndBlockNum
        }));
    }

    
    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {
        if (_withUpdate) {
            massUpdatePools();
        }
        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);
        poolInfo[_pid].allocPoint = _allocPoint;
    }

    
    function getMultiplier(uint256 _from, uint256 _to, uint256 _bonus1EndBlockNum, uint256 _bonus2EndBlockNum, uint256 _bonusMul1, uint256 _bonusMul2) public view returns (uint256) {
        if (_from <= _bonus1EndBlockNum) {
            if (_to <= _bonus1EndBlockNum) {
                return _to.sub(_from).mul(_bonusMul1);
            }
            else if (_to <= _bonus2EndBlockNum) {                
                return _bonus1EndBlockNum.sub(_from).mul(_bonusMul1).add(
                    _to.sub(_bonus1EndBlockNum).mul(_bonusMul2));
            }
            else {
                return _bonus1EndBlockNum.sub(_from).mul(_bonusMul1).add(
                    _bonus2EndBlockNum.sub(_bonus1EndBlockNum).mul(_bonusMul2)).add(
                        _to.sub(_bonus2EndBlockNum));
            }
        }
        else if (_from <= _bonus2EndBlockNum) {
            if (_to <= _bonus2EndBlockNum) {
                return _to.sub(_from).mul(_bonusMul2);
            }
            else {                
                return _bonus2EndBlockNum.sub(_from).mul(_bonusMul2).add(
                    _to.sub(_bonus2EndBlockNum));
            }
        }
        else {
            return _to.sub(_from);
        }
    }

    
    function pendingCity(uint256 _pid, address _user) external view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][_user];
        uint256 accCityPerShare = pool.accCityPerShare;
        uint256 farmStartBlockNum = pool.farmStartBlockNum;
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (block.number > farmStartBlockNum && block.number > pool.lastRewardBlock && lpSupply != 0) {
            uint256 multiplier1 = getMultiplier(pool.lastRewardBlock, block.number, pool.bonus1EndBlockNum, pool.bonus2EndBlockNum, BONUS_MULTIPLIER_1WEEK, BONUS_MULTIPLIER_2WEEK);
            uint256 multiplier2 = getMultiplier(pool.lastRewardBlock, block.number, halvingEndBlock1, halvingEndBlock2, HALVING_MULTIPLIER_1, HALVING_MULTIPLIER_2);
            uint256 cityReward = multiplier1.mul(multiplier2).mul(cityPerBlock).mul(pool.allocPoint).div(totalAllocPoint).div(block.number.sub(pool.lastRewardBlock));
            accCityPerShare = accCityPerShare.add(cityReward.mul(1e12).div(lpSupply));
        }
        return user.amount.mul(accCityPerShare).div(1e12).sub(user.rewardDebt);
    }

    
    function massUpdatePools() public {
        uint256 length = poolInfo.length;
        for (uint256 pid = 0; pid < length; ++pid) {
            updatePool(pid);
        }
    }
    
    function mint(uint256 amount) public onlyOwner{
        city.mint(devaddr, amount);
    }
    
    function updatePool(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number <= pool.lastRewardBlock) {
            return;
        }
        if (block.number <= pool.farmStartBlockNum) {
            return;
        }
        uint256 lpSupply = pool.lpToken.balanceOf(address(this));
        if (lpSupply == 0) {
            pool.lastRewardBlock = block.number;
            return;
        }
        uint256 multiplier1 = getMultiplier(pool.lastRewardBlock, block.number, pool.bonus1EndBlockNum, pool.bonus2EndBlockNum, BONUS_MULTIPLIER_1WEEK, BONUS_MULTIPLIER_2WEEK);
        uint256 multiplier2 = getMultiplier(pool.lastRewardBlock, block.number, halvingEndBlock1, halvingEndBlock2, HALVING_MULTIPLIER_1, HALVING_MULTIPLIER_2);
        uint256 cityReward = multiplier1.mul(multiplier2).mul(cityPerBlock).mul(pool.allocPoint).div(totalAllocPoint).div(block.number.sub(pool.lastRewardBlock));
        city.mint(devaddr, cityReward.div(20)); 
        city.mint(address(this), cityReward);
        pool.accCityPerShare = pool.accCityPerShare.add(cityReward.mul(1e12).div(lpSupply));
        pool.lastRewardBlock = block.number;
    }

    
    function getBurningInform(uint256 _pid) external view returns (uint256) {
        PoolInfo storage pool = poolInfo[_pid];
        if (block.number >= pool.farmStartBlockNum) {
            if(block.number < pool.bonus1EndBlockNum) {
                return BONUS_MULTIPLIER_1WEEK;
            }
            else if (block.number < pool.bonus2EndBlockNum) {
                return BONUS_MULTIPLIER_2WEEK;
            }
            else {
                return 1;
            }
        }
        else {
            return 0;
        }
    }

    
    function deposit(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        updatePool(_pid);
        if (user.amount > 0) {
            uint256 pending = user.amount.mul(pool.accCityPerShare).div(1e12).sub(user.rewardDebt);
            safeCityTransfer(msg.sender, pending);
        }
        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);
        user.amount = user.amount.add(_amount);
        user.rewardDebt = user.amount.mul(pool.accCityPerShare).div(1e12);
        emit Deposit(msg.sender, _pid, _amount);
    }

    
    function withdraw(uint256 _pid, uint256 _amount) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        require(user.amount >= _amount, "withdraw: not good");
        updatePool(_pid);
        uint256 pending = user.amount.mul(pool.accCityPerShare).div(1e12).sub(user.rewardDebt);
        safeCityTransfer(msg.sender, pending);
        user.amount = user.amount.sub(_amount);
        user.rewardDebt = user.amount.mul(pool.accCityPerShare).div(1e12);
        pool.lpToken.safeTransfer(address(msg.sender), _amount);
        emit Withdraw(msg.sender, _pid, _amount);
    }

    
    function emergencyWithdraw(uint256 _pid) public {
        PoolInfo storage pool = poolInfo[_pid];
        UserInfo storage user = userInfo[_pid][msg.sender];
        pool.lpToken.safeTransfer(address(msg.sender), user.amount);
        emit EmergencyWithdraw(msg.sender, _pid, user.amount);
        user.amount = 0;
        user.rewardDebt = 0;
    }

    
    function safeCityTransfer(address _to, uint256 _amount) internal {
        uint256 cityBal = city.balanceOf(address(this));
        if (_amount > cityBal) {
            city.transfer(_to, cityBal);
        } else {
            city.transfer(_to, _amount);
        }
    }

    
    function dev(address _devaddr) public {
        require(msg.sender == devaddr, "dev: wut?");
        devaddr = _devaddr;
    }
}