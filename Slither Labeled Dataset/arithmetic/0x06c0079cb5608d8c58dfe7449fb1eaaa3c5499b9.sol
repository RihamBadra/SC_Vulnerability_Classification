

pragma solidity 0.5.16;

interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


contract Context {
  
  
  constructor () internal { }

  function _msgSender() internal view returns (address payable) {
    return msg.sender;
  }

  function _msgData() internal view returns (bytes memory) {
    this; 
    return msg.data;
  }
}


library SafeMath {
  
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath: addition overflow");

    return c;
  }

  
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    return sub(a, b, "SafeMath: subtraction overflow");
  }

  
  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b <= a, errorMessage);
    uint256 c = a - b;

    return c;
  }

  
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    
    
    
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath: multiplication overflow");

    return c;
  }

  
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    return div(a, b, "SafeMath: division by zero");
  }

  
  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    
    require(b > 0, errorMessage);
    uint256 c = a / b;
    

    return c;
  }

  
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    return mod(a, b, "SafeMath: modulo by zero");
  }

  
  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
    require(b != 0, errorMessage);
    return a % b;
  }
}


contract Ownable is Context {
  address private _owner;

  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

  
  constructor () internal {
    address msgSender = _msgSender();
    _owner = msgSender;
    emit OwnershipTransferred(address(0), msgSender);
  }

  
  function owner() public view returns (address) {
    return _owner;
  }

  
  modifier onlyOwner() {
    require(_owner == _msgSender(), "Ownable: caller is not the owner");
    _;
  }

  
  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0), "Ownable: new owner is the zero address");
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

contract Miner5 is Context, IERC20, Ownable {
  using SafeMath for uint256;

  mapping (address => uint256) private _balances;
  mapping (address => mapping (address => uint256)) private _allowances;

  string private _symbol;
  string private _name;

  uint256 private _totalSupply;
  uint8 private _decimals;
  uint8 public investorIndex;
  uint256 public finalTotalSupply;
  uint256 public investorsCap;
  uint256 public investorsClaimed;
  
  struct VestibleToken {
    string vestingOwnerName;
    uint256 vestingStartTime;
    uint256 vestingTimeUnit;
    uint256 numVestingPeriods;
    uint256 supplyLeftToVest;
    uint256 supplyVested;
  }
  
  
  
  mapping (uint8 => VestibleToken) public vestibleTokens;

  constructor() public {
    _name = "Mine5 Coin";
    _symbol = "M5";
    _decimals = 18;
    
    finalTotalSupply = 1e9 * 1e18;
    _totalSupply = finalTotalSupply; 

    uint48 startTime = uint48(now);

    
    vestibleTokens[0] = VestibleToken("team", startTime, 1 minutes, 10, finalTotalSupply.mul(10).div(100), 0);
    vestibleTokens[1] = VestibleToken("operations", startTime, 30 seconds, 12, finalTotalSupply.mul(6).div(100), 0);

    _totalSupply = _totalSupply.sub(vestibleTokens[0].supplyLeftToVest);
    _totalSupply = _totalSupply.sub(vestibleTokens[1].supplyLeftToVest);

    investorIndex = 2;

    investorsCap = finalTotalSupply.mul(20).div(100);
    _totalSupply = _totalSupply.sub(investorsCap);

    _balances[msg.sender] = _totalSupply;

    emit Transfer(address(0), msg.sender, _totalSupply);
  }

  
  function getOwner() external view returns (address) {
    return owner();
  }

  
  function decimals() external view returns (uint8) {
    return _decimals;
  }

  
  function symbol() external view returns (string memory) {
    return _symbol;
  }

  
  function name() external view returns (string memory) {
    return _name;
  }

  
  function totalSupply() external view returns (uint256) {
    return _totalSupply;
  }

  
  function balanceOf(address account) external view returns (uint256) {
    return _balances[account];
  }

  
  function transfer(address recipient, uint256 amount) external returns (bool) {
    _transfer(_msgSender(), recipient, amount);
    return true;
  }

  
  function allowance(address owner, address spender) external view returns (uint256) {
    return _allowances[owner][spender];
  }

  
  function approve(address spender, uint256 amount) external returns (bool) {
    _approve(_msgSender(), spender, amount);
    return true;
  }

  
  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {
    _transfer(sender, recipient, amount);
    _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
    return true;
  }

  
  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
    return true;
  }

  
  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
    _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
    return true;
  }















  
  function _transfer(address sender, address recipient, uint256 amount) internal {
    require(sender != address(0), "ERC20: transfer from the zero address");
    require(recipient != address(0), "ERC20: transfer to the zero address");

    _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
    _balances[recipient] = _balances[recipient].add(amount);
    emit Transfer(sender, recipient, amount);
  }

  
  function _mint(address account, uint256 amount) internal {
    require(account != address(0), "ERC20: mint to the zero address");

    _totalSupply = _totalSupply.add(amount);
    _balances[account] = _balances[account].add(amount);
    emit Transfer(address(0), account, amount);
  }

  
  function _burn(address account, uint256 amount) internal {
    require(account != address(0), "ERC20: burn from the zero address");

    _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
    _totalSupply = _totalSupply.sub(amount);
    emit Transfer(account, address(0), amount);
  }

  
  function _approve(address owner, address spender, uint256 amount) internal {
    require(owner != address(0), "ERC20: approve from the zero address");
    require(spender != address(0), "ERC20: approve to the zero address");

    _allowances[owner][spender] = amount;
    emit Approval(owner, spender, amount);
  }

  
  function _burnFrom(address account, uint256 amount) internal {
    _burn(account, amount);
    _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));
  }

  
  function burn(uint256 _value) public {
      _burn(msg.sender, _value);
  }

  event InvestorAdded(
    uint8 index,
    string vestingOwnerName,
    uint256 vestingStartTime,
    uint256 vestingTimeUnit,
    uint256 numVestingPeriods,
    uint256 supplyLeftToVest,
    uint256 supplyVested,
    uint256 tokensPerVesting);

  function computeTokensPerVesting(VestibleToken memory token) internal pure returns (uint256) {
    return token.supplyLeftToVest.add(token.supplyVested).div(token.numVestingPeriods);
  }

  function addInvestor(string memory _investorName,  uint256 _vestingTimeUnit, uint8 _numVestingPeriods, uint256 _tokensToVest) public onlyOwner {
    require(investorsClaimed.add(_tokensToVest ) <= investorsCap);
    require(investorIndex < 255, "InvestorIndex overflow");
    require(_numVestingPeriods > 0, "numVestingPeriods should be positive");

    uint256 startTime = now;
    investorsClaimed = investorsClaimed.add(_tokensToVest);
    
    vestibleTokens[investorIndex] = VestibleToken(_investorName, startTime, _vestingTimeUnit, _numVestingPeriods, _tokensToVest, 0);

    emit InvestorAdded(
        investorIndex,
        vestibleTokens[investorIndex].vestingOwnerName,
        vestibleTokens[investorIndex].vestingStartTime,
        vestibleTokens[investorIndex].vestingTimeUnit,
        vestibleTokens[investorIndex].numVestingPeriods,
        vestibleTokens[investorIndex].supplyLeftToVest,
        vestibleTokens[investorIndex].supplyVested,
        computeTokensPerVesting(vestibleTokens[investorIndex]));

    investorIndex++;
  }

  event TokenVested(
      uint8 index,
      uint256 numVestingPeriodsPassed,
      uint256 tokensJustVested,
      uint256 supplyVested,
      uint256 supplyLeftToVest);
  
  function releaseIthInvestorTokens(uint8 index) public onlyOwner {
    uint256 tokensPerVesting = computeTokensPerVesting(vestibleTokens[index]);
    require(vestibleTokens[index].supplyLeftToVest >= tokensPerVesting, "Not enough to vest");

    uint256 numVestingPeriodsPassed = now.sub(vestibleTokens[index].vestingStartTime).div(vestibleTokens[index].vestingTimeUnit);
    uint256 unlockedTokens = numVestingPeriodsPassed.mul(tokensPerVesting);
    require(unlockedTokens > vestibleTokens[index].supplyVested, "Not enough unlocked");
    require(vestibleTokens[index].supplyVested.div(tokensPerVesting) < vestibleTokens[index].numVestingPeriods, "Cannot vest more than numVestingPeriods");
    vestibleTokens[index].supplyVested = vestibleTokens[index].supplyVested.add(tokensPerVesting);
    vestibleTokens[index].supplyLeftToVest = vestibleTokens[index].supplyLeftToVest.sub(tokensPerVesting);
    _mint(msg.sender, tokensPerVesting);
    
    emit TokenVested(
        index, numVestingPeriodsPassed, tokensPerVesting,
        vestibleTokens[index].supplyVested, vestibleTokens[index].supplyLeftToVest);
  }
}