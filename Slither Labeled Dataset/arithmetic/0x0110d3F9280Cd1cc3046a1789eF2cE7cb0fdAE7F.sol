

pragma solidity ^0.4.18;



library SafeMath {

  
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    
    uint256 c = a / b;
    
    return c;
  }

  
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}



contract Ownable {
  address public owner;


  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);


  
  function Ownable() public {
    owner = msg.sender;
  }

  
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  
  function transferOwnership(address newOwner) public onlyOwner {
    require(newOwner != address(0));
    OwnershipTransferred(owner, newOwner);
    owner = newOwner;
  }

}



contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}




contract ERC20 is ERC20Basic {
  function allowance(address owner, address spender) public view returns (uint256);
  function transferFrom(address from, address to, uint256 value) public returns (bool);
  function approve(address spender, uint256 value) public returns (bool);
  event Approval(address indexed owner, address indexed spender, uint256 value);
}



library SafeERC20 {
  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {
    assert(token.transfer(to, value));
  }

  function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {
    assert(token.transferFrom(from, to, value));
  }

  function safeApprove(ERC20 token, address spender, uint256 value) internal {
    assert(token.approve(spender, value));
  }
}



contract BasicTokenWithTransferAndDepositFees is ERC20Basic {
  using SafeMath for uint256;
  
  uint256 ONE_DAY_DURATION_IN_SECONDS = 86400;

  mapping(address => uint256) balances;

  uint256 totalSupply_;
  
  bool isLocked;
  
  address fee_address; 
  uint256 fee_base; 
  uint256 fee_rate;
  bool no_transfer_fee;
  
  address deposit_fee_address; 
  uint256 deposit_fee_base; 
  uint256 deposit_fee_rate;
  bool no_deposit_fee;
  
  mapping (address => bool) transfer_fee_exceptions_receiver;
  mapping (address => bool) transfer_fee_exceptions_sender;
  mapping (address => bool) deposit_fee_exceptions;
  
  mapping (address => uint256) last_deposit_fee_timestamps;
  address[] deposit_accounts;
  
  
  
  
  modifier notLocked() {
    require(!isLocked);
    _;
  }
  
  
  
  function BasicTokenWithTransferAndDepositFees() public {
    fee_address = msg.sender;
    fee_base = 10000;
    fee_rate = 20;
    no_transfer_fee = false;
    deposit_fee_address = msg.sender;
    deposit_fee_base = 10000000;
    deposit_fee_rate = 33;
    no_deposit_fee = false;
    transfer_fee_exceptions_receiver[msg.sender] = true;
    transfer_fee_exceptions_sender[msg.sender] = true;
    deposit_fee_exceptions[msg.sender] = true;
    isLocked = false;
  }
  
  
  function totalSupply() public view returns (uint256) {
    return totalSupply_;
  }
  
  
  function showTransferFeeConfig() public view returns (address, uint256, uint256, bool) {
    return (fee_address, fee_base, fee_rate, no_transfer_fee);
  }
  
  
  function showDepositFeeConfig() public view returns (address, uint256, uint256, bool) {
    return (deposit_fee_address, deposit_fee_base, deposit_fee_rate, no_deposit_fee);
  }
  
  
  function executeDepositFees(address _account) internal {
    if(last_deposit_fee_timestamps[_account] != 0) {
        if(!(no_deposit_fee || deposit_fee_exceptions[_account])) {
            uint256 days_elapsed = (now - last_deposit_fee_timestamps[_account]) / ONE_DAY_DURATION_IN_SECONDS;
            uint256 deposit_fee = days_elapsed * balances[_account] * deposit_fee_rate / deposit_fee_base;
            if(deposit_fee != 0) {
                balances[_account] = balances[_account].sub(deposit_fee);
                balances[deposit_fee_address] = balances[deposit_fee_address].add(deposit_fee);
                Transfer(_account, deposit_fee_address, deposit_fee);
            }
        }
        last_deposit_fee_timestamps[_account] = last_deposit_fee_timestamps[_account].add(days_elapsed * ONE_DAY_DURATION_IN_SECONDS);
    }
  }
  
  
  function calculateDepositFees(address _account) internal view returns (uint256) {
    if(last_deposit_fee_timestamps[_account] != 0) {
        if(!(no_deposit_fee || deposit_fee_exceptions[_account])) {
            uint256 days_elapsed = (now - last_deposit_fee_timestamps[_account]) / ONE_DAY_DURATION_IN_SECONDS;
            uint256 deposit_fee = days_elapsed * balances[_account] * deposit_fee_rate / deposit_fee_base;
            return deposit_fee;
        }
    }
    return 0;
  }

  
  function transfer(address _to, uint256 _value) public notLocked returns (bool) {
    require(_to != address(0));
    require(_value <= balanceOf(msg.sender));
    
    
    executeDepositFees(msg.sender);
    
    
    executeDepositFees(_to);
    

    
    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[msg.sender])) {
        uint256 transfer_fee = 2 * _value * fee_rate / fee_base;
    }
    
    
    balances[msg.sender] = balances[msg.sender].sub(_value);
    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[msg.sender])) {
        balances[_to] = balances[_to].add(_value - transfer_fee);
        balances[fee_address] = balances[fee_address].add(transfer_fee);
        Transfer(msg.sender, fee_address, transfer_fee);
    } else {
        balances[_to] = balances[_to].add(_value);
    }
    
    if(last_deposit_fee_timestamps[_to] == 0) {
        last_deposit_fee_timestamps[_to] = now;
        deposit_accounts.push(_to);
    }
    
    Transfer(msg.sender, _to, _value);
    return true;
  }

  
  function balanceOf(address _owner) public view returns (uint256 balance) {
    return balances[_owner] - calculateDepositFees(_owner);
  }

}





contract StandardToken is ERC20, BasicTokenWithTransferAndDepositFees {

  mapping (address => mapping (address => uint256)) internal allowed;


  
  function transferFrom(address _from, address _to, uint256 _value) public notLocked returns (bool) {
    require(_to != address(0));
    require(_value <= balanceOf(_from));
    require(_value <= allowed[_from][msg.sender]);
    
    
    executeDepositFees(_from);
    
    
    executeDepositFees(_to);
    
    
    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[_from])) {
        uint256 transfer_fee = 2 * _value * fee_rate / fee_base;
    }
    
    balances[_from] = balances[_from].sub(_value);
    if(!(no_transfer_fee || transfer_fee_exceptions_receiver[_to] || transfer_fee_exceptions_sender[_from])) {
        balances[_to] = balances[_to].add(_value - transfer_fee);
        balances[fee_address] = balances[fee_address].add(transfer_fee);
        Transfer(_from, fee_address, transfer_fee);
    } else {
        balances[_to] = balances[_to].add(_value);
    }
    
    if(last_deposit_fee_timestamps[_to] == 0) {
        last_deposit_fee_timestamps[_to] = now;
        deposit_accounts.push(_to);
    }
    
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);
    Transfer(_from, _to, _value);
    return true;
  }

  
  function approve(address _spender, uint256 _value) public notLocked returns (bool) {
    allowed[msg.sender][_spender] = _value;
    Approval(msg.sender, _spender, _value);
    return true;
  }

  
  function allowance(address _owner, address _spender) public view returns (uint256) {
    return allowed[_owner][_spender];
  }

  
  function increaseApproval(address _spender, uint _addedValue) public notLocked returns (bool) {
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

  
  function decreaseApproval(address _spender, uint _subtractedValue) public notLocked returns (bool) {
    uint oldValue = allowed[msg.sender][_spender];
    if (_subtractedValue > oldValue) {
      allowed[msg.sender][_spender] = 0;
    } else {
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
    }
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
    return true;
  }

}



contract SCX is StandardToken, Ownable { 
    
    event Burn(address indexed burner, uint256 value);
    
    
    string public constant symbol = "SCX";
    string public constant name =  "Digital Asset Fund";
    
    uint8 public constant decimals = 8;
    
    
    uint256 public constant INITIAL_SUPPLY = 10000000000000000;

    
    function SCX() public {
        totalSupply_ = INITIAL_SUPPLY;
        balances[msg.sender] = INITIAL_SUPPLY;
        Transfer(0x0, msg.sender, INITIAL_SUPPLY);
    }
    
    
    function mine(uint256 _amount) public onlyOwner notLocked {
        totalSupply_ = totalSupply_.add(_amount);
        balances[msg.sender] = balances[msg.sender].add(_amount);
        Transfer(0x0, msg.sender, _amount);
    }
    
    
    function burn(uint256 _value) public onlyOwner notLocked {
        require(_value <= balanceOf(msg.sender));
        
        
        
        address burner = msg.sender;
        balances[burner] = balances[burner].sub(_value);
        totalSupply_ = totalSupply_.sub(_value);
        Burn(burner, _value);
    }
    
    
    function executeDepositFeesForAllAccounts() public onlyOwner notLocked {
        uint arrayLength = deposit_accounts.length;
        for (uint i = 0; i < arrayLength; i++) {
            executeDepositFees(deposit_accounts[i]);
        }
    }
    
    
    function executeDepositFeesForAccountsFromTo(uint256 _from, uint256 _to) public onlyOwner notLocked {
        uint arrayLength = deposit_accounts.length;
        require(_from <= _to);
        require(_to <= arrayLength);
        for (uint i = _from; i < _to; i++) {
            executeDepositFees(deposit_accounts[i]);
        }
    }
    
    
    function calculateDepositFeesForAllAccounts() public onlyOwner view returns (uint) {
        uint arrayLength = deposit_accounts.length;
        uint sum = 0;
        for (uint i = 0; i < arrayLength; i++) {
            sum += calculateDepositFees(deposit_accounts[i]);
        }
        return sum;
    }
    
    
    function depositAccounts() public onlyOwner view returns (address[]) {
        return deposit_accounts;
    }
    
    
    function setFeeRate(uint256 _fee_rate) public onlyOwner notLocked {
        fee_rate = _fee_rate;
    }
    
    
    function setFeeBase(uint256 _fee_base) public onlyOwner notLocked {
        fee_base = _fee_base;
    }
    
    
    function setFeeAddress(address _fee_address) public onlyOwner notLocked {
        fee_address = _fee_address;
    }
    
    
    function setNoTransferFee(bool _no_transfer_fee) public onlyOwner notLocked {
        no_transfer_fee = _no_transfer_fee;
    }
    
    
    function setDepositFeeRate(uint256 _deposit_fee_rate) public onlyOwner notLocked {
        deposit_fee_rate = _deposit_fee_rate;
    }
    
    
    function setDepositFeeBase(uint256 _deposit_fee_base) public onlyOwner notLocked {
        deposit_fee_base = _deposit_fee_base;
    }
    
    
    function setDepositFeeAddress(address _deposit_fee_address) public onlyOwner notLocked {
        deposit_fee_address = _deposit_fee_address;
    }
    
    
    function setNoDepositFee(bool _no_deposit_fee, bool _reset_deposit_timestamp, uint256 _from, uint256 _to) public onlyOwner notLocked {
        no_deposit_fee = _no_deposit_fee;
        if(_reset_deposit_timestamp) {
            uint arrayLength = deposit_accounts.length;
            require(_from <= _to);
            require(_to <= arrayLength);
            for (uint i = _from; i < _to; i++) {
                last_deposit_fee_timestamps[deposit_accounts[i]] = now;
            }
        }
    }
    
    
    function addTransferFeeExceptionReceiver(address _add_transfer_fee_exception) public onlyOwner notLocked {
        transfer_fee_exceptions_receiver[_add_transfer_fee_exception] = true;
    }
    
    
    function removeTransferFeeExceptionReceiver(address _remove_transfer_fee_exception) public onlyOwner notLocked {
        transfer_fee_exceptions_receiver[_remove_transfer_fee_exception] = false;
    }
    
    
    function addTransferFeeExceptionSender(address _add_transfer_fee_exception) public onlyOwner notLocked {
        transfer_fee_exceptions_sender[_add_transfer_fee_exception] = true;
    }
    
    
    function removeTransferFeeExceptionSender(address _remove_transfer_fee_exception) public onlyOwner notLocked {
        transfer_fee_exceptions_sender[_remove_transfer_fee_exception] = false;
    }
    
    
    function addDepositFeeException(address _add_deposit_fee_exception) public onlyOwner notLocked {
        deposit_fee_exceptions[_add_deposit_fee_exception] = true;
    }
    
    
    function removeDepositFeeException(address _remove_deposit_fee_exception) public onlyOwner notLocked {
        deposit_fee_exceptions[_remove_deposit_fee_exception] = false;
        if(last_deposit_fee_timestamps[_remove_deposit_fee_exception] != 0) {
            last_deposit_fee_timestamps[_remove_deposit_fee_exception] = now;
        }
    }
    
    
    function setIsLocked(bool _isLocked) public onlyOwner {
        isLocked = _isLocked;
    }
    
    
    function getIsLocked() public view returns (bool) {
        return isLocked;
    }
}