


pragma solidity >=0.8.6;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


abstract contract Context {
    
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


abstract contract Ownable is Context {

    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}

abstract contract HoldersStorage {

    address[] internal _holders;

    constructor () 
    {}

    function holders() public view returns(address [] memory) {
        return _holders;
    }

    
    function isStakeholder(address _address) public view returns(bool, uint256) {
        for (uint256 s = 0; s < _holders.length; s++){
            if (_address == _holders[s]) return (true, s);
        }
        return (false, 0);
    }

    
    function addStakeholder(address _stakeholder) public {
        (bool _isStakeholder, ) = isStakeholder(_stakeholder);
        if(!_isStakeholder) _holders.push(_stakeholder);
    }

    
    function removeStakeholder(address _stakeholder) public {
        (bool _isStakeholder, uint256 s) = isStakeholder(_stakeholder);
        if(_isStakeholder){
            _holders[s] = _holders[_holders.length - 1];
            _holders.pop();
        }
    }
}


interface IERC20 {

    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);


    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);


    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



contract ERC20 is Context, IERC20, Ownable, HoldersStorage {

    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;

    string private _symbol;

    uint8 private _decimals;

    
    uint8 private _transferFees;

    
    uint256 private _totalDistributedAmount;

    
    uint256 private _lastDistributedAmount;

    
    uint256 private _lastDistributionDate;

    
    uint256 private _holdersBalanceAtLastDistribution;

    
    uint256 private _transferFeesBalance;
    
    
    constructor () Ownable() HoldersStorage() {
        _name     = 'Hunter Crypto Coin';
        _symbol   = 'HCC';
        _setupDecimals(18);
        _mint(owner(), 500000000 * 10 ** decimals());
        _transferFees                     = 2;
        _transferFeesBalance              = 0;
        _totalDistributedAmount           = 0;
        _lastDistributionDate             = 0;
        _lastDistributedAmount            = 0;
        _holdersBalanceAtLastDistribution = 0;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address from, address spender) public view virtual override returns (uint256) {
        return _allowances[from][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");
        _beforeTokenTransfer(sender, recipient, amount);
        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        uint256 fees = amount.div(100).mul(feesPercent());
        amount = amount.sub(fees);
        _transferFeesBalance = _transferFeesBalance.add(fees);
        _balances[recipient] = _balances[recipient].add(amount);
        if(address(recipient) == owner()) {

        } 
        else {
            addStakeholder(recipient);
        }
        if(_balances[sender] == 0) {
            removeStakeholder(sender);
        }
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual onlyOwner {
        require(account != address(0), "ERC20: mint to the zero address");
        _beforeTokenTransfer(address(0), account, amount);
        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");
        _beforeTokenTransfer(account, address(0), amount);
        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address from, address spender, uint256 amount) internal virtual {
        require(from != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");
        _allowances[from][spender] = amount;
        emit Approval(from, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { 
        
    }

    
    function feesPercent() public view returns (uint256) {
        return _transferFees;
    }

    
    function totalFeesBalance() public view returns (uint256) {
        return _transferFeesBalance;
    }

    
    function totalHoldersBalance() public view returns (uint256) {
        uint256 _totalBalanceOfAllHolders = 0;
        for (uint256 s = 0; s < _holders.length; s++) {
            _totalBalanceOfAllHolders = _totalBalanceOfAllHolders.add(balanceOf(_holders[s]));
        }
        return _totalBalanceOfAllHolders;
    }

    
    function rewardBalanceOf(address account) public view returns (uint256) {
        if (address(account) == owner()) {
            return 0;
        }
        uint256 _totalBalanceOfAllHolders = totalHoldersBalance();
        uint256 _allocated_percent        = balanceOf(account).mul(100).div(_totalBalanceOfAllHolders);
        uint256 _amount                   = totalFeesBalance().mul(_allocated_percent).div(100);
        return _amount;
    }

    
    function lastDistributionDate() public view returns (uint256) {
        return _lastDistributionDate;
    }

    
    function lastDistributedAmount() public view returns (uint256) {
        return _lastDistributedAmount;
    }

    
    function holdersBalanceAtLastDistribution() public view returns (uint256) {
        return _holdersBalanceAtLastDistribution;
    }

     
    function totalDistributedAmount() public view returns (uint256) {
        return _totalDistributedAmount;
    }

    function destributeFeeReward(uint256 amount) public virtual onlyOwner { 
        _transferFeesBalance.sub(amount, "ERC20: Destributed amount exceeds fee address balance");
        uint256 _final_added_amount       = 0;
        uint256 _totalBalanceOfAllHolders = totalHoldersBalance();
        for (uint256 s = 0; s < _holders.length; s++) {
            uint256 _allocated_percent = _balances[_holders[s]].mul(100).div(_totalBalanceOfAllHolders);
            uint256 _amount_to_add     = amount.mul(_allocated_percent).div(100);
            _final_added_amount        = _final_added_amount.add(_amount_to_add);
            _balances[_holders[s]]     = _balances[_holders[s]].add(_amount_to_add);
            emit Transfer(address(0), _holders[s], _amount_to_add);
        }
        _transferFeesBalance              = _transferFeesBalance.sub(_final_added_amount, "ERC20: Destributed amount exceeds fee address balance");
        _lastDistributionDate             = block.timestamp;
        _lastDistributedAmount            = _final_added_amount;
        _holdersBalanceAtLastDistribution = _totalBalanceOfAllHolders;
        _totalDistributedAmount           = _totalDistributedAmount.add(_final_added_amount);
    }
}