pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

interface ERC20 {

    function approve(address, uint256) external returns (bool);

    function transfer(address, uint256) external returns (bool);

    function transferFrom(address, address, uint256) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address) external view returns (uint256);

}

interface ProtocolAdapter {



    

    function adapterType() external pure returns (string memory);



    

    function tokenType() external pure returns (string memory);



    

    function getBalance(address token, address account) external view returns (uint256);

}

interface CToken {

    function borrowBalanceStored(address) external view returns (uint256);

}

interface CreamRegistry {

    function getCToken(address) external view returns (address);

}

contract CreamDebtAdapter is ProtocolAdapter {



    address internal constant REGISTRY = 0xecD78d9b6B6DAa268Ea7524557c361FCc8a323b7;



    string public constant override adapterType = "Debt";



    string public constant override tokenType = "ERC20";



    

    function getBalance(address token, address account) external view override returns (uint256) {

        address cToken = CreamRegistry(REGISTRY).getCToken(token);



        return CToken(cToken).borrowBalanceStored(account);

    }

}
