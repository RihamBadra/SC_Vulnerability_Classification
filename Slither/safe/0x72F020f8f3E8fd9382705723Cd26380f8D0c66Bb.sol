pragma solidity 0.5.7;

interface IERC20 {

    

    function totalSupply() external view returns (uint256);



    

    function balanceOf(address account) external view returns (uint256);



    

    function transfer(address recipient, uint256 amount) external returns (bool);



    

    function mint(address account, uint256 amount) external returns (bool);

    

    function allowance(address owner, address spender) external view returns (uint256);



    

    function approve(address spender, uint256 amount) external returns (bool);



    

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    

    event Transfer(address indexed from, address indexed to, uint256 value);



    

    event Approval(address indexed owner, address indexed spender, uint256 value);

}

library SafeMath {

    

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a, "SafeMath: addition overflow");



        return c;

    }



    

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b <= a, "SafeMath: subtraction overflow");

        uint256 c = a - b;



        return c;

    }



    

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b <= a, errorMessage);

        uint256 c = a - b;



        return c;

    }



    

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        

        

        

        if (a == 0) {

            return 0;

        }



        uint256 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");



        return c;

    }



    

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        

        require(b > 0, "SafeMath: division by zero");

        uint256 c = a / b;

        



        return c;

    }



    

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b != 0, "SafeMath: modulo by zero");

        return a % b;

    }

}

library SafeMath64 {

    

    function add(uint64 a, uint64 b) internal pure returns (uint64) {

        uint64 c = a + b;

        require(c >= a, "SafeMath: addition overflow");



        return c;

    }



    

    function sub(uint64 a, uint64 b) internal pure returns (uint64) {

        require(b <= a, "SafeMath: subtraction overflow");

        uint64 c = a - b;



        return c;

    }



    

    function sub(uint64 a, uint64 b, string memory errorMessage) internal pure returns (uint64) {

        require(b <= a, errorMessage);

        uint64 c = a - b;



        return c;

    }



    

    function mul(uint64 a, uint64 b) internal pure returns (uint64) {

        

        

        

        if (a == 0) {

            return 0;

        }



        uint64 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");



        return c;

    }



    

    function div(uint64 a, uint64 b) internal pure returns (uint64) {

        

        require(b > 0, "SafeMath: division by zero");

        uint64 c = a / b;

        



        return c;

    }



    

    function mod(uint64 a, uint64 b) internal pure returns (uint64) {

        require(b != 0, "SafeMath: modulo by zero");

        return a % b;

    }

}

contract ERC20 is IERC20 {

    using SafeMath for uint256;



    mapping (address => uint256) internal _balances;



    mapping (address => mapping (address => uint256)) private _allowances;



    uint256 private _totalSupply;



    

    event Transfer(address indexed from, address indexed to, uint256 value);



    

    event Approval(address indexed owner, address indexed spender, uint256 value);



    

    function totalSupply() public view returns (uint256) {

        return _totalSupply;

    }



    

    function balanceOf(address account) public view returns (uint256) {

        return _balances[account];

    }



    

    function transfer(address recipient, uint256 amount) public returns (bool) {

        _transfer(msg.sender, recipient, amount);

        return true;

    }



    

    function allowance(address owner, address spender) public view returns (uint256) {

        return _allowances[owner][spender];

    }



    

    function approve(address spender, uint256 value) public returns (bool) {

        _approve(msg.sender, spender, value);

        return true;

    }



    

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {

        _transfer(sender, recipient, amount);

        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));

        return true;

    }



    

    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {

        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

        return true;

    }



    

    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {

        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));

        return true;

    }



    

    function _transfer(address sender, address recipient, uint256 amount) internal {

        require(sender != address(0), "ERC20: transfer from the zero address");

        require(recipient != address(0), "ERC20: transfer to the zero address");



        _balances[sender] = _balances[sender].sub(amount);

        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);

    }



    

    function _transferFrom(address sender, address recipient, uint256 amount) internal {

        _transfer(sender, recipient, amount);

        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));

    }



    

    function _mint(address account, uint256 amount) internal {

        require(account != address(0), "ERC20: mint to the zero address");



        _totalSupply = _totalSupply.add(amount);

        _balances[account] = _balances[account].add(amount);

        emit Transfer(address(0), account, amount);

    }



     

    function _burn(address account, uint256 value) internal {

        require(account != address(0), "ERC20: burn from the zero address");



        _totalSupply = _totalSupply.sub(value);

        _balances[account] = _balances[account].sub(value);

        emit Transfer(account, address(0), value);

    }



    

    function _approve(address owner, address spender, uint256 value) internal {

        require(owner != address(0), "ERC20: approve from the zero address");

        require(spender != address(0), "ERC20: approve to the zero address");



        _allowances[owner][spender] = value;

        emit Approval(owner, spender, value);

    }



    

    function _burnFrom(address account, uint256 amount) internal {

        _burn(account, amount);

        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));

    }

}

contract PlotXToken is ERC20 {

    using SafeMath for uint256;



    mapping(address => uint256) public lockedForGV;



    string public name = "PLOT";

    string public symbol = "PLOT";

    uint8 public decimals = 18;

    address public operator;



    modifier onlyOperator() {

        require(msg.sender == operator, "Not operator");

        _;

    }



    

    constructor(uint256 _initialSupply, address _initialTokenHolder) public {

        _mint(_initialTokenHolder, _initialSupply);

        operator = _initialTokenHolder;

    }



    

    function changeOperator(address _newOperator)

        public

        onlyOperator

        returns (bool)

    {

        require(_newOperator != address(0), "New operator cannot be 0 address");

        operator = _newOperator;

        return true;

    }



    

    function burn(uint256 amount) public {

        _burn(msg.sender, amount);

    }



    

    function burnFrom(address from, uint256 value) public {

        _burnFrom(from, value);

    }



    

    function mint(address account, uint256 amount)

        public

        onlyOperator

        returns (bool)

    {

        _mint(account, amount);

        return true;

    }



    

    function transfer(address to, uint256 value) public returns (bool) {

        require(lockedForGV[msg.sender] < now, "Locked for governance"); 

        _transfer(msg.sender, to, value);

        return true;

    }



    

    function transferFrom(

        address from,

        address to,

        uint256 value

    ) public returns (bool) {

        require(lockedForGV[from] < now, "Locked for governance"); 

        _transferFrom(from, to, value);

        return true;

    }



    

    function lockForGovernanceVote(address _of, uint256 _period)

        public

        onlyOperator

    {

        if (_period.add(now) > lockedForGV[_of])

            lockedForGV[_of] = _period.add(now);

    }



    function isLockedForGV(address _of) public view returns (bool) {

        return (lockedForGV[_of] > now);

    }

}
