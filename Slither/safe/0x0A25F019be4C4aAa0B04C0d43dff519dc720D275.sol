
pragma solidity ^0.7.6;



contract StakeAllMemory {
    
    mapping(address => mapping(uint256 => bytes32)) internal mbytes; 
    
    mapping(address => mapping(uint256 => uint256)) internal muint; 
    
    mapping(address => mapping(uint256 => address)) internal maddr; 

    
    function setBytes(uint256 _id, bytes32 _byte) public {
        mbytes[msg.sender][_id] = _byte;
    }

    
    function getBytes(uint256 _id) public returns (bytes32 _byte) {
        _byte = mbytes[msg.sender][_id];
        delete mbytes[msg.sender][_id];
    }

    
    function setUint(uint256 _id, uint256 _num) public {
        muint[msg.sender][_id] = _num;
    }

    
    function getUint(uint256 _id) public returns (uint256 _num) {
        _num = muint[msg.sender][_id];
        delete muint[msg.sender][_id];
    }

    
    function setAddr(uint256 _id, address _addr) public {
        maddr[msg.sender][_id] = _addr;
    }

    
    function getAddr(uint256 _id) public returns (address _addr) {
        _addr = maddr[msg.sender][_id];
        delete maddr[msg.sender][_id];
    }
}