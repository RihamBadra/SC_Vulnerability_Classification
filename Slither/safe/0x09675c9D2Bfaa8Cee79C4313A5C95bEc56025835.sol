

pragma solidity 0.6.10;
pragma experimental "ABIEncoderV2";



contract CompoundLikeGovernanceAdapter {

    

    
    string public constant PROPOSE_SIGNATURE = "propose(address[],uint256[],string[],bytes[],string)";
    
    
    string public constant DELEGATE_SIGNATURE = "delegate(address)";

    address public constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;

    

    
    address public immutable governanceToken;

    
    address public immutable governorAlpha;

    

    
    constructor(address _governorAlpha, address _governanceToken) public {
        governorAlpha = _governorAlpha;
        governanceToken = _governanceToken;
    }

    

    
    function getVoteCalldata(uint256 _proposalId, bool _support, bytes memory ) external view returns (address, uint256, bytes memory) {
        
        bytes memory callData = abi.encodeWithSignature("castVote(uint256,bool)", _proposalId, _support);

        return (governorAlpha, 0, callData);
    }

    
    function getDelegateCalldata(address _delegatee) external view returns (address, uint256, bytes memory) {
        
        bytes memory callData = abi.encodeWithSignature(DELEGATE_SIGNATURE, _delegatee);

        return (governanceToken, 0, callData);
    }

    
    function getRegisterCalldata(address _setToken) external view returns (address, uint256, bytes memory) {
        
        bytes memory callData = abi.encodeWithSignature(DELEGATE_SIGNATURE, _setToken);

        return (governanceToken, 0, callData);
    }

    
    function getRevokeCalldata() external view returns (address, uint256, bytes memory) {
        
        bytes memory callData = abi.encodeWithSignature(DELEGATE_SIGNATURE, ZERO_ADDRESS);

        return (governanceToken, 0, callData);
    }

    
    function getProposeCalldata(bytes memory _proposalData) external view returns (address, uint256, bytes memory) {
        
        (
            address[] memory targets,
            uint256[] memory values,
            string[] memory signatures,
            bytes[] memory calldatas,
            string memory description
        ) = abi.decode(_proposalData, (address[],uint256[],string[],bytes[],string));

        
        bytes memory callData = abi.encodeWithSignature(PROPOSE_SIGNATURE, targets, values, signatures, calldatas, description);

        return (governorAlpha, 0, callData);
    }
}

