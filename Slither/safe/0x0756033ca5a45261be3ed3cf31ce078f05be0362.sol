



pragma solidity ^0.6.0;

library Math {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        
        require(b > 0, "SafeMath: division by zero");
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b != 0, "SafeMath: modulo by zero");
        return a % b;
    }
}






contract Token {
    
    using Math for uint256;
    
    
    string public name = "Power Magic Coin";
    string public symbol = "PMC";
    uint256 public decimals = 10; 
    uint256 public totalSupply = uint256(250000000).mul(uint256(10) ** decimals);
    
    address ZERO_ADDR = address(0x0000000000000000000000000000000000000000);
    address payable public creator; 

    
    mapping (address => uint256) public balanceOf;  
    mapping (address => mapping (address => uint256)) public allowance; 

    
    event Transfer(address indexed from, address indexed to, uint256 token);  
    event Approval(address indexed owner, address indexed spender, uint256 token);   
    
    
    
    constructor () public {
        
        
        
        
        creator = msg.sender;
        balanceOf[creator] = totalSupply;
        emit Transfer(ZERO_ADDR, msg.sender, totalSupply);
    }
    
    
    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {
        
        require(_value > 0 && _value <= totalSupply, 'Invalid token amount to transfer!');

        require(_to != ZERO_ADDR, 'Cannot send to ZERO address!'); 
        require(_from != _to, "Cannot send token to yourself!");
        require (balanceOf[_from] >= _value, "No enough token to transfer!");   

        
        balanceOf[_from] = balanceOf[_from].sub(_value);
        balanceOf[_to] = balanceOf[_to].add(_value);
        emit Transfer(_from, _to, _value);
        return true;
    }
    
    
    
    
    
    function transfer(address to, uint256 token) public returns (bool success) {
        return _transfer(msg.sender, to, token);
    }

    
    
    
    
    
    
    
    
    function approve(address spender, uint256 token) public returns (bool success) {
        require(spender != ZERO_ADDR);
        require(balanceOf[msg.sender] >= token, "No enough balance to approve!");
        
        require(allowance[msg.sender][spender] == 0 || token == 0, "Invalid allowance state!");
        allowance[msg.sender][spender] = token;
        emit Approval(msg.sender, spender, token);
        return true;
    }
	
    
    
    
    
    
    
    
    
    function transferFrom(address from, address to, uint256 token) public returns (bool success) {
        require(allowance[from][msg.sender] >= token, "No enough allowance to transfer!");
        allowance[from][msg.sender] = allowance[from][msg.sender].sub(token);
        _transfer(from, to, token);
        return true;
    }
    
    
    function destroy() public {
        require(msg.sender == creator, "You're not creator!");
        selfdestruct(creator);
    }

    
    fallback() external {
  	    revert();
    }
}