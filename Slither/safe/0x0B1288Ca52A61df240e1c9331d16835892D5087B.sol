



pragma solidity ^0.8.0;


abstract contract Initializable {
    
    bool private _initialized;

    
    bool private _initializing;

    
    modifier initializer() {
        require(_initializing || !_initialized, "Initializable: contract is already initialized");

        bool isTopLevelCall = !_initializing;
        if (isTopLevelCall) {
            _initializing = true;
            _initialized = true;
        }

        _;

        if (isTopLevelCall) {
            _initializing = false;
        }
    }
}





abstract contract ContextUpgradeable is Initializable {
    function __Context_init() internal initializer {
        __Context_init_unchained();
    }

    function __Context_init_unchained() internal initializer {
    }
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
    uint256[50] private __gap;
}






abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    function __Ownable_init() internal initializer {
        __Context_init_unchained();
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal initializer {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
    uint256[49] private __gap;
}






abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    
    function __Pausable_init() internal initializer {
        __Context_init_unchained();
        __Pausable_init_unchained();
    }

    function __Pausable_init_unchained() internal initializer {
        _paused = false;
    }

    
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
    uint256[49] private __gap;
}



interface IERC20Upgradeable {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



library AddressUpgradeable {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}





library SafeERC20Upgradeable {
    using AddressUpgradeable for address;

    function safeTransfer(
        IERC20Upgradeable token,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(
        IERC20Upgradeable token,
        address from,
        address to,
        uint256 value
    ) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(
        IERC20Upgradeable token,
        address spender,
        uint256 value
    ) internal {
        
        
        
        require(
            (value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(
        IERC20Upgradeable token,
        address spender,
        uint256 value
    ) internal {
        uint256 newAllowance = token.allowance(address(this), spender) + value;
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(
        IERC20Upgradeable token,
        address spender,
        uint256 value
    ) internal {
        unchecked {
            uint256 oldAllowance = token.allowance(address(this), spender);
            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");
            uint256 newAllowance = oldAllowance - value;
            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
        }
    }

    
    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}





contract CloudPresale is OwnableUpgradeable, PausableUpgradeable {
    using SafeERC20Upgradeable for IERC20Upgradeable;

    
    event CLOUDPurchased(address indexed user, address indexed purchaseToken, uint256 cloudAmount);

    

    
    uint256 public constant PRECISION = 1000000; 
    uint256 public PRE_SALE_START;
    uint256 public PRE_SALE_END;

    uint256 public PRE_SALE_CLOUD_POOL;
    

    
    address public USDCToken;
    address public USDTToken;

    uint256 public maxTokensAmount;
    uint256 public minTokensAmount;

    mapping(address => uint256) public purchased;

    uint256 public totalPurchased;

    mapping(address => uint256) public rates;
    mapping(address => uint256) public addressToPrecision;

    address private treasury;

    

    
    modifier supportedCoin(address _token) {
        require(_token == USDCToken || _token == USDTToken, "Token is not supported");
        _;
    }

    
    modifier onlySale() {
        require(_isPreSale(), "Sale stage is over");
        _;
    }

    
    modifier notOnSale() {
        require(block.timestamp >= PRE_SALE_END || block.timestamp <= PRE_SALE_START, "Presale is ongoing");
        _;
    }

    

    
    function initialize(
        address _USDCToken,
        address _USDTToken,
        address _treasury
    ) public virtual initializer {
        require(_treasury != address(0), "Zero address");
        require(_USDCToken != address(0), "Zero address");
        require(_USDTToken != address(0), "Zero address");

        __Ownable_init();
        __Pausable_init();

        treasury = _treasury;
        USDCToken = _USDCToken;
        USDTToken = _USDTToken;

        rates[address(0)] = 13437500000; 
        rates[_USDCToken] = 3125000; 
        rates[_USDTToken] = 3125000; 

        addressToPrecision[address(0)] = 1; 
        addressToPrecision[_USDCToken] = 10**12; 
        addressToPrecision[_USDTToken] = 10**12;

        PRE_SALE_START = 1637834400;
        PRE_SALE_END = 1637852400;

        minTokensAmount = 3125 * 10**18;
        maxTokensAmount = 46875 * 10**18;

        PRE_SALE_CLOUD_POOL = 7_000_000 * 10**18; 
    }

    
    function adminAddPurchased(address _user, uint256 _amount) external onlyOwner {
        totalPurchased -= purchased[_user];
        purchased[_user] = _amount;
        totalPurchased += _amount;
    }

    
    function adminSetRates(address _token, uint256 _rate) external onlyOwner {
        rates[_token] = _rate;
    }

    
    function adminSetTreasury(address _treasury) external onlyOwner {
        treasury = _treasury;
    }

    
    function adminPause() external onlyOwner {
        _pause();
    }

    
    function adminUnpause() external onlyOwner {
        _unpause();
    }

    
    function adminSetMaxCLOUD(uint256 _maxCLOUD) external onlyOwner {
        maxTokensAmount = _maxCLOUD;
    }

    function adminSetMinCLOUD(uint256 _minCLOUD) external onlyOwner {
        minTokensAmount = _minCLOUD;
    }

    function adminSetCap(uint256 _cap) external onlyOwner {
        PRE_SALE_CLOUD_POOL = _cap;
    }

    function adminSetEnd() external onlyOwner {
        PRE_SALE_END = block.timestamp;
    }

    function adminSetStart(uint256 _timestamp) external onlyOwner {
        PRE_SALE_START = _timestamp;
    }

    function adminExtendEnd(uint256 _seconds) external onlyOwner {
        PRE_SALE_END += _seconds;
    }

    

    
    receive() external payable virtual onlySale whenNotPaused {
        _purchaseCLOUDwithETH();
    }

    
    function purchaseCLOUDwithERC20(address ERC20token, uint256 ERC20amount)
        external
        onlySale
        supportedCoin(ERC20token)
        whenNotPaused
    {
        require(ERC20amount > 0, "Zero amount");
        uint256 purchaseAmount = _calcPurchaseAmount(ERC20token, ERC20amount);
        require(purchaseAmount > 0, "Rates not set");
        require(totalPurchased + purchaseAmount <= PRE_SALE_CLOUD_POOL, "Not enough CLOUD in presale pool");
        require(maxTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount <= maxTokensAmount, "Can't buy more than max cap");
        require(minTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount >= minTokensAmount, "Can't buy less than min cap");
            
        totalPurchased += purchaseAmount;
        purchased[_msgSender()] += purchaseAmount;

        if (totalPurchased >= PRE_SALE_CLOUD_POOL) {
            PRE_SALE_END = block.timestamp;
        }

        emit CLOUDPurchased(_msgSender(), ERC20token, purchaseAmount);

        IERC20Upgradeable(ERC20token).safeTransferFrom(_msgSender(), treasury, ERC20amount); 
    }

    
    function purchaseCLOUDwithETH() external payable onlySale whenNotPaused {
        require(msg.value > 0, "No ETH sent");
        _purchaseCLOUDwithETH();
    }

    function _purchaseCLOUDwithETH() private {
        uint256 purchaseAmount = _calcPurchaseAmount(address(0), msg.value);
        require(purchaseAmount > 0, "Rates not set");

        require(totalPurchased + purchaseAmount <= PRE_SALE_CLOUD_POOL, "Not enough CLOUD in presale pool");
        require(maxTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount <= maxTokensAmount, "Can't buy more than max cap");
        require(minTokensAmount == 0 || purchased[_msgSender()] + purchaseAmount >= minTokensAmount, "Can't buy less than min cap");
        
        totalPurchased += purchaseAmount;
        purchased[_msgSender()] += purchaseAmount;

        if (totalPurchased >= PRE_SALE_CLOUD_POOL) {
            PRE_SALE_END = block.timestamp;
        }

        emit CLOUDPurchased(_msgSender(), address(0), purchaseAmount);

        (bool success, ) = payable(treasury).call{value: msg.value}("");
        require(success, "Transfer failed");
    }

    
    function preSaleAvailableCLOUD() public view returns (uint256) {
        return PRE_SALE_CLOUD_POOL - totalPurchased;
    }

    
    function adminWithdrawERC20(address ERC20token, address _receiver) external onlyOwner notOnSale {
        uint256 tokenBalance = IERC20Upgradeable(ERC20token).balanceOf(address(this));
        IERC20Upgradeable(ERC20token).safeTransfer(_receiver, tokenBalance);
    }

    
    function adminWithdraw(address _receiver) external onlyOwner notOnSale {
        require(address(this).balance > 0, "Nothing to withdraw");

        (bool success, ) = _receiver.call{value: address(this).balance}("");
        require(success, "Transfer failed");
    }

    
    function rateForToken(address _token) external view returns (uint256) {
        if (_token == address(0)) {
            return _calcPurchaseAmount(_token, 10**18);
        }
        return _calcPurchaseAmount(_token, 10**6);
    }

    

    
    function _isPreSale() private view returns (bool) {
        return (block.timestamp >= PRE_SALE_START && block.timestamp < PRE_SALE_END);
    }

    
    function _calcPurchaseAmount(address _token, uint256 _amount) private view returns (uint256) {
        return (_amount * addressToPrecision[_token] *rates[_token]) / PRECISION;
    }
}



contract MockCloudPresale is CloudPresale {
    constructor(
        address _usdc,
        address _usdt,
        address _treasury
    ) {
        initialize(_usdc, _usdt, _treasury);
    }

    function setTimeMOCK(uint256 _start, uint256 _end) external {
        require(_start < _end, "Incorrect time provided");
        PRE_SALE_START = _start;
        PRE_SALE_END = _end;
    }

    function setCLOUDpoolMOCK(uint256 _pool) external {
        require(_pool > PRE_SALE_CLOUD_POOL, "Incorrect amount provided");
        PRE_SALE_CLOUD_POOL = _pool;
    }

    function clearMOCK() external {
        totalPurchased = 0;
        purchased[_msgSender()];
    }
}