



pragma solidity ^0.8.7;



contract ERC20 {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    address private _currentOwner;

    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );

     
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        _setOwner(_msgSender());
    }

      
    function burn(uint256 amount) external virtual {
        _burn(_msgSender(), amount);
    }

    
    function burnFrom(address account, uint256 amount) external virtual {
        uint256 currentAllowance = allowance(account, _msgSender());
        require(currentAllowance >= amount, "ERC20: burn amount exceeds allowance");
    unchecked {
        _approve(account, _msgSender(), currentAllowance - amount);
    }
        _burn(account, amount);
    }

    
    function name() external view virtual returns (string memory) {
        return _name;
    }

    
    function symbol() external view virtual returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) external virtual returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address _owner, address spender) public view virtual returns (uint256) {
        return _allowances[_owner][spender];
    }

    
    function approve(address spender, uint256 amount) external virtual returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external virtual returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
    unchecked {
        _approve(sender, _msgSender(), currentAllowance - amount);
    }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
    unchecked {
        _approve(_msgSender(), spender, currentAllowance - subtractedValue);
    }

        return true;
    }

      
    function owner() public view virtual returns (address) {
        return _currentOwner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() external virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) external virtual onlyOwner {
        require(
            newOwner != address(0),
            "Ownable: new owner is the zero address"
        );
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _currentOwner;
        _currentOwner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
    unchecked {
        _balances[sender] = senderBalance - amount;
    }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
    unchecked {
        _balances[account] = accountBalance - amount;
    }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    
    function _approve(
        address _owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(_owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[_owner][spender] = amount;
        emit Approval(_owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

     function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}

contract SlavaUkrayini is ERC20 {
    
    address public constant donationAddress = address(0x165CD37b4C644C2921454429E7F9358d18A45e14);

    
    uint256 private constant _airdropEnd = 1656460800;

    
    uint256 private constant _independenceDay = 1661299200;

    
    uint256 private constant _defendersDay = 1665705600;

    
    uint256 private constant _donationEnd = 1669075200;

    bool public ownerShareClaimed = false;
    bool public ukraineShareClaimed = false;
    uint256 public currentClaimRate = 20220;

    mapping(address => bool) public slavaUkrayiniClaimedByAddress;
    mapping(address => bool) public slavaUkrayiniDoubledByAddress;
    mapping(address => uint256) public patrons;
    mapping(address => uint256) public defenders;
    mapping(address => uint256) public allies;
    

    constructor() ERC20("Slava Ukrayini", "SLAVA"){
    }

    
    function claimSlava() external {
        
        require(block.timestamp <= _airdropEnd, "Airdrop lasted till June 29th");
        require(!slavaUkrayiniClaimedByAddress[_msgSender()], "Already claimed");

        
        slavaUkrayiniClaimedByAddress[_msgSender()] = true;
        if (currentClaimRate >= 2022) {
            currentClaimRate = currentClaimRate - 1;
        }
        

        
        _mint(_msgSender(), (currentClaimRate + 1) * (10 ** decimals()));
    }

    
    
    function donate() external payable {
        
        require(block.timestamp <= _donationEnd, "Donations lasted till November 22th");
        require(msg.value > 0, "Donation too low");

        
        uint256 mintAmount = 20220;
        if (block.timestamp <= _airdropEnd) {
            patrons[_msgSender()] = patrons[_msgSender()] + msg.value;
        } else if (block.timestamp >= _defendersDay && block.timestamp <= _defendersDay + 86400) {
            defenders[_msgSender()] = defenders[_msgSender()] + msg.value;
            mintAmount = 40440;
        } else if (block.timestamp >= _donationEnd - 86400 && block.timestamp <= _donationEnd) {
            allies[_msgSender()] = allies[_msgSender()] + msg.value;
            
            mintAmount = 80880;
        }

        
        (bool sent,) = payable(donationAddress).call{value : msg.value}("");
        require(sent, "Failed to send donation");
       
         _mint(_msgSender(), mintAmount * msg.value);
    }

    
    
    
    function doubleAllSlava() external {
        
        require(block.timestamp >= _independenceDay - 86400 && block.timestamp <= _independenceDay + 86400, "Wrong day");
        require(!slavaUkrayiniDoubledByAddress[_msgSender()], "Already doubled");

        
        slavaUkrayiniDoubledByAddress[_msgSender()] = true;

        

        
        _mint(_msgSender(), balanceOf(_msgSender()));
    }

    
    
    
    function claimOwnerShare() external onlyOwner {
        
        require(block.timestamp >= _donationEnd, "No");
        require(!ownerShareClaimed, "No");

        
        ownerShareClaimed = true;

        

        
        _mint(owner(), totalSupply() / 16);
    }

    
    
    
    function claimUkraineShare() external {
        
        require(block.timestamp >= _donationEnd, "Can claim only after donation end");
        require(!ukraineShareClaimed, "Already claimed");

        
        ukraineShareClaimed = true;

        

        
        _mint(donationAddress, totalSupply() / 4);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, amount);

        require(block.timestamp >= _donationEnd
        || from == address(0)
            || to == address(0), "Token transfer is possible after donation end");
    }
}