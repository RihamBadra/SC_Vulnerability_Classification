pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

interface ERC20 {

    function approve(address, uint256) external returns (bool);

    function transfer(address, uint256) external returns (bool);

    function transferFrom(address, address, uint256) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address) external view returns (uint256);

}

interface ProtocolAdapter {



    

    function adapterType() external pure returns (string memory);



    

    function tokenType() external pure returns (string memory);



    

    function getBalance(address token, address account) external view returns (uint256);

}

interface TokenGeyser {

    function totalStakedFor(address) external view returns (uint256);

}

contract AmpleforthAdapter is ProtocolAdapter {



    string public constant override adapterType = "Asset";



    string public constant override tokenType = "ERC20";



    address internal constant AMPL = 0xD46bA6D942050d489DBd938a2C909A5d5039A161;

    address internal constant UNI_AMPL_WETH = 0xc5be99A02C6857f9Eac67BbCE58DF5572498F40c;



    address internal constant GEYSER_PILOT = 0xD36132E0c1141B26E62733e018f12Eb38A7b7678;

    address internal constant GEYSER_BEEHIVE_V1 = 0x0eEf70ab0638A763acb5178Dd3C62E49767fd940;

    address internal constant GEYSER_BEEHIVE_V2 = 0x23796Bc856ed786dCC505984fd538f91dAD3194A;



    

    function getBalance(address token, address account) external view override returns (uint256) {

        if (token == AMPL) {

            return ERC20(AMPL).balanceOf(account);

        } else if (token == UNI_AMPL_WETH) {

            uint totalStaked = 0;



            totalStaked += TokenGeyser(GEYSER_PILOT).totalStakedFor(account);

            totalStaked += TokenGeyser(GEYSER_BEEHIVE_V1).totalStakedFor(account);

            totalStaked += TokenGeyser(GEYSER_BEEHIVE_V2).totalStakedFor(account);



            return totalStaked;

        } else {

            return 0;

        }

    }

}
