

pragma solidity 0.6.10;


contract AGIMigrationWrapAdapter {

    

    address public immutable agiLegacyToken;
    address public immutable agixToken;

    

    
    constructor(
        address _agiLegacyToken,
        address _agixToken
    )
        public
    {
        agiLegacyToken = _agiLegacyToken;
        agixToken = _agixToken;
    }

    

    
    function getWrapCallData(
        address _underlyingToken,
        address _wrappedToken,
        uint256 _underlyingUnits
    )
        external
        view
        returns (address, uint256, bytes memory)
    {
        require(_underlyingToken == agiLegacyToken, "Must be AGI token");
        require(_wrappedToken == agixToken, "Must be AGIX token");

        
        bytes memory callData = abi.encodeWithSignature("burn(uint256)", _underlyingUnits);

        return (agiLegacyToken, 0, callData);
    }

    
    function getUnwrapCallData(
        address ,
        address ,
        uint256 
    )
        external
        pure
        returns (address, uint256, bytes memory)
    {
        revert("AGI burn cannot be reversed");
    }

    
    function getSpenderAddress(address , address ) external view returns(address) {
        return agiLegacyToken;
    }
}

