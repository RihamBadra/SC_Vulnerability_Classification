



pragma solidity 0.7.6;




abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


contract EthForwarder is Ownable {

  address payable public destinationAddress;

  event Forwarded(address indexed _from, address indexed _to, uint _amount);
  event Flushed(address indexed _from, address indexed _to, uint _amount);

  constructor() {
    destinationAddress = msg.sender;
  }

  function pay() external payable {
    emit Forwarded(msg.sender, destinationAddress, msg.value);
    _send(destinationAddress, msg.value);
  }

  function flush() external {
    emit Flushed(msg.sender, destinationAddress, address(this).balance);
    _send(destinationAddress, address(this).balance);
  }

  function setDestinationAddress(address payable _destination) external onlyOwner {
    destinationAddress = _destination;
  }

  function _send(address payable _to, uint _amount) internal {
    (bool sent,) = _to.call{value: _amount}("");
    require(sent, "Failed to send Ether");
  }
}