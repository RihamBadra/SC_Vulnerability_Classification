





pragma solidity >=0.6.0 <0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}





pragma solidity >=0.6.0 <0.8.0;


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}





pragma solidity >=0.6.0 <0.8.0;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



pragma solidity ^0.6.0;



contract LynSale is Ownable {
    using SafeMath for uint256;
    uint256 private marketPrice;
    address public usdtToken;
    address public lynToken;

    bool private buyable;
    
    uint256 private constant LYN_DECIMAL = 10**18;
    bytes4 private constant TRANSFER_SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));
    bytes4 private constant TRANSFER_FROM_SELECTOR = bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));
    bytes4 private constant BALANCE_OF_SELECTOR = bytes4(keccak256(bytes('balanceOf(address)')));

    event Buy(address indexed buyer, uint256 usdtAmount, uint256 lynAmount);
    event ChangePrice(uint256 newPrice);
    event ChangeBuyalbe(bool isBuyable);

    modifier onlyBuyable() {
        require(buyable, "Not buyable");
        _;
    }

    
    constructor(
        address _usdtTokenAddr,
        address _lynTokenAddr,
        uint256 _price
    ) public {
        usdtToken = _usdtTokenAddr;
        lynToken = _lynTokenAddr;
        marketPrice = _price;
        emit ChangePrice(_price);
    }

    
    
    

    
    function changePrice(uint256 _newPrice) external onlyOwner() {
        require(_newPrice > 0 && _newPrice != marketPrice, "Invalid price");
        marketPrice = _newPrice;
        emit ChangePrice(_newPrice);
    }

    function setBuyable(bool _isBuyable) external onlyOwner() {
        buyable = _isBuyable;
        emit ChangeBuyalbe(_isBuyable);
    }

    
    function drainLyn() external onlyOwner() {
        uint256 balance = _getBalanceOf(lynToken, address(this));
        _safeTransfer(lynToken, msg.sender, balance);
    }

    
    function drainUSDT() external onlyOwner() {
        uint256 balance = _getBalanceOf(usdtToken, address(this));
        _safeTransfer(usdtToken, msg.sender, balance);
    }

    
    
    

    
    function buy(uint256 _usdtAmount) onlyBuyable() external {
        
        uint256 lynAmount = _usdtAmount.mul(LYN_DECIMAL).div(marketPrice);

        
        _safeTransferFrom(address(usdtToken), msg.sender, address(this), _usdtAmount);

        
        _safeTransfer(lynToken, msg.sender, lynAmount);

        emit Buy(msg.sender, _usdtAmount, lynAmount);
    }

    
    
    
    function checkPrice() public view returns(uint256) {
        return marketPrice;
    }

    function checkLynAmount() public view returns(uint256) {
        return _getBalanceOf(lynToken, address(this));
    }

    function checkUSDTAmount() public view returns(uint256) {
        return _getBalanceOf(usdtToken, address(this));
    }

    function checkBuyable() public view returns(bool) {
        return buyable;
    }

    
    
    

    
    
    
    
    function _safeTransfer(address token, address to, uint value) private {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_SELECTOR, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FAILED');
    }

    function _safeTransferFrom(address token, address from, address to, uint value) private {
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(TRANSFER_FROM_SELECTOR, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TRANSFER_FROM_FAILED');
    }

    function _getBalanceOf(address token, address account) private view returns(uint256) {
        (bool success, bytes memory data) = token.staticcall(abi.encodeWithSelector(BALANCE_OF_SELECTOR, account));
        require(success, 'BALACE_OF_FAILED');
        uint256 balance = abi.decode(data,(uint256));
        return balance;
    }
}