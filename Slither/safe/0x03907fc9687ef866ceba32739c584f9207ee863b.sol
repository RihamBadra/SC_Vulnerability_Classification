






pragma solidity ^0.8.0;


library MerkleProof {
    
    function verify(
        bytes32[] memory proof,
        bytes32 root,
        bytes32 leaf
    ) internal pure returns (bool) {
        return processProof(proof, leaf) == root;
    }

    
    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {
        bytes32 computedHash = leaf;
        for (uint256 i = 0; i < proof.length; i++) {
            bytes32 proofElement = proof[i];
            if (computedHash <= proofElement) {
                
                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));
            } else {
                
                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));
            }
        }
        return computedHash;
    }
}






pragma solidity ^0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}






pragma solidity ^0.8.0;



interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}






pragma solidity ^0.8.0;



interface IERC721Enumerable is IERC721 {
    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}






pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity ^0.8.0;



interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}






pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;





contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }

    
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}






pragma solidity ^0.8.0;



abstract contract Pausable is Context {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    
    constructor() {
        _paused = false;
    }

    
    function paused() public view virtual returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!paused(), "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(paused(), "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}




pragma solidity ^0.8.0;






contract RentToken is ERC20, Ownable, Pausable {
    using MerkleProof for bytes32[];

    uint256 constant public MAX_SUPPLY = 132407400 ether; 
	uint256 constant public INTERVAL = 86400; 

    bytes32 public merkleOne; 
    bytes32 public merkleTwo;
    bytes32 public merkleThree;
    bool public stateLocked = false;

	mapping(address => uint256) private lastUpdate; 
    mapping(uint256 => uint256) private NFTReward; 

	IERC721Enumerable public NFTContract;  

	event RewardPaid(address indexed user, uint256 reward); 
 
    constructor(address NFTContractAddress) ERC20("TheLandDAO Rent", "RENT") {

        setNFTContractAddress(NFTContractAddress);
        setMerkleRoots(
            0x20601687dba511bb55c7117c2eaf5da3f978ff2092794b653fcd503928548dd8,
            0x62eabcc3369785536a90efb26ad0f463cd7d14a92b1ea53d6bfbe502cbf0097f,
            0xd4efe9e8d38c0bd881d7788a174a1e0b0c1e38bd4c0b6960299d8a7fe46e70e7
        );
        pause();
    }

    

    
    function lockState() public onlyOwner {
        require(address(NFTContract) != address(0));
        require(merkleOne != 0 && merkleTwo != 0 && merkleThree != 0);

        stateLocked = true;
    }

    
    function pause() public onlyOwner { 

        _pause(); 
    }
 
    
    function setNFTContractAddress(address _NFTContract) public onlyOwner {
        require(!stateLocked, "Contract can no longer be changed");

        NFTContract = IERC721Enumerable(_NFTContract);
    }

    
    function setMerkleRoots(bytes32 _tierOne, bytes32 _tierTwo, bytes32 _tierThree) public onlyOwner {
        require(!stateLocked, "Contract can no longer be changed");

        merkleOne = _tierOne;
        merkleTwo = _tierTwo;
        merkleThree = _tierThree;
    }

    
    function unpause() public onlyOwner { 
        require(address(NFTContract) != address(0));
        require(merkleOne != 0 && merkleTwo != 0 && merkleThree != 0);

        _unpause(); 
    } 

    

    
    
    function getDailyReward(uint256 tokenId) external view returns(uint256) {
        require(isProved(tokenId), "Tier has not yet been proved.");

        return NFTReward[tokenId];
    }

    
    
    function getLastUpdate(address user) external view returns(uint256) {
        
        return lastUpdate[user];
    }

    
    function getNFTBalance(address user) public view returns (uint256) {

        return NFTContract.balanceOf(user);
    }

    
    function getNFTIds(address user) public view returns (uint256[] memory _tokensOfOwner) {
        _tokensOfOwner = new uint256[](getNFTBalance(user));

        for (uint256 i = 0; i < getNFTBalance(user); i++) { 
            _tokensOfOwner[i] = NFTContract.tokenOfOwnerByIndex(user, i);
        }
    }

    
    
    function isProved(uint256 tokenId) public view returns (bool proved) {
        
        if (NFTReward[tokenId] > 0) {
            proved = true;
        } else {
            proved = false;
        }

        return proved;
    }
    
    
    
    function getPendingReward(address user) public view returns(uint256) { 
        uint256 dailyReward = 0;
        uint256[] memory NFTIds = getNFTIds(user);
        
        
        for (uint256 i = 0; i < getNFTBalance(user); i++) { 
            require(isProved(NFTIds[i]), "Make sure your NFTs have been initalized by calling isProved(ID)");

            dailyReward = dailyReward + (NFTReward[NFTIds[i]]); 
        }

        
        
        
        return (dailyReward * 1 ether * (block.timestamp - lastUpdate[user])) / INTERVAL;
    }

    

    
    
    function claimReward() external whenNotPaused { 
        require(totalSupply() < MAX_SUPPLY, "RENT collection is over"); 
        require(lastUpdate[msg.sender] != 0, "If you have a LAND token, call startEarningRent"); 
 
        uint256 currentReward = getPendingReward(msg.sender);

        pay(msg.sender, currentReward);

        lastUpdate[msg.sender] = block.timestamp; 
    }

    
    
    function proveTier(bytes32[] calldata _merkleProof, bytes32 tokenHash, uint256 tokenId) public whenNotPaused {
        require(tokenId <= 8888, "Invalid token ID.");
        require(msg.sender == NFTContract.ownerOf(tokenId) || msg.sender == address(this)); 

        if (tokenId <= 1500) { 
            NFTReward[tokenId] = 10;
        } else if (MerkleProof.verify(_merkleProof, merkleOne, tokenHash)) { 
            NFTReward[tokenId] = 4;
        } else if (MerkleProof.verify(_merkleProof, merkleTwo, tokenHash)) { 
            NFTReward[tokenId] = 3;
        } else if (MerkleProof.verify(_merkleProof, merkleThree, tokenHash)) { 
            NFTReward[tokenId] = 2;
        } else {
            revert();
        }
    }

    
    
    
    function startEarningRent(
        bytes32[][] calldata _merkleProofs, 
        bytes32[] calldata _tokenHashes 
    ) external whenNotPaused {
        require(getNFTBalance(msg.sender) > 0, "Buy a LandDao NFT to start earning RENT");

        uint256[] memory tokenIds = getNFTIds(msg.sender);
        
        
        for (uint256 i = 0; i < tokenIds.length; i++) {
            if (!isProved(tokenIds[i])) {
                proveTier(_merkleProofs[i], _tokenHashes[i], tokenIds[i]);
                mintAirdrop(msg.sender, tokenIds[i]);
            }
        }

        lastUpdate[msg.sender] = block.timestamp;
    }

    

    
    function mintAirdrop(address user, uint256 tokenId) internal whenNotPaused {
        require(totalSupply() < MAX_SUPPLY, "RENT collection is over"); 
 
        uint256 startBlock;
        if (tokenId <= 1500) { 
            startBlock = 1640995200; 
        } else {
            startBlock = 1642291200; 
        }
        uint256 currentReward = (NFTReward[tokenId] * 1 ether * (block.timestamp - startBlock)) / INTERVAL;

        pay(user, currentReward);
    }
    
    
    function pay(address user, uint256 reward) internal whenNotPaused {

        if (totalSupply() + reward <= MAX_SUPPLY) { 

            _mint(user, reward); 

        } else { 
            reward = MAX_SUPPLY - totalSupply();
            _mint(user, reward);
        }

        emit RewardPaid(user, reward);
    }
}