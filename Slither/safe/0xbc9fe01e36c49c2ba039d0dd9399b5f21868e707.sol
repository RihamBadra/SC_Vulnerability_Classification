pragma solidity 0.6.5;
pragma experimental ABIEncoderV2;

struct ProtocolBalance {

    ProtocolMetadata metadata;

    AdapterBalance[] adapterBalances;

}

struct ProtocolMetadata {

    string name;

    string description;

    string websiteURL;

    string iconURL;

    uint256 version;

}

struct AdapterBalance {

    AdapterMetadata metadata;

    FullTokenBalance[] balances;

}

struct AdapterMetadata {

    address adapterAddress;

    string adapterType; 

}

struct FullTokenBalance {

    TokenBalance base;

    TokenBalance[] underlying;

}

struct TokenBalance {

    TokenMetadata metadata;

    uint256 amount;

}

struct TokenMetadata {

    address token;

    string name;

    string symbol;

    uint8 decimals;

}

struct Component {

    address token;

    string tokenType;  

    uint256 rate;  

}

interface ERC20 {

    function approve(address, uint256) external returns (bool);

    function transfer(address, uint256) external returns (bool);

    function transferFrom(address, address, uint256) external returns (bool);

    function name() external view returns (string memory);

    function symbol() external view returns (string memory);

    function decimals() external view returns (uint8);

    function totalSupply() external view returns (uint256);

    function balanceOf(address) external view returns (uint256);

}

interface TokenAdapter {



    

    function getMetadata(address token) external view returns (TokenMetadata memory);



    

    function getComponents(address token) external view returns (Component[] memory);

}

interface CurveRegistry {

    function getSwapAndTotalCoins(address) external view returns (address, uint256);

    function getName(address) external view returns (string memory);

}

interface stableswap {

    function coins(int128) external view returns (address);

    function balances(int128) external view returns (uint256);

}

contract SwerveTokenAdapter is TokenAdapter {



    address internal constant REGISTRY = 0x2f9505a841a1e3b4fBFbb6693c8C3b26C5F1254D;



    

    function getMetadata(address token) external view override returns (TokenMetadata memory) {

        return TokenMetadata({

            token: token,

            name: getPoolName(token),

            symbol: ERC20(token).symbol(),

            decimals: ERC20(token).decimals()

        });

    }



    

    function getComponents(address token) external view override returns (Component[] memory) {

        (address swap, uint256 totalCoins) = CurveRegistry(REGISTRY).getSwapAndTotalCoins(token);

        Component[] memory underlyingComponents= new Component[](totalCoins);



        address underlyingToken;

        for (uint256 i = 0; i < totalCoins; i++) {

            underlyingToken = stableswap(swap).coins(int128(i));

            underlyingComponents[i] = Component({

                token: underlyingToken,

                tokenType: "ERC20",

                rate: stableswap(swap).balances(int128(i)) * 1e18 / ERC20(token).totalSupply()

            });

        }



        return underlyingComponents;

    }



    

    function getPoolName(address token) internal view returns (string memory) {

        return CurveRegistry(REGISTRY).getName(token);

    }

}
