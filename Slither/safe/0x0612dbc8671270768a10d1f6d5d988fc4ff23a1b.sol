



pragma solidity =0.8.10 >=0.8.0 >=0.8.0 <0.9.0;







abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}









abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}







library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}






abstract contract ERC1155 {
    






contract CanvasRegistry is ERC1155, Ownable {
    using Strings for uint;
    string private _uri;

    event TransferCanvasOwnership(address indexed from, address indexed to, uint indexed tokenId);

    mapping (uint => address) public canvasOwners;
    ERC1155 presaleMintPass;
    uint public mintPrice = 0.01 ether;

    bool publicSale;
    bool mintingPaused;

    constructor(address presaleMintPassAddress, string memory initialURI) {
        presaleMintPass = ERC1155(presaleMintPassAddress);
        _uri = initialURI;
    }

    function transferCanvasOwnership(uint tokenId, address newOwner) public {
        require(canvasOwners[tokenId] == msg.sender);
        canvasOwners[tokenId] = newOwner; 
        emit TransferCanvasOwnership(msg.sender, newOwner, tokenId);
    }

    function mint(uint label, uint amount) public payable {
        require(publicSale && !mintingPaused, "Presale active");
        require(msg.value >= mintPrice * amount, "Requires more Ether");
        require(canvasOwners[label] == address(0), "This CNVS already exists.");

        canvasOwners[label] = msg.sender; 
        _mint(msg.sender, label, amount, "");
    }

    function gift(uint label, uint amount, address to) public payable {
        require(publicSale && !mintingPaused, "Presale active");
        require(msg.value >= mintPrice * amount, "Requires more Ether");
        require(canvasOwners[label] == address(0), "This CNVS already exists.");

        canvasOwners[label] = to; 
        _mint(to, label, amount, "");
    }

    function mintPresale(uint label, uint amount) public {
        require(
            !publicSale && 
            !mintingPaused && 
            (presaleMintPass.balanceOf(msg.sender, 1) > 0 || presaleMintPass.balanceOf(msg.sender, 2) > 0),
             "You are not elligible for presale."
        );
        require(canvasOwners[label] == address(0), "This CNVS already exists.");

        canvasOwners[label] = msg.sender; 
        _mint(msg.sender, label, amount, "");
    }

    function setMintPrice(uint newMintPrice) public onlyOwner {
        mintPrice = newMintPrice;
    }

    function setURI(string memory newURI) public onlyOwner {
        _uri = newURI;
    }

    
    function setPublicSale() public onlyOwner {
        publicSale = true;
    }

    function setMintingPaused(bool paused) public onlyOwner {
        mintingPaused = paused;
    }

    function uri(uint id) public view virtual override returns (string memory) {
        return string(abi.encodePacked(_uri, id.toString()));
    } 

    function withdrawal(address receiver) public onlyOwner {
        payable(receiver).transfer(address(this).balance);
    }
}