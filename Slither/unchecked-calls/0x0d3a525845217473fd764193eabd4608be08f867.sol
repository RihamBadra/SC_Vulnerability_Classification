


pragma solidity ^0.8.0;



interface LinkTokenInterface {

  function allowance(
    address owner,
    address spender
  )
    external
    view
    returns (
      uint256 remaining
    );

  function approve(
    address spender,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function balanceOf(
    address owner
  )
    external
    view
    returns (
      uint256 balance
    );

  function decimals()
    external
    view
    returns (
      uint8 decimalPlaces
    );

  function decreaseApproval(
    address spender,
    uint256 addedValue
  )
    external
    returns (
      bool success
    );

  function increaseApproval(
    address spender,
    uint256 subtractedValue
  ) external;

  function name()
    external
    view
    returns (
      string memory tokenName
    );

  function symbol()
    external
    view
    returns (
      string memory tokenSymbol
    );

  function totalSupply()
    external
    view
    returns (
      uint256 totalTokensIssued
    );

  function transfer(
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  )
    external
    returns (
      bool success
    );

  function transferFrom(
    address from,
    address to,
    uint256 value
  )
    external
    returns (
      bool success
    );

}

contract VRFRequestIDBase {

  
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  )
    internal
    pure
    returns (
      uint256
    )
  {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }

  
  function makeRequestId(
    bytes32 _keyHash,
    uint256 _vRFInputSeed
  )
    internal
    pure
    returns (
      bytes32
    )
  {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}


abstract contract VRFConsumerBase is VRFRequestIDBase {

  
  function fulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    internal
    virtual;

  
  uint256 constant private USER_SEED_PLACEHOLDER = 0;

  
  function requestRandomness(
    bytes32 _keyHash,
    uint256 _fee
  )
    internal
    returns (
      bytes32 requestId
    )
  {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    
    
    
    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    
    
    
    
    
    
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }

  LinkTokenInterface immutable internal LINK;
  address immutable private vrfCoordinator;

  
  
  
  mapping(bytes32  => uint256 ) private nonces;

  
  constructor(
    address _vrfCoordinator,
    address _link
  ) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }

  
  
  
  function rawFulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  )
    external
  {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}



library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


contract Context {
    
    
    constructor () { }
    

    function _msgSender() internal view returns (address) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


interface IERC1155Receiver {

    
    function onERC1155Received(
        address operator,
        address from,
        uint256 id,
        uint256 value,
        bytes calldata data
    )
        external
        returns(bytes4);

    
    function onERC1155BatchReceived(
        address operator,
        address from,
        uint256[] calldata ids,
        uint256[] calldata values,
        bytes calldata data
    )
        external
        returns(bytes4);
}



interface MoonDoge {
    
	function mint(
		address _to,
		uint256 _id,
		uint256 _quantity,
		bytes calldata _data
	) external;

	function create(
		uint256 _maxSupply,
		uint256 _initialSupply,
		string calldata _uri,
		bytes calldata _data
	) external returns (uint256 tokenId);

	function safeTransferFrom(
		address _from,
		address _to,
		uint256 _id,
		uint256 _amount,
		bytes calldata _data
	) external;

	function safeBatchTransferFrom(
		address _from,
		address _to,
		uint256[] calldata _ids,
		uint256[] calldata _amounts,
		bytes calldata _data
	) external;

	function balanceOf(address _owner, uint256 _id) external view returns (uint256);

	function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)
		external
		view
		returns (uint256[] memory);

	function setApprovalForAll(address _operator, bool _approved) external;

	function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);

	function tokenIdByTraits(bytes2 traits) external view returns (uint256 tokenId);
}
    
interface IERC1155 {
	event TransferSingle(
		address indexed _operator,
		address indexed _from,
		address indexed _to,
		uint256 _id,
		uint256 _amount
	);

	event TransferBatch(
		address indexed _operator,
		address indexed _from,
		address indexed _to,
		uint256[] _ids,
		uint256[] _amounts
	);

	event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);

	event URI(string _amount, uint256 indexed _id);

	function mint(
		address _to,
		uint256 _id,
		uint256 _quantity,
		bytes calldata _data
	) external;

	function create(
		uint256 _maxSupply,
		uint256 _initialSupply,
		string calldata _uri,
		bytes calldata _data
	) external returns (uint256 tokenId);

	function safeTransferFrom(
		address _from,
		address _to,
		uint256 _id,
		uint256 _amount,
		bytes calldata _data
	) external;

	function safeBatchTransferFrom(
		address _from,
		address _to,
		uint256[] calldata _ids,
		uint256[] calldata _amounts,
		bytes calldata _data
	) external;

	function balanceOf(address _owner, uint256 _id) external view returns (uint256);

	function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)
		external
		view
		returns (uint256[] memory);

	function setApprovalForAll(address _operator, bool _approved) external;

	function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract dogeIncubator is Ownable, IERC1155Receiver, VRFConsumerBase {
    using SafeMath for uint256;
    
    bytes2[] public availableDoges;
    
    uint256 public nftid;
    address public eggAddress;
    address public crackedEggAddress;
    uint256 public crackedEggId;
    address public dogeAddress;
    bool public active = false;
    
    
    uint public contractNumber = 0;
    
    bytes32 internal keyHash;
    bytes32 public currentRequestId;
    
    event Request(bytes32 requestId);
    event DogeBirth(bytes2 dogeType, uint256 pickedIndex);

    
    
    uint256 linkFee = 2 ether;
    
    
    mapping (bytes32 => address) private eggHatcher;
    
    constructor(address _eggAddress, uint256 _eggid, address _crackedEggAddress, uint256 _crackedEggId, address _dogeAddress) VRFConsumerBase(0xf0d54349aDdcf704F77AE15b96510dEA15cb7952, 0x514910771AF9Ca656af840dff83E8264EcF986CA) {
        eggAddress = _eggAddress;
        nftid = _eggid;
        crackedEggAddress = _crackedEggAddress;
        crackedEggId = _crackedEggId;
        dogeAddress = _dogeAddress;
        keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;
    }
    
    function hatchEgg() public {
        require(active == true, "The incubator is currently disabled");
        
        
        IERC1155(eggAddress).safeTransferFrom(msg.sender, address(this), nftid, 1, "");
        
        
        IERC1155(crackedEggAddress).safeTransferFrom(address(this), msg.sender, crackedEggId, 1, "");
        
        currentRequestId = requestRandomness(keyHash, linkFee);
        
        eggHatcher[currentRequestId] = msg.sender;
        
        emit Request(currentRequestId);
        
    }
    
    function finishHatchingEgg(bytes32 requestId, uint256 randomNumber) private {
        
        require(availableDoges.length >= 1, "No more doges");
        
        uint256 randomDoge = 0;
        
        if(availableDoges.length > 1) {
            randomDoge = randomNumber % (availableDoges.length-1);
        }
        
        
        bytes2 pickedDoge = availableDoges[randomDoge];
        availableDoges[randomDoge] = availableDoges[availableDoges.length - 1];
        availableDoges.pop();
        
        emit DogeBirth(pickedDoge, randomDoge);
        
        uint256 pickedDogeId = MoonDoge(dogeAddress).tokenIdByTraits(pickedDoge);
        
        address hatcher = eggHatcher[requestId];
        MoonDoge(dogeAddress).mint(hatcher, pickedDogeId, 1, "");
        
    }
    
    function setActive(bool isActive) public onlyOwner {
        active = isActive;
    }
    
    function addAvailableDoges(bytes2[] memory doges, uint256[] memory amounts) public onlyOwner {
        for (uint256 i = 0; i < doges.length; i++) {
            for (uint256 j = 0; j < amounts[i]; j++) {
                availableDoges.push(doges[i]);
            }
        }
    }
    
    function removeAvailableDoges(bool confirm) public onlyOwner {
        require(confirm == true, "You need to confirm");
        delete availableDoges;
    }
    
    function withdrawCrackedEggs(address to) public onlyOwner {
        uint256 amount = IERC1155(crackedEggAddress).balanceOf(address(this), crackedEggId);
        IERC1155(crackedEggAddress).safeTransferFrom(address(this), to, crackedEggId, amount, "");
    }
    
    function withdrawEther(address payable to, uint256 amount) public onlyOwner {
        to.transfer(amount);
    }

    function withdrawTokens(address token, address to, uint256 amount) public onlyOwner {
        IERC20 token = IERC20(token);
        token.transfer(to, amount);
    }
    
    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external override returns(bytes4) {
        return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));
    }
    
    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external override returns(bytes4) {
        return bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"));
    }
    
    
    
    function fulfillRandomness(bytes32 requestId, uint randomness) internal override {
        require(requestId == currentRequestId, "The requestId is invalid.");
        
        finishHatchingEgg(requestId, randomness);
    }
  
    
}