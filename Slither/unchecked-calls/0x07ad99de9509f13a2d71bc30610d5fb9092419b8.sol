




pragma solidity ^0.8.0;

interface ISkvllbabiez {
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
    function walletOfOwner(address _owner) external view returns(uint256[] memory);
    function balanceOf(address owner) external view returns (uint256 balance);
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function approve(address operator, uint256 tokenId) external;
}





pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity ^0.8.0;


abstract contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor() {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}






pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}






pragma solidity ^0.8.0;


interface IERC721Receiver {
    
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}




pragma solidity ^0.8.0;






contract DaycareStaking is IERC721Receiver, Ownable, ReentrancyGuard {

    event SkvllbabyCheckedIn(address owner, uint256 skvllbabyId);
    event SkvllbabyCheckedOut(address owner, uint256 skvllbabyId);
    event RewardCollected(address owner, uint256 skvllbabyId, uint256 amount);
    event DaycareOpen();
    event DaycareClosed();

    struct Skvllbaby{
        uint256 id;
        address owner;
        uint256 lastClaimTimestamp;
        uint256 accruedBalance;
        bool staked;
    }

    uint256 private constant REWARD_PER_DAY = 4*10**18;
    uint256 private constant REWARD_PER_SEC = REWARD_PER_DAY / 86400;

    ISkvllbabiez private SkvllpvnkzDaycare = ISkvllbabiez(0x40BCA1edDf13b5FFA8f6f1d470cabC78Ec2FC3bb);
    IERC20 private SkvllpvnkzTreasury = IERC20(0xBcB6112292a9EE9C9cA876E6EAB0FeE7622445F1);
    
    bool public isDaycareOpen = false;

    mapping(uint256 => Skvllbaby) private skvllbabiez;
    mapping(address => uint256[]) private skvllbabiezByOwner;
    uint256[] private checkedInList;
    
    modifier daycareOpen {
        require( isDaycareOpen, "Skvllpvnkz Daycare is closed" );
        _;
    }

    modifier isSkvllbaby(address contractAddress) {    
        require( contractAddress == address(SkvllpvnkzDaycare), "Not a Skvllbaby!" );
        _;
    }
    
    function onERC721Received(address, address from, uint256 skvllbabyId, bytes memory) 
        override external daycareOpen isSkvllbaby(msg.sender) returns(bytes4) { 
            skvllbabiezByOwner[from].push(skvllbabyId);
            skvllbabiez[skvllbabyId] = 
                Skvllbaby(
                    skvllbabyId, 
                    from, 
                    block.timestamp, 
                    0, 
                    true); 
            emit SkvllbabyCheckedIn( from, skvllbabyId );
            return IERC721Receiver.onERC721Received.selector;
    }
    
    function checkIn(uint256[] memory skvllbabyIds) external nonReentrant {
        for (uint256 i; i < skvllbabyIds.length; i++){
            SkvllpvnkzDaycare.safeTransferFrom( msg.sender, address(this), skvllbabyIds[i]);
        }
    }

    function checkOut(uint256[] memory skvllbabyIds) public daycareOpen nonReentrant {
        require(skvllbabyIds.length > 0, "Need to provide at least 1 id");
        uint256 rewardTimestamp = block.timestamp;
        for (uint256 i; i < skvllbabyIds.length; i++){
            require(msg.sender == skvllbabiez[skvllbabyIds[i]].owner, "Not your Skvllbaby");
            skvllbabiez[skvllbabyIds[i]].accruedBalance = _calculateRewards(skvllbabyIds[i], rewardTimestamp );
            skvllbabiez[skvllbabyIds[i]].staked = false;
            SkvllpvnkzDaycare.safeTransferFrom( address(this), msg.sender, skvllbabyIds[i]);
            updateSkvllbabiezByOwner(skvllbabyIds[i]);
            emit SkvllbabyCheckedOut(msg.sender, skvllbabyIds[i]);
        }
    }

    function collectRewards(uint256[] memory skvllbabyIds) public daycareOpen nonReentrant{
        uint256 rewardTimestamp = block.timestamp;
        uint256 rewardAmount = 0;
        for (uint256 i; i < skvllbabyIds.length; i++){
            if (address(this) == SkvllpvnkzDaycare.ownerOf(skvllbabyIds[i])) {
                rewardAmount += _calculateRewards(skvllbabyIds[i], rewardTimestamp );
                rewardAmount += skvllbabiez[skvllbabyIds[i]].accruedBalance;             
            } else {
                require(msg.sender == SkvllpvnkzDaycare.ownerOf(skvllbabyIds[i]), "Not your Skvllbaby");
                rewardAmount += skvllbabiez[skvllbabyIds[i]].accruedBalance;
            }
            skvllbabiez[skvllbabyIds[i]].accruedBalance = 0;
            skvllbabiez[skvllbabyIds[i]].lastClaimTimestamp = rewardTimestamp;
            emit RewardCollected(msg.sender, skvllbabyIds[i], rewardAmount);
        }
        _releasePayment(rewardAmount);
    }

    function _calculateRewards(uint256 skvllbabyId, uint256 currentTime ) internal view returns (uint256){
        return (currentTime - skvllbabiez[skvllbabyId].lastClaimTimestamp) * REWARD_PER_SEC;
    }

    function _releasePayment(uint256 rewardAmount) internal {
        require(rewardAmount > 0, "Nothing to collect");
        require(SkvllpvnkzTreasury.balanceOf(address(this)) >= rewardAmount, "Not enough AMMO");
        SkvllpvnkzTreasury.approve(address(this), rewardAmount); 
        SkvllpvnkzTreasury.transfer(msg.sender, rewardAmount);
    }
    
    function getSkvllbabyReport(uint256 skvllbabyId) public view returns (Skvllbaby memory ){
        bool staked = address(this) == SkvllpvnkzDaycare.ownerOf(skvllbabyId);
        return Skvllbaby(
                    skvllbabyId,
                    staked ? skvllbabiez[skvllbabyId].owner : SkvllpvnkzDaycare.ownerOf(skvllbabyId), 
                    skvllbabiez[skvllbabyId].lastClaimTimestamp, 
                    staked ? _calculateRewards(skvllbabyId, block.timestamp) : skvllbabiez[skvllbabyId].accruedBalance,
                    staked);
        
    }

    function getWalletReport(address wallet) external view returns(Skvllbaby[] memory ){
        uint256[] memory stakedIds = skvllbabiezByOwner[ wallet ];
        uint256[] memory unstakedIds = SkvllpvnkzDaycare.walletOfOwner(wallet);
        uint256[] memory ids = _concatArrays(stakedIds, unstakedIds);
        require(ids.length > 0, "Wallet has no babiez");
        Skvllbaby[] memory babiez = new Skvllbaby[](ids.length);
        for (uint256 i; i < ids.length; i++){
            babiez[i] = getSkvllbabyReport(ids[i]);
        }
        return babiez;
        
    }

    function getBatchPendingRewards(uint64[] memory tokenIds) external view returns(Skvllbaby[] memory) {
        Skvllbaby[] memory allRewards = new Skvllbaby[](tokenIds.length);
        for (uint64 i = 0; i < tokenIds.length; i++){
            allRewards[i] = getSkvllbabyReport(tokenIds[i]);
        }
        return allRewards;
    }

    function _concatArrays(uint256[] memory ids, uint256[] memory ids2) internal pure returns(uint256[] memory) {
        uint256[] memory returnArr = new uint256[](ids.length + ids2.length);

        uint i=0;
        for (; i < ids.length; i++) {
            returnArr[i] = ids[i];
        }

        uint j=0;
        while (j < ids2.length) {
            returnArr[i++] = ids2[j++];
        }

        return returnArr;
    }

    function updateSkvllbabiezByOwner(uint256 skvllbabyId) internal {
        if (skvllbabiezByOwner[msg.sender].length == 1) {
            delete skvllbabiezByOwner[msg.sender];
        } else {
            for (uint256 i; i < skvllbabiezByOwner[msg.sender].length; i++){
                if (skvllbabiezByOwner[msg.sender][i] == skvllbabyId) {
                    skvllbabiezByOwner[msg.sender][i] = skvllbabiezByOwner[msg.sender][skvllbabiezByOwner[msg.sender].length - 1];
                    skvllbabiezByOwner[msg.sender].pop();
                }
            }
        }
    }

    function isSkvllbabyCheckedIn (uint256 skvllbabyId) external view returns (bool){
        return SkvllpvnkzDaycare.ownerOf(skvllbabyId) == address(this) ? true : false;
    }

    function openCloseDaycare() external onlyOwner {
        isDaycareOpen = !isDaycareOpen;
    }

    function withdraw(uint256 amount) external payable onlyOwner {
        require(payable(msg.sender).send(amount), "Payment failed");
    }

    function setTreasuryContract(address skvllpvnkzTreasury) external onlyOwner {
        SkvllpvnkzTreasury = IERC20(skvllpvnkzTreasury);
    }

    function setSkvllbabiezContract(address skvllpvnkzDaycare) external onlyOwner {
        SkvllpvnkzDaycare = ISkvllbabiez(skvllpvnkzDaycare);
    }
}