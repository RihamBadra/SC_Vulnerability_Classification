




pragma solidity 0.8.7;

library SafeMath {

  
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    
    
    
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b, "SafeMath#mul: OVERFLOW");

    return c;
  }

  
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    
    require(b > 0, "SafeMath#div: DIVISION_BY_ZERO");
    uint256 c = a / b;
    

    return c;
  }

  
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a, "SafeMath#sub: UNDERFLOW");
    uint256 c = a - b;

    return c;
  }

  
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a, "SafeMath#add: OVERFLOW");

    return c; 
  }

  
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0, "SafeMath#mod: DIVISION_BY_ZERO");
    return a % b;
  }

}

abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}



interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract SingleSidedStakingDNXC is Ownable {
    
    using SafeMath for uint256;
    
    struct StakerInfo {
        uint256 amount;
        uint256 startStakeTime;
        uint256 dnxA;
        uint256 dnxB;
        uint256 dnxC;
    }

    uint256 public stakingStart;
    uint256 public stakingEnd;
    uint256 public stakingClosed;
    
    uint256 public maximumStakedDNXC;       
    uint256 public currentStakedDNXC;
    uint256 public minimumStake;

    IERC20 dnxcToken;                    
    
    mapping(address => StakerInfo) public stakerInfo;
    uint256 internal fee;
    bool paused;
    bool emergencyUnstake;
    
    constructor(uint256 _minimumStake, uint256 _maximumStakedDNXC, uint256 _stakingStart, uint256 _stakingClosed, uint256 _stakingEnd, IERC20 _dnxcToken) 
     {
        
        minimumStake = _minimumStake;
        maximumStakedDNXC = _maximumStakedDNXC;
        stakingStart = _stakingStart;
        stakingClosed = _stakingClosed;
        stakingEnd = _stakingEnd;
        paused = true;
        
        dnxcToken = _dnxcToken;
    }
    
    function changePause(bool _pause) onlyOwner public {
        paused = _pause;
    }
    
    function changeEmergency(bool _emergencyUnstake) onlyOwner public {
        emergencyUnstake = _emergencyUnstake;
    }
    
    function changeEndTime(uint256 endTime) public onlyOwner {
      stakingEnd = endTime;
    }
    function changeCloseTime(uint256 closeTime) public onlyOwner {
      stakingClosed = closeTime;
    }
    function changeStartTime(uint256 startTime) public onlyOwner {
      stakingStart = startTime;
    }

    function changeDNX(uint256 _dnxA, uint256 _dnxB, uint256 _dnxC) public {
        
        StakerInfo storage user = stakerInfo[msg.sender];
        require (user.amount > 0, "E10");

        user.dnxA = _dnxA;
        user.dnxB = _dnxB;
        user.dnxC = _dnxC;
    }
      
    function stake(uint256 _amount, uint256 _dnxA, uint256 _dnxB, uint256 _dnxC) public {
        require (paused == false, "E09");
        require (block.timestamp >= stakingStart, "E07");
        require (block.timestamp <= stakingClosed, "E08");
        require (currentStakedDNXC.add(_amount) <= maximumStakedDNXC, "E09");
        
        StakerInfo storage user = stakerInfo[msg.sender];
        require (user.amount.add(_amount) >= minimumStake, "E01");
        require (dnxcToken.transferFrom(msg.sender, address(this), _amount), "E02");
        
        currentStakedDNXC = currentStakedDNXC.add(_amount);
        
        if (user.amount == 0) {
            user.startStakeTime = block.timestamp;
        }
        
        user.amount = user.amount.add(_amount);
        user.dnxA = _dnxA;
        user.dnxB = _dnxB;
        user.dnxC = _dnxC;
    }
    
    function unstake() public {
        
        require (emergencyUnstake || block.timestamp >= stakingEnd || block.timestamp <= stakingClosed, "E08");
        StakerInfo storage user = stakerInfo[msg.sender];
        
        dnxcToken.transfer(
            msg.sender,
            user.amount
        );
        
        currentStakedDNXC = currentStakedDNXC.sub(user.amount);
        user.amount = 0;
        user.dnxA = 0;
        user.dnxB = 0;
        user.dnxC = 0;
    }
    

}