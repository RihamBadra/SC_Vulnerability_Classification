






pragma solidity ^0.8.0;


library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}






pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}






pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}






pragma solidity ^0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return verifyCallResult(success, returndata, errorMessage);
    }

    
    function verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) internal pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}






pragma solidity ^0.8.0;


interface IERC721Receiver {
    
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}






pragma solidity ^0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}






pragma solidity ^0.8.0;



abstract contract ERC165 is IERC165 {
    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}






pragma solidity ^0.8.0;



interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}






pragma solidity ^0.8.0;



interface IERC721Enumerable is IERC721 {
    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}






pragma solidity ^0.8.0;



interface IERC721Metadata is IERC721 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function tokenURI(uint256 tokenId) external view returns (string memory);
}






pragma solidity ^0.8.0;









contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    
    string private _name;

    
    string private _symbol;

    
    mapping(uint256 => address) private _owners;

    
    mapping(address => uint256) private _balances;

    
    mapping(uint256 => address) private _tokenApprovals;

    
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    
    function setApprovalForAll(address operator, bool approved) public virtual override {
        _setApprovalForAll(_msgSender(), operator, approved);
    }

    
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    
    function _setApprovalForAll(
        address owner,
        address operator,
        bool approved
    ) internal virtual {
        require(owner != operator, "ERC721: approve to caller");
        _operatorApprovals[owner][operator] = approved;
        emit ApprovalForAll(owner, operator, approved);
    }

    
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver.onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}






pragma solidity ^0.8.0;




abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    
    mapping(uint256 => uint256) private _ownedTokensIndex;

    
    uint256[] private _allTokens;

    
    mapping(uint256 => uint256) private _allTokensIndex;

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; 
            _ownedTokensIndex[lastTokenId] = tokenIndex; 
        }

        
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        
        
        
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; 
        _allTokensIndex[lastTokenId] = tokenIndex; 

        
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}




pragma solidity ^0.8.0;




library SafeMath {
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
        if (a == 0) { return 0; }
        c = a * b;
        require(c / a == b);
        return c;
    }
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return a / b;
    }
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a);
        return a - b;
    }
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {
        c = a + b;
        require(c >= a);
        return c;
    }
}

contract nonFungibleFungiMintPass is ERC721Enumerable, Ownable {
    /* Created by: 0xInuarashi
    Discord: 0xInuarashi#1234
    Twitter: https:

    constructor() payable ERC721("NonFungibleFungiMintPass", "NFFMINT") {}

    
    using SafeMath for uint;

    
    uint public maxTokens = 10000;

    uint public tokensReservedForWhitelist = 6695;
    uint public tokensMintedForWhitelist = 0;

    uint public tokensReservedForDutchAuction = 3000;
    uint public tokensMintedForDutchAuction = 0;

    uint public tokensReservedForReserved = 305;
    uint public tokensMintedForReserved = 0;

    string internal baseTokenURI;
    string internal baseTokenURI_EXT;

    event MintAsOwner(address indexed to, uint tokenId);
    event MintWhitelist(address indexed to, uint tokenId);
    event MintDutchAuction(address indexed to, uint price, uint tokenId);
    event MintRolloverSale(address indexed to, uint tokenId);

    
    modifier onlySender {
        require (msg.sender == tx.origin, "No smart contracts!");
        _;
    }
    
    
    mapping(address => bool) internal shareholderToUnlockGovernance;

    address internal Shareholder_1 = 0x9eEFBb6759E48aAafd8a49d825abFdD0B22d5aD1;
    address internal Shareholder_2 = 0x506aeaEb48cA2E4145910606a6Fe97f294477d1B;
    address internal Shareholder_3 = 0x2f3Db2A40C01d1fDd6Fd4ac6040684292B8807e8;
    address internal Shareholder_4 = 0x458E0c06506eabE9C21074A46E7fAb70672D6205;
    address internal Shareholder_5 = 0x2cF855E17bD28Bb34982Ca1E4371ef7d3E6817e1;
    address internal Shareholder_6 = 0xB4C84F2848ba2FF988f4Ca33A5b37f0FCC4a60c2;
    address internal Shareholder_7 = 0x1eD3D146cb5945e1C894A70013Ed83F95693EA22; 

    uint internal Shareholder_1_Share = 7; 
    uint internal Shareholder_2_Share = 7;
    uint internal Shareholder_3_Share = 21; 
    uint internal Shareholder_4_Share = 35;
    uint internal Shareholder_5_Share = 12;
    uint internal Shareholder_6_Share = 10; 
    uint internal Shareholder_7_Share = 8; 

    
    event Received(address from, uint amount);
    receive() external payable {
        emit Received(msg.sender, msg.value);
    }

    
    function withdrawEther() public onlyOwner {
        uint _totalETH = address(this).balance;
        
        uint _Shareholder_1_ETH = ((_totalETH * Shareholder_1_Share) / 100);
        uint _Shareholder_2_ETH = ((_totalETH * Shareholder_2_Share) / 100);
        uint _Shareholder_3_ETH = ((_totalETH * Shareholder_3_Share) / 100);
        uint _Shareholder_4_ETH = ((_totalETH * Shareholder_4_Share) / 100);
        uint _Shareholder_5_ETH = ((_totalETH * Shareholder_5_Share) / 100);
        uint _Shareholder_6_ETH = ((_totalETH * Shareholder_6_Share) / 100);
        uint _Shareholder_7_ETH = ((_totalETH * Shareholder_7_Share) / 100);
        
        payable(Shareholder_1).transfer(_Shareholder_1_ETH);
        payable(Shareholder_2).transfer(_Shareholder_2_ETH);
        payable(Shareholder_3).transfer(_Shareholder_3_ETH);
        payable(Shareholder_4).transfer(_Shareholder_4_ETH);
        payable(Shareholder_5).transfer(_Shareholder_5_ETH);
        payable(Shareholder_6).transfer(_Shareholder_6_ETH);
        payable(Shareholder_7).transfer(_Shareholder_7_ETH);
    }

    function viewWithdrawEtherAmounts() public view onlyOwner returns (uint[] memory) {
        uint _totalETH = address(this).balance;
        uint[] memory _ethToSendArray = new uint[](9);
        
        uint _Shareholder_1_ETH = ((_totalETH * Shareholder_1_Share) / 100);
        uint _Shareholder_2_ETH = ((_totalETH * Shareholder_2_Share) / 100);
        uint _Shareholder_3_ETH = ((_totalETH * Shareholder_3_Share) / 100);
        uint _Shareholder_4_ETH = ((_totalETH * Shareholder_4_Share) / 100);
        uint _Shareholder_5_ETH = ((_totalETH * Shareholder_5_Share) / 100);
        uint _Shareholder_6_ETH = ((_totalETH * Shareholder_6_Share) / 100);
        uint _Shareholder_7_ETH = ((_totalETH * Shareholder_7_Share) / 100);

        _ethToSendArray[0] = _Shareholder_1_ETH;
        _ethToSendArray[1] = _Shareholder_2_ETH;
        _ethToSendArray[2] = _Shareholder_3_ETH;
        _ethToSendArray[3] = _Shareholder_4_ETH;
        _ethToSendArray[4] = _Shareholder_5_ETH;
        _ethToSendArray[5] = _Shareholder_6_ETH;
        _ethToSendArray[6] = _Shareholder_7_ETH;
        _ethToSendArray[7] = _totalETH; 
        _ethToSendArray[8] = _Shareholder_1_ETH + _Shareholder_2_ETH + _Shareholder_3_ETH + _Shareholder_4_ETH + _Shareholder_5_ETH + _Shareholder_6_ETH + _Shareholder_7_ETH; 

        return _ethToSendArray;
    }

    
    
    
    modifier onlyShareholder {
        require(msg.sender == Shareholder_1 || msg.sender == Shareholder_2 || msg.sender == Shareholder_3 || msg.sender == Shareholder_4 || msg.sender == Shareholder_5 || msg.sender == Shareholder_6 || msg.sender == Shareholder_7, "You are not a shareholder!");
        _;
    }
    function unlockEmergencyFunctionAsShareholder() public onlyShareholder {
        shareholderToUnlockGovernance[msg.sender] = true;
    }

    modifier emergencyOnly {
        require(shareholderToUnlockGovernance[Shareholder_1] && shareholderToUnlockGovernance[Shareholder_2] && shareholderToUnlockGovernance[Shareholder_3] && shareholderToUnlockGovernance[Shareholder_4] && shareholderToUnlockGovernance[Shareholder_5] && shareholderToUnlockGovernance[Shareholder_6] && shareholderToUnlockGovernance[Shareholder_7], "The emergency function has not been unlocked!");
        _;
    }
    function emergencyWithdrawEther() public onlyOwner emergencyOnly {
        payable(msg.sender).transfer(address(this).balance); 
    }
    
    function checkGovernanceStatus(address address_) public view onlyShareholder returns (bool) {
        return shareholderToUnlockGovernance[address_];
    }

    

    
    function ownerMintMany(address address_, uint amount_) public onlyOwner {
        require(tokensReservedForReserved >= tokensMintedForReserved + amount_, "No more reserved tokens!");

        tokensMintedForReserved += amount_; 

        for (uint i = 0; i < amount_; i++) {
            uint _mintId = totalSupply();
            _mint(address_, _mintId);

            emit MintAsOwner(address_, _mintId);
        }
    }
    function ownerMint(address address_) public onlyOwner {
        require(tokensReservedForReserved > tokensMintedForReserved, "No more reserved tokens!");

        tokensMintedForReserved++; 

        uint _mintId = totalSupply();
        _mint(address_, _mintId);

        emit MintAsOwner(address_, _mintId);
    }
    
    
    uint public addressesWhitelisted = 0; 
    uint public whiteListPrice = 0.08 ether; 
    mapping(address => uint) public addressToWhitelistQuota; 
    mapping(address => uint) public addressToWhitelistMinted; 
    bool public whiteListMintEnabled;

    modifier whiteListMint {
        require(whiteListMintEnabled, "Whitelist Mints are not enabled yet!");
        _;
    }

    
    function setWhiteListMintStatus(bool bool_) public onlyOwner {
        whiteListMintEnabled = bool_;
    }
    function addAddressToWhitelist(address[] memory addresses_) public onlyOwner {
        uint _amountOfAddresses = addresses_.length;
        for (uint i = 0; i < _amountOfAddresses; i++) {
            addressToWhitelistQuota[addresses_[i]] = 1; 
        }
        addressesWhitelisted += _amountOfAddresses; 
    }
    function checkWhitelistArrayIsUnique(address[] memory addresses_) public view onlyOwner returns (bool) {
        uint _amountOfAddresses = addresses_.length;
        for (uint i = 0; i < _amountOfAddresses; i++) {
            if (addressToWhitelistQuota[addresses_[i]] == 1) {
                return false;
            }
        }
        return true;
    }
    function checkWhitelistArrayIsAllUnclaimed(address[] memory addresses_) public view onlyOwner returns (bool) {
        uint _amountOfAddresses = addresses_.length;
        for (uint i = 0; i < _amountOfAddresses; i++) {
            if (addressToWhitelistMinted[msg.sender] != 0) {
                return false;
            }
        }
        return true;
    }
    function mintWhitelist() public payable onlySender whiteListMint {
        require(addressToWhitelistQuota[msg.sender] > 0, "You are not whitelisted!");
        require(addressToWhitelistMinted[msg.sender] == 0, "You have no more whitelist mints left!");
        require(msg.value == whiteListPrice, "Invalid value sent!");
        require(tokensReservedForWhitelist > tokensMintedForWhitelist, "No more whitelist tokens!");
        require(maxTokens > totalSupply(), "No more tokens remaining!");

        addressToWhitelistMinted[msg.sender]++; 
        tokensMintedForWhitelist++; 

        uint _mintId = totalSupply();
        _mint(msg.sender, _mintId);

        emit MintWhitelist(msg.sender, _mintId);
    }

    
    bytes32 public merkleRoot = 0x57c359b719e25852692060d2b4d8ce73ad9fea9406622eab2d3cb352cf46373c;

    function setMerkleRoot(bytes32 merkleRoot_) public onlyOwner {
        merkleRoot = merkleRoot_;
    }

    function isMerkleWhitelisted(bytes32[] memory proof_) public view returns (bool) {
        bytes32 _leaf = keccak256(abi.encodePacked(msg.sender));
        
        for (uint i = 0; i < proof_.length; i++) {
            _leaf = _leaf < proof_[i] ? keccak256(abi.encodePacked(_leaf, proof_[i])) : keccak256(abi.encodePacked(proof_[i], _leaf));
        }
        return _leaf == merkleRoot;
    }

    function mintWhitelistMerkleTree(bytes32[] memory proof_) public payable onlySender whiteListMint {
        require(isMerkleWhitelisted(proof_), "You are not whitelisted!");
        require(addressToWhitelistMinted[msg.sender] == 0, "You have no more whitelist mints left!");
        require(msg.value == whiteListPrice, "Invalid value sent!");
        require(tokensReservedForWhitelist > tokensMintedForWhitelist, "No more whitelist tokens!");
        require(maxTokens > totalSupply(), "No more tokens remaining!");

        addressToWhitelistMinted[msg.sender]++; 
        tokensMintedForWhitelist++; 

        uint _mintId = totalSupply();
        _mint(msg.sender, _mintId);

        emit MintWhitelist(msg.sender, _mintId);
    }
    
    
    uint public dutchEndingPrice = 0.08 ether;
    uint public dutchPriceAdditional; 
    uint public dutchStartTime; 
    uint public dutchDuration; 
    uint public dutchEndTime; 
    bool public dutchAuctionStarted; 

    modifier dutchAuction {
        require(dutchAuctionStarted && block.timestamp >= dutchStartTime, "Dutch auction has not started yet!");
        _;
    }
    function setDutchAuctionStartStatus(bool bool_) public onlyOwner {
        dutchAuctionStarted = bool_;
    }

    
    function setDutchAuction(uint dutchPriceAdditional_, uint dutchStartTime_, uint dutchDuration_) public onlyOwner {
        dutchPriceAdditional = dutchPriceAdditional_; 
        dutchStartTime = dutchStartTime_; 
        dutchDuration = dutchDuration_; 
        dutchEndTime = dutchStartTime.add(dutchDuration); 
    }

    
    function getTimeElapsed() public view returns (uint) {
        return dutchStartTime > 0 ? dutchStartTime.add(dutchDuration) >= block.timestamp ? block.timestamp.sub(dutchStartTime) : dutchDuration : 0; 
    }
    function getTimeRemaining() public view returns (uint) {
        return dutchDuration.sub(getTimeElapsed());
    }

    function getAdditionalPrice() public view returns (uint) {
        return dutchDuration.sub(getTimeElapsed()).mul(dutchPriceAdditional).div(dutchDuration); 
    }
    function getCurrentDutchPrice() public view returns (uint) {
        return dutchEndingPrice.add(getAdditionalPrice());
    }

    
    function mintDutchAuctionMany(uint amount_) public payable onlySender dutchAuction {
        require(tokensReservedForDutchAuction >= tokensMintedForDutchAuction + amount_, "No more tokens for Dutch Auction!");
        require(maxTokens >= totalSupply() + amount_, "No more tokens remaining!");
        require(5 >= amount_, "You can only mint up to 5 per transaction!");
        require(msg.value >= getCurrentDutchPrice() * amount_, "Invalid value sent!");

        tokensMintedForDutchAuction += amount_; 

        for (uint i = 0; i < amount_; i++) {

            uint _mintId = totalSupply();
            uint _currentPrice = getCurrentDutchPrice();
            _mint(msg.sender, _mintId);
            
            emit MintDutchAuction(msg.sender, _currentPrice, _mintId);
        }
    }

    function mintDutchAuction() public payable onlySender dutchAuction {
        require(tokensReservedForDutchAuction > tokensMintedForDutchAuction, "No more tokens for Dutch Auction!");
        require(maxTokens > totalSupply(), "No more tokens remaining!");
        require(msg.value >= getCurrentDutchPrice(), "Invalid value sent!");

        tokensMintedForDutchAuction++; 

        uint _mintId = totalSupply();
        uint _currentPrice = getCurrentDutchPrice();
        _mint(msg.sender, _mintId);
        
        emit MintDutchAuction(msg.sender, _currentPrice, _mintId);
    }

    
    uint public rolloverSalePrice;
    uint public rolloverSaleStartTime; 
    bool public rolloverSaleStarted;
    uint public rolloverSaleTokensMinted;

    modifier rolloverSale {
        require(rolloverSaleStarted && block.timestamp >= rolloverSaleStartTime, "Rollover sale has not started yet!");
        _;
    }
    
    function setRolloverSalePrice(uint price_) public onlyOwner {
        rolloverSalePrice = price_;
    }
    function setRolloverSaleStatus(uint rolloverSaleStartTime_, bool bool_) public onlyOwner {
        require(rolloverSalePrice != 0, "You have not set a rollover sale price!");
        rolloverSaleStartTime = rolloverSaleStartTime_;
        rolloverSaleStarted = bool_;
    }
    function mintRolloverSaleMany(uint amount_) public payable onlySender rolloverSale {
        require(maxTokens >= totalSupply() + amount_, "No remaining tokens left!");
        require(5 >= amount_, "You can only mint up to 5 per transaction!");
        require(msg.value == rolloverSalePrice * amount_, "Invalid value sent!");

        rolloverSaleTokensMinted += amount_; 

        for (uint i = 0; i < amount_; i++) {
            uint _mintId = totalSupply();
            _mint(msg.sender, _mintId);

            emit MintRolloverSale(msg.sender, _mintId);
        }
    }
    function mintRolloverSale() public payable onlySender rolloverSale {
        require(maxTokens > totalSupply(), "No remaining tokens left!");
        require(msg.value == rolloverSalePrice, "Invalid value sent!");

        rolloverSaleTokensMinted++; 

        uint _mintId = totalSupply();
        _mint(msg.sender, _mintId);

        emit MintRolloverSale(msg.sender, _mintId);
    }

    
    function setBaseTokenURI(string memory uri_) external onlyOwner {
        baseTokenURI = uri_;
    }
    function setBaseTokenURI_EXT(string memory ext_) external onlyOwner {
        baseTokenURI_EXT = ext_;
    }

    function tokenURI(uint tokenId_) public view override returns (string memory) {
        require(_exists(tokenId_), "Query for non-existent token!");
        return string(abi.encodePacked(baseTokenURI, Strings.toString(tokenId_), baseTokenURI_EXT));
    }
    function walletOfOwner(address address_) public view returns (uint[] memory) {
        uint _balance = balanceOf(address_); 
        uint[] memory _tokenIds = new uint[](_balance); 
        for (uint i = 0; i < _balance; i++) {
            _tokenIds[i] = tokenOfOwnerByIndex(address_, i);
        }
        return _tokenIds;
    }
}