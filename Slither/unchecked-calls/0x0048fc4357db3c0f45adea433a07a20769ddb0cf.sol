

















pragma solidity ^0.6.12;

interface DaiLike {
    function balanceOf(address) external returns (uint256);
    function approve(address usr, uint wad) external returns (bool);
    function transferFrom(address src, address dst, uint wad) external returns (bool);
}
    
interface DaiJoinLike {
    function dai() external view returns (address);
    function join(address, uint256) external;
}

contract DssBlow {
    DaiJoinLike public immutable daiJoin;
    DaiLike     public immutable dai;
    address     public immutable vow;

    
    event Blow(uint256 amount);

    
    constructor(address daiJoin_, address vow_) public { 
        daiJoin = DaiJoinLike(daiJoin_);
        dai = DaiLike(DaiJoinLike(daiJoin_).dai());
        vow = vow_;
        DaiLike(DaiJoinLike(daiJoin_).dai()).approve(daiJoin_, uint256(-1));
    }

    
    function blow() public {
        uint256 balance = dai.balanceOf(address(this));
        daiJoin.join(vow, balance);
        emit Blow(balance);
    }

    
    function blow(uint256 wad) public {
        dai.transferFrom(msg.sender, address(this), wad);
        daiJoin.join(vow, wad);
        emit Blow(wad);
    }
}