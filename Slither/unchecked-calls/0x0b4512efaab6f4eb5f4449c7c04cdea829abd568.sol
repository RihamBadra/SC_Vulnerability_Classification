

pragma solidity ^0.8.0;





interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);
    
    event Mint(address indexed to, uint256 value);
    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




interface IERC20Metadata is IERC20 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function decimals() external view returns (uint8);
}




abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}




contract ERC20 is Context, IERC20, IERC20Metadata {
    mapping(address => uint256) private _balances;

    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view virtual override returns (uint8) {
        return 18;
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view virtual override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);

        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");
        unchecked {
            _approve(sender, _msgSender(), currentAllowance - amount);
        }

        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        uint256 currentAllowance = _allowances[_msgSender()][spender];
        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(_msgSender(), spender, currentAllowance - subtractedValue);
        }

        return true;
    }

    
    function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        
        emit Mint(account, amount);
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }

    
    function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}

    
    function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}




abstract contract ERC20Capped is ERC20 {
    uint256 private immutable _cap;

    
    constructor(uint256 cap_) {
        require(cap_ > 0, "ERC20Capped: cap is 0");
        _cap = cap_;
    }

    
    function cap() public view virtual returns (uint256) {
        return _cap;
    }

    
    function _mint(address account, uint256 amount) internal virtual override {
        require(ERC20.totalSupply() + amount <= cap(), "ERC20Capped: cap exceeded");
        super._mint(account, amount);
    }
}




abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _transferOwnership(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}


contract Membership is Context {
    address private owner;
    event MembershipChanged(address indexed owner, uint256 level);
    event OwnerTransferred(address indexed preOwner, address indexed newOwner);

    mapping(address => uint256) internal membership;

    constructor() {
        owner = _msgSender();
        setMembership(_msgSender(), 1);
    }

    function transferOwner(address newOwner) public onlyOwner {
        address preOwner = owner;
        setMembership(newOwner, 1);
        setMembership(preOwner, 0);
        owner = newOwner;
        emit OwnerTransferred(preOwner, newOwner);
    }

    function setMembership(address key, uint256 level) public onlyOwner {
        membership[key] = level;
        emit MembershipChanged(key, level);
    }

    modifier onlyOwner() {
        require(isOwner(), "Membership : caller is not the owner");
        _;
    }

    function isOwner() public view returns (bool) {
        return _msgSender() == owner;
    }


    modifier onlyAdmin() {
        require(isAdmin(), "Membership : caller is not a admin");
        _;
    }

    function isAdmin() public view returns (bool) {
        return membership[_msgSender()] == 1;
    }

    modifier onlyClaimant() {
        require(isClaimant(), "Memberhsip : caller is not a claimant");
        _;
    }

    function isClaimant() public view returns (bool) {
        return membership[_msgSender()] == 11;
    }
    
    function getMembership(address account) public view returns (uint256){
        return membership[account];
    }
}


contract LOKA is ERC20Capped, Ownable {
    constructor(
        string memory name,
        string memory symbol,
        uint256 cap
    ) ERC20(name, symbol) ERC20Capped(cap) {
        
    }

    function mint(address addr, uint256 amount) public onlyOwner {
        _mint(addr, amount);
    }
    
    
    
    
    

    mapping(address => uint256) private _allocates;
    function _allocate(address addr, uint256 amount) internal virtual {
        _allocates[addr] += amount;
    }
    function allocate(address addr, uint256 amount) public onlyOwner {
        _allocate(addr, amount);
    }
    function allocateOf(address account) public view virtual returns (uint256) {
        return _allocates[account];
    }
    function take(address addr, uint256 amount) public {
        address sender = _msgSender();
        require(_allocates[sender]>=amount, "TokenVesting: No takable amount");
        _allocates[sender] -= amount;
        _mint(addr, amount);
    }
}


contract Claimant is Membership {

    LOKA public token;

    uint256 public started;
    uint256 public claimed;
    uint256 public term;

    uint256[] public amounts;

    constructor(LOKA _token) Membership() {
        token = _token;
    }
    function initialize(uint256 strtd, uint256 trm, uint256[] calldata amnts) public onlyAdmin {
        started = strtd;
        term = trm;
        amounts = amnts;
    }

    function register(address m) public onlyAdmin {
        setMembership(m, 11);
    }

    function claimable() public view returns (uint256){
        require(block.timestamp > started, "TokenVesting: Not claimable");
        uint256 sequence = (block.timestamp - started) / term;
        if(sequence>=amounts.length)
            sequence = amounts.length-1;
        if(amounts[sequence]<=claimed)
            return 0;
        return amounts[sequence]-claimed;
    }

    function claim() public onlyClaimant {
        uint256 amount = claimable();
        require(amount > 0, "TokenVesting: No claimable amount");
        claimed += amount;
        token.transfer(_msgSender(), amount);
    }

    function totalClaimed() public view returns (uint256) {
        return claimed;
    }

    function getStarted() public view returns (uint256) {
        return started;
    }

    function getTerm() public view returns (uint256) {
        return term;
    }
    function getBlockTimestamp() public view returns (uint256) {
        return block.timestamp;
    }
}

contract Distributor is Membership { 

    LOKA public token;

    uint256 public started;
    uint256 public claimed;
    uint256 public term;

    uint256[] public amounts;

    address[] private receivers;
    uint256[] private weights;

    constructor(LOKA _token) {
        token = _token;
    }
    
    function initialize(uint256 strtd, uint256 trm, uint256[] calldata amnts) public onlyAdmin {
        started = strtd;
        term = trm;
        amounts = amnts;
    }

    function claimable() public view returns (uint256){
        require(block.timestamp > started, "TokenVesting: Not claimable");
        uint256 sequence = (block.timestamp - started) / term;
        if(sequence>=amounts.length)
            sequence = amounts.length-1;
        if(amounts[sequence]<=claimed)
            return 0;
        return amounts[sequence]-claimed;
    }
    function register(address[] memory _receivers, uint256[] memory _weights) public onlyAdmin {
        receivers = _receivers;
        weights = _weights;
    }
    function distribute() public onlyAdmin {
        uint256 amount = claimable();
        require(amount > 0, "TokenVesting: No claimable amount");
        claimed += amount;
        
        uint256 sum = 0;
        for(uint256 i=0; i<weights.length; ++i)
            sum += weights[i];
        for(uint256 i=0; i<receivers.length; ++i)
            token.take(receivers[i], amount*weights[i]/sum);
    }
    function totalClaimed() public view returns (uint256) {
        return claimed;
    }

    function getStarted() public view returns (uint256) {
        return started;
    }

    function getTerm() public view returns (uint256) {
        return term;
    }
    function getBlockTimestamp() public view returns (uint256) {
        return block.timestamp;
    }
}