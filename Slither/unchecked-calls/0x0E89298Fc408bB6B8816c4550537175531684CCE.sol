


pragma solidity 0.7.6;


interface IERC20 {
  
  function totalSupply() external view returns (uint256);

  
  function balanceOf(address account) external view returns (uint256);

  
  function transfer(address recipient, uint256 amount) external returns (bool);

  
  function allowance(address owner, address spender) external view returns (uint256);

  
  function approve(address spender, uint256 amount) external returns (bool);

  
  function transferFrom(
    address sender,
    address recipient,
    uint256 amount
  ) external returns (bool);

  
  event Transfer(address indexed from, address indexed to, uint256 value);

  
  event Approval(address indexed owner, address indexed spender, uint256 value);
}


abstract contract VersionedInitializable {
  
  uint256 internal lastInitializedRevision = 0;

  
  modifier initializer() {
    uint256 revision = getRevision();
    require(revision > lastInitializedRevision, 'Contract instance has already been initialized');

    lastInitializedRevision = revision;

    _;
  }

  
  
  function getRevision() internal pure virtual returns (uint256);

  
  uint256[50] private ______gap;
}


contract ParaSwapEcosystemReserve is VersionedInitializable {
  event NewFundsAdmin(address indexed fundsAdmin);

  address internal _fundsAdmin;

  uint256 public constant REVISION = 2;

  function getRevision() internal pure override returns (uint256) {
    return REVISION;
  }

  function getFundsAdmin() external view returns (address) {
    return _fundsAdmin;
  }

  modifier onlyFundsAdmin() {
    require(msg.sender == _fundsAdmin, 'ONLY_BY_FUNDS_ADMIN');
    _;
  }

  function initialize(address reserveController) external initializer {
    _setFundsAdmin(reserveController);
  }

  function approve(
    IERC20 token,
    address recipient,
    uint256 amount
  ) external onlyFundsAdmin {
    token.approve(recipient, amount);
  }

  function transfer(
    IERC20 token,
    address recipient,
    uint256 amount
  ) external onlyFundsAdmin {
    token.transfer(recipient, amount);
  }

  function setFundsAdmin(address admin) public onlyFundsAdmin {
    _setFundsAdmin(admin);
  }

  function _setFundsAdmin(address admin) internal {
    _fundsAdmin = admin;
    emit NewFundsAdmin(admin);
  }
}