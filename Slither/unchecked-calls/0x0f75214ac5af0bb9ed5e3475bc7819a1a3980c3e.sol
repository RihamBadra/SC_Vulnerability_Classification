





pragma solidity ^0.8.0;


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}





pragma solidity ^0.8.0;



interface IERC721 is IERC165 {
    
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

    
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

    
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) external view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) external view returns (address owner);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) external;

    
    function approve(address to, uint256 tokenId) external;

    
    function getApproved(uint256 tokenId) external view returns (address operator);

    
    function setApprovalForAll(address operator, bool _approved) external;

    
    function isApprovedForAll(address owner, address operator) external view returns (bool);

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes calldata data
    ) external;
}





pragma solidity ^0.8.0;


interface IERC721Receiver {
    
    function onERC721Received(
        address operator,
        address from,
        uint256 tokenId,
        bytes calldata data
    ) external returns (bytes4);
}





pragma solidity ^0.8.0;



interface IERC721Metadata is IERC721 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function tokenURI(uint256 tokenId) external view returns (string memory);
}





pragma solidity ^0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        assembly {
            size := extcodesize(account)
        }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        (bool success, ) = recipient.call{value: amount}("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value
    ) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(
        address target,
        bytes memory data,
        uint256 value,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        (bool success, bytes memory returndata) = target.call{value: value}(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(
        address target,
        bytes memory data,
        string memory errorMessage
    ) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(
        bool success,
        bytes memory returndata,
        string memory errorMessage
    ) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}





pragma solidity ^0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}





pragma solidity ^0.8.0;


library Strings {
    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";

    
    function toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

    
    function toHexString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0x00";
        }
        uint256 temp = value;
        uint256 length = 0;
        while (temp != 0) {
            length++;
            temp >>= 8;
        }
        return toHexString(value, length);
    }

    
    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {
        bytes memory buffer = new bytes(2 * length + 2);
        buffer[0] = "0";
        buffer[1] = "x";
        for (uint256 i = 2 * length + 1; i > 1; --i) {
            buffer[i] = _HEX_SYMBOLS[value & 0xf];
            value >>= 4;
        }
        require(value == 0, "Strings: hex length insufficient");
        return string(buffer);
    }
}





pragma solidity ^0.8.0;



abstract contract ERC165 is IERC165 {
    
    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {
        return interfaceId == type(IERC165).interfaceId;
    }
}





pragma solidity ^0.8.0;









contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {
    using Address for address;
    using Strings for uint256;

    
    string private _name;

    
    string private _symbol;

    
    mapping(uint256 => address) private _owners;

    
    mapping(address => uint256) private _balances;

    
    mapping(uint256 => address) private _tokenApprovals;

    
    mapping(address => mapping(address => bool)) private _operatorApprovals;

    
    constructor(string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
    }

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {
        return
            interfaceId == type(IERC721).interfaceId ||
            interfaceId == type(IERC721Metadata).interfaceId ||
            super.supportsInterface(interfaceId);
    }

    
    function balanceOf(address owner) public view virtual override returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");
        return _balances[owner];
    }

    
    function ownerOf(uint256 tokenId) public view virtual override returns (address) {
        address owner = _owners[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");
        return owner;
    }

    
    function name() public view virtual override returns (string memory) {
        return _name;
    }

    
    function symbol() public view virtual override returns (string memory) {
        return _symbol;
    }

    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";
    }

    
    function _baseURI() internal view virtual returns (string memory) {
        return "";
    }

    
    function approve(address to, uint256 tokenId) public virtual override {
        address owner = ERC721.ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(
            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _approve(to, tokenId);
    }

    
    function getApproved(uint256 tokenId) public view virtual override returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    
    function setApprovalForAll(address operator, bool approved) public virtual override {
        require(operator != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][operator] = approved;
        emit ApprovalForAll(_msgSender(), operator, approved);
    }

    
    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transfer(from, to, tokenId);
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        safeTransferFrom(from, to, tokenId, "");
    }

    
    function safeTransferFrom(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransfer(from, to, tokenId, _data);
    }

    
    function _safeTransfer(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _transfer(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _exists(uint256 tokenId) internal view virtual returns (bool) {
        return _owners[tokenId] != address(0);
    }

    
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ERC721.ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    
    function _safeMint(address to, uint256 tokenId) internal virtual {
        _safeMint(to, tokenId, "");
    }

    
    function _safeMint(
        address to,
        uint256 tokenId,
        bytes memory _data
    ) internal virtual {
        _mint(to, tokenId);
        require(
            _checkOnERC721Received(address(0), to, tokenId, _data),
            "ERC721: transfer to non ERC721Receiver implementer"
        );
    }

    
    function _mint(address to, uint256 tokenId) internal virtual {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _beforeTokenTransfer(address(0), to, tokenId);

        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(address(0), to, tokenId);
    }

    
    function _burn(uint256 tokenId) internal virtual {
        address owner = ERC721.ownerOf(tokenId);

        _beforeTokenTransfer(owner, address(0), tokenId);

        
        _approve(address(0), tokenId);

        _balances[owner] -= 1;
        delete _owners[tokenId];

        emit Transfer(owner, address(0), tokenId);
    }

    
    function _transfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {
        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _beforeTokenTransfer(from, to, tokenId);

        
        _approve(address(0), tokenId);

        _balances[from] -= 1;
        _balances[to] += 1;
        _owners[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    
    function _approve(address to, uint256 tokenId) internal virtual {
        _tokenApprovals[tokenId] = to;
        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);
    }

    
    function _checkOnERC721Received(
        address from,
        address to,
        uint256 tokenId,
        bytes memory _data
    ) private returns (bool) {
        if (to.isContract()) {
            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {
                return retval == IERC721Receiver(to).onERC721Received.selector;
            } catch (bytes memory reason) {
                if (reason.length == 0) {
                    revert("ERC721: transfer to non ERC721Receiver implementer");
                } else {
                    assembly {
                        revert(add(32, reason), mload(reason))
                    }
                }
            }
        } else {
            return true;
        }
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual {}
}





pragma solidity ^0.8.0;



interface IERC721Enumerable is IERC721 {
    
    function totalSupply() external view returns (uint256);

    
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);

    
    function tokenByIndex(uint256 index) external view returns (uint256);
}





pragma solidity ^0.8.0;




abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {
    
    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;

    
    mapping(uint256 => uint256) private _ownedTokensIndex;

    
    uint256[] private _allTokens;

    
    mapping(uint256 => uint256) private _allTokensIndex;

    
    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {
        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);
    }

    
    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
        return _ownedTokens[owner][index];
    }

    
    function totalSupply() public view virtual override returns (uint256) {
        return _allTokens.length;
    }

    
    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {
        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");
        return _allTokens[index];
    }

    
    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override {
        super._beforeTokenTransfer(from, to, tokenId);

        if (from == address(0)) {
            _addTokenToAllTokensEnumeration(tokenId);
        } else if (from != to) {
            _removeTokenFromOwnerEnumeration(from, tokenId);
        }
        if (to == address(0)) {
            _removeTokenFromAllTokensEnumeration(tokenId);
        } else if (to != from) {
            _addTokenToOwnerEnumeration(to, tokenId);
        }
    }

    
    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {
        uint256 length = ERC721.balanceOf(to);
        _ownedTokens[to][length] = tokenId;
        _ownedTokensIndex[tokenId] = length;
    }

    
    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {
        _allTokensIndex[tokenId] = _allTokens.length;
        _allTokens.push(tokenId);
    }

    
    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;
        uint256 tokenIndex = _ownedTokensIndex[tokenId];

        
        if (tokenIndex != lastTokenIndex) {
            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];

            _ownedTokens[from][tokenIndex] = lastTokenId; 
            _ownedTokensIndex[lastTokenId] = tokenIndex; 
        }

        
        delete _ownedTokensIndex[tokenId];
        delete _ownedTokens[from][lastTokenIndex];
    }

    
    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {
        
        

        uint256 lastTokenIndex = _allTokens.length - 1;
        uint256 tokenIndex = _allTokensIndex[tokenId];

        
        
        
        uint256 lastTokenId = _allTokens[lastTokenIndex];

        _allTokens[tokenIndex] = lastTokenId; 
        _allTokensIndex[lastTokenId] = tokenIndex; 

        
        delete _allTokensIndex[tokenId];
        _allTokens.pop();
    }
}





pragma solidity ^0.8.0;



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor() {
        _setOwner(_msgSender());
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        _setOwner(address(0));
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _setOwner(newOwner);
    }

    function _setOwner(address newOwner) private {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}





pragma solidity ^0.8.0;


library ECDSA {
    
    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {
        
        
        
        if (signature.length == 65) {
            bytes32 r;
            bytes32 s;
            uint8 v;
            
            
            assembly {
                r := mload(add(signature, 0x20))
                s := mload(add(signature, 0x40))
                v := byte(0, mload(add(signature, 0x60)))
            }
            return recover(hash, v, r, s);
        } else if (signature.length == 64) {
            bytes32 r;
            bytes32 vs;
            
            
            assembly {
                r := mload(add(signature, 0x20))
                vs := mload(add(signature, 0x40))
            }
            return recover(hash, r, vs);
        } else {
            revert("ECDSA: invalid signature length");
        }
    }

    
    function recover(
        bytes32 hash,
        bytes32 r,
        bytes32 vs
    ) internal pure returns (address) {
        bytes32 s;
        uint8 v;
        assembly {
            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            v := add(shr(255, vs), 27)
        }
        return recover(hash, v, r, s);
    }

    
    function recover(
        bytes32 hash,
        uint8 v,
        bytes32 r,
        bytes32 s
    ) internal pure returns (address) {
        
        
        
        
        
        
        
        
        
        require(
            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,
            "ECDSA: invalid signature 's' value"
        );
        require(v == 27 || v == 28, "ECDSA: invalid signature 'v' value");

        
        address signer = ecrecover(hash, v, r, s);
        require(signer != address(0), "ECDSA: invalid signature");

        return signer;
    }

    
    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {
        
        
        return keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
    }

    
    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {
        return keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));
    }
}





pragma solidity ^0.8.0;







abstract contract ERC721Cells is ERC721Enumerable, Ownable {
    using ECDSA for bytes32;

    address signerAddress = 0x8E7c6DBdae809c79C9f8Aa0F9ACf05614b4EB548; 
    uint256 private _currentTokenId = 386;
    uint256 private _reservedTokenId = 0;
    uint256 private MAX_RESERVED_ID = 386;
    uint256 public mintedSupply = 0;
    bool public lockingEnabled = false;
    string public baseURI = "https:
    
    
    mapping (uint256 => string) private _tokenURIs;
    mapping (uint256 => string) public tokenIdToCellCode;
    mapping (string => uint256) public cellCodeToTokenId;
    mapping (address => mapping(uint => bool)) private lockNonces;

    event CellAllocation(address indexed to, uint256 indexed fromTokenId, uint256 indexed toTokenId, uint256 data, bool isRandom);
    event LockedCell(uint indexed tokenId, address owner, string cellCode, string tokenURI);
    event PermanentURI(string _value, uint256 indexed _id);

    constructor(
        string memory _name,
        string memory _symbol
    ) ERC721(_name, _symbol) {
        
    }

    
    function mintTo(address _to, uint256 _numItemsAllocated, bool isRandom, uint256 data) public virtual onlyOwner {
        uint256 newTokenId = _getNextTokenId();
        for (uint256 i = 0; i < _numItemsAllocated; i++) {
            _mint(_to, newTokenId + i);
        }
        _incrementTokenId(_numItemsAllocated);
        emit CellAllocation(_to, newTokenId, newTokenId + _numItemsAllocated - 1, data, isRandom);
    }

    function mintCell(address _to, uint256 _numItemsAllocated, bool isRandom, uint256 data) internal virtual {
        uint256 newTokenId = _getNextTokenId();
        for (uint256 i = 0; i < _numItemsAllocated; i++) {
            _mint(_to, newTokenId + i);
        }
        _incrementTokenId(_numItemsAllocated);
        _incrementMintedSupply(_numItemsAllocated);
        emit CellAllocation(_to, newTokenId, newTokenId + _numItemsAllocated - 1, data, isRandom);
    }    

    function reserveTo(address _to, uint256 _numItemsAllocated, bool isRandom, uint256 data) public virtual onlyOwner {
        uint256 newTokenId = _getNextReservedTokenId();
        uint256 newCount = newTokenId + _numItemsAllocated;
        require(newCount <= MAX_RESERVED_ID, "tokenId too high");
        for (uint256 i = 0; i < _numItemsAllocated; i++) {
            _mint(_to, newTokenId + i);
        }
        _incrementReservedTokenId(_numItemsAllocated);
        emit CellAllocation(_to, newTokenId, newTokenId + _numItemsAllocated - 1, data, isRandom);
    }

    
    function _getNextTokenId() private view returns (uint256) {
        return _currentTokenId + 1;
    }

    function _getNextReservedTokenId() private view returns (uint256) {
        return _reservedTokenId + 1;
    }    

    function setSignerAddress(address _address) public virtual onlyOwner {
        signerAddress = _address;
    }

    function toggleLocking() public virtual onlyOwner {
        lockingEnabled = !lockingEnabled;
    }

    
    function _incrementTokenId(uint256 num) private {
        _currentTokenId += num;
    }

    function _incrementReservedTokenId(uint256 num) private {
        _reservedTokenId += num;
    }

    function _incrementMintedSupply(uint256 num) private {
        mintedSupply += num;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return baseURI;
    }

    function setBaseURI(string memory newURI) public onlyOwner {
        baseURI = newURI;
    }    

    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "invalid token");

        string memory _tokenURI = _tokenURIs[tokenId];
        string memory base = _baseURI();

        
        if (bytes(_tokenURI).length > 0) {
            return string(abi.encodePacked('ipfs:
        }
        
        return string(abi.encodePacked(base, Strings.toString(tokenId)));
    }

     
    function lockCell(
        bytes memory signature,
        uint256 tokenId, 
        uint256 nonce,
        string memory cellCode,
        string memory _tokenURI
    ) external {
        require(lockingEnabled, "locking disabled");
        require(ownerOf(tokenId) == msg.sender, "not your cell");
        require(bytes(_tokenURIs[tokenId]).length == 0 || !lockNonces[msg.sender][nonce], "already locked");

        bytes32 _hash = keccak256(abi.encode(msg.sender, tokenId, nonce, cellCode, _tokenURI));
        bytes32 messageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", _hash));
        address signer = messageHash.recover(signature);
        require(signer == signerAddress, "Signers don't match");

        lockNonces[msg.sender][nonce] = true;
        _setTokenURI(tokenId, _tokenURI);
        _setCellCode(tokenId, cellCode);
        
        emit LockedCell(tokenId, msg.sender, cellCode, _tokenURI);
        emit PermanentURI(_tokenURI, tokenId);
    }

    
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {
        require(_exists(tokenId), "invalid token");
        _tokenURIs[tokenId] = _tokenURI;
    }

    function _setCellCode(uint256 tokenId, string memory _cellCode) internal virtual {
        require(_exists(tokenId), "invalid token");
        require(cellCodeToTokenId[_cellCode] == 0, "already set");
        require(bytes(tokenIdToCellCode[tokenId]).length == 0, "already set");
        cellCodeToTokenId[_cellCode] = tokenId;
        tokenIdToCellCode[tokenId] = _cellCode;
    }

}





pragma solidity ^0.8.0;



interface IERC20 {
   function mint(address to, uint256 amount) external;
   function transfer(address recipient, uint256 amount) external returns (bool);
   function balanceOf(address account) external view returns (uint256);
}


contract Cells is ERC721Cells {
    using ECDSA for bytes32;

    bool public directMint = false;
    bool public randomMint = true;
    bool public packMint = false;
    bool public signatureMint = true;
    bool public bonusCoins = true;
    uint256 public constant MAX_CELLS_PURCHASE = 25;
    uint256 public constant MAX_CELLS = 29886;
    uint256 public minMintable = 1;
    uint256 public maxMintable = 29000;
    uint256 public cellPrice = 0.025 ether;
    uint256 public bonusCoinsAmount = 200;
    IERC20 public celdaContract;

    mapping (uint256 => uint256) public packPrices;
    mapping (address => mapping(uint => bool)) private mintNonces;

    constructor(address _erc20Address)
        ERC721Cells("The Cells Zone", "CELLS") 
    {
        celdaContract = IERC20(_erc20Address);
        packPrices[0] = 0.02 ether;
        packPrices[1] = 0.015 ether;
        packPrices[2] = 0.01 ether;
    }

    function contractURI() public pure returns (string memory) {
        return "https:
    }

    function toggleDirectMint() public onlyOwner {
        directMint = !directMint;
    }    

    function toggleRandomMint() public onlyOwner {
        randomMint = !randomMint;
    }

    function togglePackMint() public onlyOwner {
        packMint = !packMint;
    }

    function toggleSignatureMint() public onlyOwner {
        signatureMint = !signatureMint;
    }

    function toggleBonusCoins() public onlyOwner {
        bonusCoins = !bonusCoins;
    }

    function setBonusCoinsAmount(uint amount) public onlyOwner {
        bonusCoinsAmount = amount;
    }    

    function setCellPrice(uint256 newPrice) public onlyOwner {
        cellPrice = newPrice;
    }

    function setPackPrice(uint packId, uint256 newPrice) public onlyOwner {
        packPrices[packId] = newPrice;
    }    

    function setMinMintable(uint quantity) public onlyOwner {
        minMintable = quantity;
    }    

    function setMaxMintable(uint quantity) public onlyOwner {
        maxMintable = quantity;
    }    

    function reserveCells(uint number, bool isRandom, uint256 data) public onlyOwner {
        reserveTo(msg.sender, number, isRandom, data);
    }
    
    
    function mintCells(uint amount) public payable {
        require(directMint, "Direct mint is not active");
        require(amount >= minMintable, "Quantity too low");        
        require(amount <= MAX_CELLS_PURCHASE || mintedSupply + amount <= maxMintable || totalSupply() + amount <= MAX_CELLS, "Quantity too high");
        require(cellPrice * amount <= msg.value, "Ether value sent is not correct");
        
        mintCell(msg.sender, amount, randomMint, 0);
        if (bonusCoins) {
            sendBonusCoins(msg.sender, amount);
        }
    }

    
    function mintCellPack(uint amount) public payable {
        require(packMint, "Pack mint is not active");
        require(amount >= minMintable, "Quantity too low");        
        require(amount <= MAX_CELLS_PURCHASE || mintedSupply + amount <= maxMintable || totalSupply() + amount <= MAX_CELLS, "Quantity too high");
        require(getPackPrice(amount) * amount <= msg.value, "Ether value sent is not correct");
        
        mintCell(msg.sender, amount, randomMint, 0);
        if (bonusCoins) {
            sendBonusCoins(msg.sender, amount);
        }
    }

    
    function verifyAndMint(bytes memory signature, uint amount, uint nonce, uint mintPrice, uint data) public payable {
        require(signatureMint, "Signature mint is not active");
        require(amount >= minMintable, "Quantity too low");        
        require(amount <= MAX_CELLS_PURCHASE || mintedSupply + amount <= maxMintable || totalSupply() + amount <= MAX_CELLS, "Quantity too high");
        require(!mintNonces[msg.sender][nonce], "Nonce already used");

        uint price;
        if (mintPrice == 1) {
            price = getPackPrice(amount);
        } else if (mintPrice == 2) {
            price = cellPrice;
        } else {
            price = mintPrice;
        }
        
        require(price * amount <= msg.value, "Ether value sent is not correct");
        
        bytes32 hash = keccak256(abi.encode(msg.sender, amount, nonce, mintPrice, data));
        bytes32 messageHash = keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash));
        address signer = messageHash.recover(signature);
        require(signer == signerAddress, "Signers don't match");

        mintNonces[msg.sender][nonce] = true;
        mintCell(msg.sender, amount, randomMint, data);
        if (bonusCoins) {
            sendBonusCoins(msg.sender, amount);
        }
    }

    function getPackPrice(uint256 _amount) internal view returns (uint256) {
        uint256 price;
        
        if (_amount < 3) {
            price = cellPrice;
        } else if (_amount < 10) {
            price = packPrices[0];
        } else if (_amount < 25) {
            price = packPrices[1];
        } else {
            price = packPrices[2];
        }

        return price;
    }

    function sendBonusCoins(address _to, uint256 _amount) internal {
        celdaContract.mint(_to, _amount * bonusCoinsAmount * 10**18);
    }

    function walletOfOwner(address _owner) public view returns(uint256[] memory) {
        uint256 tokenCount = balanceOf(_owner);

        uint256[] memory tokensId = new uint256[](tokenCount);
        for(uint256 i; i < tokenCount; i++){
            tokensId[i] = tokenOfOwnerByIndex(_owner, i);
        }
        return tokensId;
    }

    function withdraw() public onlyOwner {
        uint balance = address(this).balance;
        address payable sender = payable(msg.sender);
        sender.transfer(balance);
    }    

	function reclaimToken(IERC20 token) public onlyOwner {
		require(address(token) != address(0));
		uint256 balance = token.balanceOf(address(this));
		token.transfer(msg.sender, balance);
	}
}