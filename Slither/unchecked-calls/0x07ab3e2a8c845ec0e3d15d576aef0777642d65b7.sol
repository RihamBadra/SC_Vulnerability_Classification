




interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}




library TransferHelper {
    function safeApprove(address token, address to, uint value) internal {
        
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');
    }

    function safeTransfer(address token, address to, uint value) internal {
        
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');
    }

    function safeTransferFrom(address token, address from, address to, uint value) internal {
        
        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));
        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');
    }

}



abstract contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () public {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}



interface IFreeFromUpTo {
    function freeUpTo(uint256 value) external returns(uint256 freed);
    function freeFromUpTo(address from, uint256 value) external returns (uint256);
}





pragma solidity 0.6;







contract MultiSender is ReentrancyGuard {
    using SafeMath for uint256;

    address payable private _owner;
    mapping(string => uint256) public params;

    address private CHI_ADDRESS         = 0x0000000000004946c0e9F43F4Dee607b0eF1fA1c;
    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

    receive() external payable {}


    constructor() public {
        params["fee"]           = 0.02 ether;
        params["arrayLimit"]    = 200;

        _owner = msg.sender;
    }

    
    function multisendToken(address token, address payable[] memory _receivers, uint256[] memory _balances, uint8 useChi) public payable nonReentrant saveGas(useChi) {
        if (token == ETH_ADDRESS){
            _multisendEther(_receivers, _balances);
        } else {
            uint256 total = 0;

            require(msg.value >= currentFee(), "fee is too low.");
            require(_receivers.length <= arrayLimit(), "length is too long.");

            uint8 i = 0;
            for (i; i < _receivers.length; i++) {
                TransferHelper.safeTransferFrom(token, msg.sender, _receivers[i], _balances[i]);
                total += _balances[i];
            }
            
            emit Multisended(msg.sender, total, token);
        }
    }

    function _multisendEther(address payable[] memory _receivers, uint256[] memory _balances) internal {
        uint256 total = msg.value;
        uint256 fee = currentFee();

        require(total >= fee, "fee is too less.");
        require(_receivers.length <= arrayLimit(), "length is too long.");

        total = total.sub(fee);
        uint256 i = 0;

        for (i; i < _receivers.length; i++) {
            require(total >= _balances[i]);

            total = total.sub(_balances[i]);
            _receivers[i].transfer(_balances[i]);
        }
        
        emit Multisended(msg.sender, msg.value, ETH_ADDRESS);
    }



    

    function setChiAddress(address mChiAddress) external onlyOwner {
        CHI_ADDRESS = mChiAddress;
    }
    
    function setFee(uint256 _newFee) public onlyOwner {
        params["fee"] = _newFee;
    }
    function currentFee() public view returns(uint256) {
        return params["fee"];
    }

    
    function setArrayLimit(uint256 _newLimit) public onlyOwner {
        require(_newLimit > 0);

        params["arrayLimit"] = _newLimit;
    }
    function arrayLimit() public view returns(uint256) {
        return params["arrayLimit"];
    }


    function withdrawEth() external onlyOwner {
        address payable to = _owner;
        to.transfer(address(this).balance);
    }

    function withdrawToken(address tokenAddress, uint256 amount) external onlyOwner {
        if(amount == 0) {
            amount = myBalanceOf(tokenAddress);
        }

        TransferHelper.safeTransfer(tokenAddress, msg.sender, amount);
    }

    function myBalanceOf(address tokenAddress) public view returns(uint256) {
        return IERC20(tokenAddress).balanceOf(address(this));
    }
    
    modifier onlyOwner() {
        require(_owner == msg.sender, "Alert: caller is not the owner");
        _;
    }

    modifier saveGas(uint256 useChi) {
        if(useChi == 0) {
            _;
        } else {
            uint256 gasStart = gasleft();
            _;
            
            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;

            IFreeFromUpTo chi = IFreeFromUpTo(CHI_ADDRESS);
            chi.freeFromUpTo(payable(msg.sender), (gasSpent + 14154) / 41947);
        }
    }
    


    event Multisended(address indexed sender, uint256 total, address tokenAddress);
}