pragma solidity 0.6.5;

interface LandToken {

    function mintQuad(

        address to,

        uint256 size,

        uint256 x,

        uint256 y,

        bytes calldata data

    ) external;

}

contract Admin {

    address internal _admin;



    

    

    

    event AdminChanged(address oldAdmin, address newAdmin);



    

    

    function getAdmin() external view returns (address) {

        return _admin;

    }



    

    

    function changeAdmin(address newAdmin) external {

        require(msg.sender == _admin, "only admin can change admin");

        emit AdminChanged(_admin, newAdmin);

        _admin = newAdmin;

    }



    modifier onlyAdmin() {

        require(msg.sender == _admin, "only admin allowed");

        _;

    }

}

contract MetaTransactionReceiver is Admin {

    mapping(address => bool) internal _metaTransactionContracts;



    

    

    

    event MetaTransactionProcessor(address metaTransactionProcessor, bool enabled);



    

    

    

    function setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) public {

        require(msg.sender == _admin, "only admin can setup metaTransactionProcessors");

        _setMetaTransactionProcessor(metaTransactionProcessor, enabled);

    }



    function _setMetaTransactionProcessor(address metaTransactionProcessor, bool enabled) internal {

        _metaTransactionContracts[metaTransactionProcessor] = enabled;

        emit MetaTransactionProcessor(metaTransactionProcessor, enabled);

    }



    

    

    

    function isMetaTransactionProcessor(address who) external view returns (bool) {

        return _metaTransactionContracts[who];

    }

}

interface ERC1155 {

    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);



    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);



    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);



    event URI(string value, uint256 indexed id);



    

    function safeTransferFrom(

        address from,

        address to,

        uint256 id,

        uint256 value,

        bytes calldata data

    ) external;



    

    function safeBatchTransferFrom(

        address from,

        address to,

        uint256[] calldata ids,

        uint256[] calldata values,

        bytes calldata data

    ) external;



    

    function balanceOf(address owner, uint256 id) external view returns (uint256);



    

    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory);



    

    function setApprovalForAll(address operator, bool approved) external;



    

    function isApprovedForAll(address owner, address operator) external view returns (bool);

}

interface ERC20 {

    

    

    

    

    event Transfer(address indexed from, address indexed to, uint256 value);



    

    

    

    

    event Approval(address indexed owner, address indexed spender, uint256 value);



    

    

    function totalSupply() external view returns (uint256 supply);



    

    

    

    function balanceOf(address who) external view returns (uint256 balance);



    

    

    

    

    function transfer(address to, uint256 value) external returns (bool success);



    

    

    

    

    

    function transferFrom(

        address from,

        address to,

        uint256 value

    ) external returns (bool success);



    

    

    

    

    function approve(address spender, uint256 value) external returns (bool success);



    

    

    

    

    function allowance(address owner, address spender) external view returns (uint256 amount);

}

library SafeMathWithRequire {

    

    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {

        

        

        

        if (a == 0) {

            return 0;

        }



        c = a * b;

        require(c / a == b, "overflow");

        return c;

    }



    

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b != 0, "divbyzero");

        

        

        return a / b;

    }



    

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        require(b <= a, "undeflow");

        return a - b;

    }



    

    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {

        c = a + b;

        require(c >= a, "overflow");

        return c;

    }

}

library SigUtil {

    function recover(bytes32 hash, bytes memory sig) internal pure returns (address recovered) {

        require(sig.length == 65);



        bytes32 r;

        bytes32 s;

        uint8 v;

        assembly {

            r := mload(add(sig, 32))

            s := mload(add(sig, 64))

            v := byte(0, mload(add(sig, 96)))

        }



        

        if (v < 27) {

            v += 27;

        }

        require(v == 27 || v == 28);



        recovered = ecrecover(hash, v, r, s);

        require(recovered != address(0));

    }



    function recoverWithZeroOnFailure(bytes32 hash, bytes memory sig) internal pure returns (address) {

        if (sig.length != 65) {

            return (address(0));

        }



        bytes32 r;

        bytes32 s;

        uint8 v;

        assembly {

            r := mload(add(sig, 32))

            s := mload(add(sig, 64))

            v := byte(0, mload(add(sig, 96)))

        }



        

        if (v < 27) {

            v += 27;

        }



        if (v != 27 && v != 28) {

            return (address(0));

        } else {

            return ecrecover(hash, v, r, s);

        }

    }



    

    function prefixed(bytes32 hash) internal pure returns (bytes memory) {

        return abi.encodePacked("\x19Ethereum Signed Message:\n32", hash);

    }

}

contract ReferralValidator is Admin {

    address private _signingWallet;

    uint256 private _maxCommissionRate;



    mapping(address => uint256) private _previousSigningWallets;

    uint256 private _previousSigningDelay = 60 * 60 * 24 * 10;



    event ReferralUsed(

        address indexed referrer,

        address indexed referee,

        address indexed token,

        uint256 amount,

        uint256 commission,

        uint256 commissionRate

    );



    constructor(address initialSigningWallet, uint256 initialMaxCommissionRate) public {

        _signingWallet = initialSigningWallet;

        _maxCommissionRate = initialMaxCommissionRate;

    }



    

    function updateSigningWallet(address newSigningWallet) external {

        require(_admin == msg.sender, "Sender not admin");

        _previousSigningWallets[_signingWallet] = now + _previousSigningDelay;

        _signingWallet = newSigningWallet;

    }



    

    function getSigningWallet() external view returns (address) {

        return _signingWallet;

    }



    

    function getMaxCommisionRate() external view returns (uint256) {

        return _maxCommissionRate;

    }



    

    function updateMaxCommissionRate(uint256 newMaxCommissionRate) external {

        require(_admin == msg.sender, "Sender not admin");

        _maxCommissionRate = newMaxCommissionRate;

    }



    function handleReferralWithETH(

        uint256 amount,

        bytes memory referral,

        address payable destination

    ) internal {

        uint256 amountForDestination = amount;



        if (referral.length > 0) {

            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);



            uint256 commission = 0;



            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {

                commission = SafeMathWithRequire.div(SafeMathWithRequire.mul(amount, commissionRate), 10000);



                emit ReferralUsed(referrer, referee, address(0), amount, commission, commissionRate);

                amountForDestination = SafeMathWithRequire.sub(amountForDestination, commission);

            }



            if (commission > 0) {

                address(uint160(referrer)).transfer(commission);

            }

        }



        destination.transfer(amountForDestination);

    }



    function handleReferralWithERC20(

        address buyer,

        uint256 amount,

        bytes memory referral,

        address payable destination,

        address tokenAddress

    ) internal {

        ERC20 token = ERC20(tokenAddress);

        uint256 amountForDestination = amount;



        if (referral.length > 0) {

            (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = decodeReferral(referral);



            uint256 commission = 0;



            if (isReferralValid(signature, referrer, referee, expiryTime, commissionRate)) {

                commission = SafeMathWithRequire.div(SafeMathWithRequire.mul(amount, commissionRate), 10000);



                emit ReferralUsed(referrer, referee, tokenAddress, amount, commission, commissionRate);

                amountForDestination = SafeMathWithRequire.sub(amountForDestination, commission);

            }



            if (commission > 0) {

                require(token.transferFrom(buyer, referrer, commission), "commision transfer failed");

            }

        }



        require(token.transferFrom(buyer, destination, amountForDestination), "payment transfer failed");

    }



    

    function isReferralValid(

        bytes memory signature,

        address referrer,

        address referee,

        uint256 expiryTime,

        uint256 commissionRate

    ) public view returns (bool) {

        if (commissionRate > _maxCommissionRate || referrer == referee || now > expiryTime) {

            return false;

        }



        bytes32 hashedData = keccak256(abi.encodePacked(referrer, referee, expiryTime, commissionRate));



        address signer = SigUtil.recover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hashedData)), signature);



        if (_previousSigningWallets[signer] >= now) {

            return true;

        }



        return _signingWallet == signer;

    }



    function decodeReferral(bytes memory referral)

        public

        pure

        returns (

            bytes memory,

            address,

            address,

            uint256,

            uint256

        )

    {

        (bytes memory signature, address referrer, address referee, uint256 expiryTime, uint256 commissionRate) = abi.decode(

            referral,

            (bytes, address, address, uint256, uint256)

        );



        return (signature, referrer, referee, expiryTime, commissionRate);

    }

}

contract EstateSaleWithFee is MetaTransactionReceiver, ReferralValidator {

    using SafeMathWithRequire for uint256;



    event LandQuadPurchased(

        address indexed buyer,

        address indexed to,

        uint256 indexed topCornerId,

        uint256 size,

        uint256 price,

        address token,

        uint256 amountPaid

    );



    

    

    function setReceivingWallet(address payable newWallet) external {

        require(newWallet != address(0), "ZERO_ADDRESS");

        require(msg.sender == _admin, "NOT_AUTHORIZED");

        _wallet = newWallet;

    }



    function rebalanceSand(uint256 newMultiplier) external {

        require(msg.sender == _admin, "NOT_AUTHORIZED");

        _multiplier = newMultiplier;

    }



    function getSandMultiplier() external view returns (uint256) {

        return _multiplier;

    }



    

    

    

    

    

    

    

    

    

    function buyLandWithSand(

        address buyer,

        address to,

        address reserved,

        uint256 x,

        uint256 y,

        uint256 size,

        uint256 priceInSand,

        uint256 adjustedPriceInSand,

        bytes32 salt,

        uint256[] calldata assetIds,

        bytes32[] calldata proof,

        bytes calldata referral

    ) external {

        _checkPrices(priceInSand, adjustedPriceInSand);

        _checkValidity(buyer, reserved, x, y, size, priceInSand, salt, assetIds, proof);

        _handleFeeAndReferral(buyer, adjustedPriceInSand, referral);

        _mint(buyer, to, x, y, size, adjustedPriceInSand, address(_sand), adjustedPriceInSand);

        _sendAssets(to, assetIds);

    }



    

    

    function getExpiryTime() external view returns (uint256) {

        return _expiryTime;

    }



    

    

    function getMerkleRoot() external view returns (bytes32) {

        return _merkleRoot;

    }



    

    

    

    

    function withdrawAssets(

        address to,

        uint256[] calldata assetIds,

        uint256[] calldata values

    ) external {

        require(msg.sender == _admin, "NOT_AUTHORIZED");

        require(block.timestamp > _expiryTime, "SALE_NOT_OVER");

        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, "");

    }



    function onERC1155Received(

        address, 

        address, 

        uint256, 

        uint256, 

        bytes calldata 

    ) external pure returns (bytes4) {

        return 0xf23a6e61;

    }



    function onERC1155BatchReceived(

        address, 

        address, 

        uint256[] calldata, 

        uint256[] calldata, 

        bytes calldata 

    ) external pure returns (bytes4) {

        return 0xbc197c81;

    }



    function _sendAssets(address to, uint256[] memory assetIds) internal {

        uint256[] memory values = new uint256[](assetIds.length);

        for (uint256 i = 0; i < assetIds.length; i++) {

            values[i] = 1;

        }

        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, "");

    }



    function _checkPrices(uint256 priceInSand, uint256 adjustedPriceInSand) internal view {

        require(adjustedPriceInSand == priceInSand.mul(_multiplier).div(MULTIPLIER_DECIMALS), "INVALID_PRICE");

    }



    function _checkValidity(

        address buyer,

        address reserved,

        uint256 x,

        uint256 y,

        uint256 size,

        uint256 price,

        bytes32 salt,

        uint256[] memory assetIds,

        bytes32[] memory proof

    ) internal view {

        

        require(block.timestamp < _expiryTime, "SALE_IS_OVER");

        require(buyer == msg.sender || _metaTransactionContracts[msg.sender], "NOT_AUTHORIZED");

        require(reserved == address(0) || reserved == buyer, "RESERVED_LAND");

        bytes32 leaf = _generateLandHash(x, y, size, price, reserved, salt, assetIds);



        require(_verify(proof, leaf), "INVALID_LAND");

    }



    function _mint(

        address buyer,

        address to,

        uint256 x,

        uint256 y,

        uint256 size,

        uint256 price,

        address token,

        uint256 tokenAmount

    ) internal {

        if (size == 1 || _estate == address(0)) {

            _land.mintQuad(to, size, x, y, "");

        } else {

            _land.mintQuad(_estate, size, x, y, abi.encode(to));

        }

        emit LandQuadPurchased(buyer, to, x + (y * GRID_SIZE), size, price, token, tokenAmount);

    }



    function _generateLandHash(

        uint256 x,

        uint256 y,

        uint256 size,

        uint256 price,

        address reserved,

        bytes32 salt,

        uint256[] memory assetIds

    ) internal pure returns (bytes32) {

        return keccak256(abi.encodePacked(x, y, size, price, reserved, salt, assetIds));

    }



    function _verify(bytes32[] memory proof, bytes32 leaf) internal view returns (bool) {

        bytes32 computedHash = leaf;



        for (uint256 i = 0; i < proof.length; i++) {

            bytes32 proofElement = proof[i];



            if (computedHash < proofElement) {

                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));

            } else {

                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));

            }

        }



        return computedHash == _merkleRoot;

    }



    function _handleFeeAndReferral(

        address buyer,

        uint256 priceInSand,

        bytes memory referral

    ) internal {

        

        uint256 remainingAmountInSand = _handleSandFee(buyer, priceInSand);



        

        handleReferralWithERC20(buyer, remainingAmountInSand, referral, _wallet, address(_sand));

    }



    function _handleSandFee(address buyer, uint256 priceInSand) internal returns (uint256) {

        uint256 feeAmountInSand = priceInSand.mul(FEE).div(100);

        require(_sand.transferFrom(buyer, address(_feeDistributor), feeAmountInSand), "FEE_TRANSFER_FAILED");

        return priceInSand.sub(feeAmountInSand);

    }



    uint256 internal constant GRID_SIZE = 408; 



    ERC1155 internal immutable _asset;

    LandToken internal immutable _land;

    ERC20 internal immutable _sand;

    address internal immutable _estate;

    address internal immutable _feeDistributor;



    address payable internal _wallet;

    uint256 internal immutable _expiryTime;

    bytes32 internal immutable _merkleRoot;



    uint256 private constant FEE = 5; 



    uint256 private _multiplier = 1000; 

    uint256 private constant MULTIPLIER_DECIMALS = 1000;



    constructor(

        address landAddress,

        address sandContractAddress,

        address initialMetaTx,

        address admin,

        address payable initialWalletAddress,

        bytes32 merkleRoot,

        uint256 expiryTime,

        address initialSigningWallet,

        uint256 initialMaxCommissionRate,

        address estate,

        address asset,

        address feeDistributor

    ) public ReferralValidator(initialSigningWallet, initialMaxCommissionRate) {

        _land = LandToken(landAddress);

        _sand = ERC20(sandContractAddress);

        _setMetaTransactionProcessor(initialMetaTx, true);

        _wallet = initialWalletAddress;

        _merkleRoot = merkleRoot;

        _expiryTime = expiryTime;

        _admin = admin;

        _estate = estate;

        _asset = ERC1155(asset);

        _feeDistributor = feeDistributor;

    }

}
