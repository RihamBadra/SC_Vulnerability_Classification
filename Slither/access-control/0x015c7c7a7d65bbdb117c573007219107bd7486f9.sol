

pragma solidity 0.6.2;
pragma experimental ABIEncoderV2;


contract Context {
    
    
    constructor () internal { }

    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal virtual {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



contract PaymentDeposit is Ownable {

    
    mapping(address => uint) public depositors;
    uint public uniqueDepositors; 

    event Deposit(address indexed sender, uint amount, uint indexed index);
    event Withdraw(address indexed depositor, address indexed recipient, uint amount);

    
    function depositFor(address _recipient) public payable { 
        require(msg.value > 0, "No value provided to depositFor.");
        uint index = getDepositorIndex(_recipient);
        emit Deposit(_recipient, msg.value, index);
    }

    
    function getDepositorIndex(address _depositor) internal returns(uint) {
        if(depositors[_depositor] == 0) {
            uniqueDepositors = uniqueDepositors + 1;
            depositors[_depositor] = uniqueDepositors;
        }

        return depositors[_depositor];
    }

     
    receive() external payable {
        require(msg.value > 0, "No value provided to fallback.");
        require(tx.origin == msg.sender, "Only EOA can deposit directly.");
        uint index = getDepositorIndex(msg.sender);
        emit Deposit(msg.sender, msg.value, index);
    }

    
    function withdraw(address payable _depositor, address payable _recipient, uint _amount) internal {
        _recipient.transfer(_amount);
        emit Withdraw(_depositor, _recipient, _amount);
    }

    
    function withdrawFor(address payable _depositor, address payable _recipient, uint _amount) public onlyOwner {
        withdraw(_depositor, _recipient, _amount);
    }

    
    function migrate(address payable _recipient, uint _amount, PaymentDeposit _otherDeposit) public onlyOwner {
        require(address(this).balance >= _amount, "Not enough balance to migrate.");
        require(address(_otherDeposit) != address(this), "Cannot migrate to same contract.");
        _otherDeposit.depositFor.value(_amount)(_recipient); 
        emit Withdraw(address(this), _recipient, _amount);
    }
}


contract RelayerManager is PaymentDeposit {

    mapping(address => bool) public relayers;

    event RelayerInstalled(address relayer);
    event RelayerUninstalled(address relayer);

    modifier onlyRelayer {
        require(relayers[msg.sender], "Only relayer can call this function.");
        _;
    }

    
    function transferOwnership(address newOwner) public override onlyOwner { 
        require(!relayers[newOwner], "Relayer cannot be an owner.");
        require(newOwner != address(this), "Contract cannot own itself.");
        _transferOwnership(newOwner);
    }

    
    function installRelayer(address _relayer) onlyOwner public {
        require(!relayers[_relayer], "Relayer is already installed.");
        require(_relayer != address(this), "The relay contract cannot be installed as a relayer.");
        require(_relayer != owner(), "Avoid mixing relayer and owner roles.");

        relayers[_relayer] = true;
        emit RelayerInstalled(_relayer);
    }

     
    function uninstallRelayer(address _relayer) onlyOwner public {
        require(relayers[_relayer], "Relayer must be installed.");

        relayers[_relayer] = false;
        emit RelayerUninstalled(_relayer);
    }


      
    function relativeTopUp(address payable _recipient, uint256 _maxBalance) public onlyRelayer {
        require(relayers[_recipient], "Recipient must be a relayer to receive a top up.");
        uint256 relayerBalance = address(_recipient).balance;

        
        
        
        if (_maxBalance > relayerBalance) {
            uint256 toTopUp = _maxBalance - relayerBalance;
            withdraw(msg.sender, _recipient, toTopUp);
        }
    }

     
    function absoluteTopUp(address payable _recipient, uint256 _topUp) public onlyRelayer {
        require(relayers[_recipient], "Recipient must be a relayer to receive an emergency topup.");
        withdraw(msg.sender, _recipient, _topUp);
    }
}


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


contract InstantRefundRelay is RelayerManager {
    using SafeMath for uint256;

    event RelayExecuted(bytes32 indexed relayTxId, bool success, address indexed to, uint gasUsed, uint gasPrice);
    event OutOfCoins();

    
    struct RelayTx {
        bytes32 id; 
        address to; 
        bytes data; 
        uint gasLimit; 
    }
    
    
    function execute(RelayTx calldata _relayTx, uint _gasRefund) external {
        uint gasStarted = gasleft();

        
        
        
        
        require(relayers[msg.sender], "Relayer must call this function.");

        
        
        
        
        
        
        
        require(gasleft() > _relayTx.gasLimit.div(63).add(_relayTx.gasLimit).add(1000), "Not enough gas supplied.");

        
        (bool success,) = _relayTx.to.call.gas(_relayTx.gasLimit)(_relayTx.data);

        uint gasUsed = gasStarted.add(_gasRefund).sub(gasleft()); 

        if(_gasRefund > 0) {
            if(!msg.sender.send(gasUsed*tx.gasprice)) {
                
                emit OutOfCoins();
            }
        }

        emit RelayExecuted(_relayTx.id, success, _relayTx.to, gasUsed, tx.gasprice);
    }
}