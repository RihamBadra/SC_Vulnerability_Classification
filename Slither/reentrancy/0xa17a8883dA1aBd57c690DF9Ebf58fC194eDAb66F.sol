pragma solidity 0.6.7;

abstract contract Context {

    function _msgSender() internal view virtual returns (address payable) {

        return msg.sender;

    }



    function _msgData() internal view virtual returns (bytes memory) {

        this; 

        return msg.data;

    }

}

interface IERC20 {

    

    function totalSupply() external view returns (uint256);



    

    function balanceOf(address account) external view returns (uint256);



    

    function transfer(address recipient, uint256 amount) external returns (bool);



    

    function allowance(address owner, address spender) external view returns (uint256);



    

    function approve(address spender, uint256 amount) external returns (bool);



    

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);



    

    event Transfer(address indexed from, address indexed to, uint256 value);



    

    event Approval(address indexed owner, address indexed spender, uint256 value);

}

library Address {

    

    function isContract(address account) internal view returns (bool) {

        

        

        



        uint256 size;

        

        assembly { size := extcodesize(account) }

        return size > 0;

    }



    

    function sendValue(address payable recipient, uint256 amount) internal {

        require(address(this).balance >= amount, "Address: insufficient balance");



        

        (bool success, ) = recipient.call{ value: amount }("");

        require(success, "Address: unable to send value, recipient may have reverted");

    }



    

    function functionCall(address target, bytes memory data) internal returns (bytes memory) {

      return functionCall(target, data, "Address: low-level call failed");

    }



    

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {

        return _functionCallWithValue(target, data, 0, errorMessage);

    }



    

    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {

        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");

    }



    

    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {

        require(address(this).balance >= value, "Address: insufficient balance for call");

        return _functionCallWithValue(target, data, value, errorMessage);

    }



    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {

        require(isContract(target), "Address: call to non-contract");



        

        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);

        if (success) {

            return returndata;

        } else {

            

            if (returndata.length > 0) {

                



                

                assembly {

                    let returndata_size := mload(returndata)

                    revert(add(32, returndata), returndata_size)

                }

            } else {

                revert(errorMessage);

            }

        }

    }

}

contract ERC20 is Context, IERC20 {

    using SafeMath for uint256;

    using Address for address;



    mapping (address => uint256) private _balances;



    mapping (address => mapping (address => uint256)) private _allowances;



    uint256 private _totalSupply;



    string private _name;

    string private _symbol;

    uint8 private _decimals;



    

    constructor (string memory name, string memory symbol) public {

        _name = name;

        _symbol = symbol;

        _decimals = 18;

    }



    

    function name() public view returns (string memory) {

        return _name;

    }



    

    function symbol() public view returns (string memory) {

        return _symbol;

    }



    

    function decimals() public view returns (uint8) {

        return _decimals;

    }



    

    function totalSupply() public view override returns (uint256) {

        return _totalSupply;

    }



    

    function balanceOf(address account) public view override returns (uint256) {

        return _balances[account];

    }



    

    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(_msgSender(), recipient, amount);

        return true;

    }



    

    function allowance(address owner, address spender) public view virtual override returns (uint256) {

        return _allowances[owner][spender];

    }



    

    function approve(address spender, uint256 amount) public virtual override returns (bool) {

        _approve(_msgSender(), spender, amount);

        return true;

    }



    

    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {

        _transfer(sender, recipient, amount);

        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));

        return true;

    }



    

    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));

        return true;

    }



    

    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {

        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

        return true;

    }



    

    function _transfer(address sender, address recipient, uint256 amount) internal virtual {

        require(sender != address(0), "ERC20: transfer from the zero address");

        require(recipient != address(0), "ERC20: transfer to the zero address");



        _beforeTokenTransfer(sender, recipient, amount);



        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");

        _balances[recipient] = _balances[recipient].add(amount);

        emit Transfer(sender, recipient, amount);

    }



    

    function _mint(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: mint to the zero address");



        _beforeTokenTransfer(address(0), account, amount);



        _totalSupply = _totalSupply.add(amount);

        _balances[account] = _balances[account].add(amount);

        emit Transfer(address(0), account, amount);

    }



    

    function _burn(address account, uint256 amount) internal virtual {

        require(account != address(0), "ERC20: burn from the zero address");



        _beforeTokenTransfer(account, address(0), amount);



        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");

        _totalSupply = _totalSupply.sub(amount);

        emit Transfer(account, address(0), amount);

    }



    

    function _approve(address owner, address spender, uint256 amount) internal virtual {

        require(owner != address(0), "ERC20: approve from the zero address");

        require(spender != address(0), "ERC20: approve to the zero address");



        _allowances[owner][spender] = amount;

        emit Approval(owner, spender, amount);

    }



    

    function _setupDecimals(uint8 decimals_) internal {

        _decimals = decimals_;

    }



    

    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

}

library SafeERC20 {

    using SafeMath for uint256;

    using Address for address;



    function safeTransfer(IERC20 token, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));

    }



    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {

        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));

    }



    

    function safeApprove(IERC20 token, address spender, uint256 value) internal {

        

        

        

        

        require((value == 0) || (token.allowance(address(this), spender) == 0),

            "SafeERC20: approve from non-zero to non-zero allowance"

        );

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

    }



    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).add(value);

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {

        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");

        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

    }



    

    function _callOptionalReturn(IERC20 token, bytes memory data) private {

        

        

        



        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { 

            

            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");

        }

    }

}

contract Owned {

    address public owner;

    address public nominatedOwner;



    constructor(address _owner) public {

        require(_owner != address(0), "Owner address cannot be 0");

        owner = _owner;

        emit OwnerChanged(address(0), _owner);

    }



    function nominateNewOwner(address _owner) external onlyOwner {

        nominatedOwner = _owner;

        emit OwnerNominated(_owner);

    }



    function acceptOwnership() external {

        require(

            msg.sender == nominatedOwner,

            "You must be nominated before you can accept ownership"

        );

        emit OwnerChanged(owner, nominatedOwner);

        owner = nominatedOwner;

        nominatedOwner = address(0);

    }



    modifier onlyOwner {

        _onlyOwner();

        _;

    }



    function _onlyOwner() private view {

        require(

            msg.sender == owner,

            "Only the contract owner may perform this action"

        );

    }



    event OwnerNominated(address newOwner);

    event OwnerChanged(address oldOwner, address newOwner);

}

abstract contract Pausable is Owned {

    uint256 public lastPauseTime;

    bool public paused;



    constructor() internal {

        

        require(owner != address(0), "Owner must be set");

        

    }



    

    function setPaused(bool _paused) external onlyOwner {

        

        if (_paused == paused) {

            return;

        }



        

        paused = _paused;



        

        if (paused) {

            lastPauseTime = now;

        }



        

        emit PauseChanged(paused);

    }



    event PauseChanged(bool isPaused);



    modifier notPaused {

        require(

            !paused,

            "This action cannot be performed while the contract is paused"

        );

        _;

    }

}

contract ReentrancyGuard {

    

    

    

    

    



    

    

    

    

    

    uint256 private constant _NOT_ENTERED = 1;

    uint256 private constant _ENTERED = 2;



    uint256 private _status;



    constructor () internal {

        _status = _NOT_ENTERED;

    }



    

    modifier nonReentrant() {

        

        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");



        

        _status = _ENTERED;



        _;



        

        

        _status = _NOT_ENTERED;

    }

}

library SafeMath {

    

    function add(uint256 a, uint256 b) internal pure returns (uint256) {

        uint256 c = a + b;

        require(c >= a, "SafeMath: addition overflow");



        return c;

    }



    

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {

        return sub(a, b, "SafeMath: subtraction overflow");

    }



    

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b <= a, errorMessage);

        uint256 c = a - b;



        return c;

    }



    

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {

        

        

        

        if (a == 0) {

            return 0;

        }



        uint256 c = a * b;

        require(c / a == b, "SafeMath: multiplication overflow");



        return c;

    }



    

    function div(uint256 a, uint256 b) internal pure returns (uint256) {

        return div(a, b, "SafeMath: division by zero");

    }



    

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b > 0, errorMessage);

        uint256 c = a / b;

        



        return c;

    }



    

    function mod(uint256 a, uint256 b) internal pure returns (uint256) {

        return mod(a, b, "SafeMath: modulo by zero");

    }



    

    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {

        require(b != 0, errorMessage);

        return a % b;

    }

}

contract StakingRewards is ReentrancyGuard, Pausable {

    using SafeMath for uint256;

    using SafeERC20 for IERC20;



    



    IERC20 public rewardsToken;

    IERC20 public stakingToken;

    uint256 public periodFinish = 0;

    uint256 public rewardRate = 0;

    uint256 public rewardsDuration = 7 days;

    uint256 public lastUpdateTime;

    uint256 public rewardPerTokenStored;



    mapping(address => uint256) public userRewardPerTokenPaid;

    mapping(address => uint256) public rewards;



    uint256 private _totalSupply;

    mapping(address => uint256) private _balances;



    



    constructor(

        address _owner,

        address _rewardsToken,

        address _stakingToken

    ) public Owned(_owner) {

        rewardsToken = IERC20(_rewardsToken);

        stakingToken = IERC20(_stakingToken);

    }



    



    function totalSupply() external view returns (uint256) {

        return _totalSupply;

    }



    function balanceOf(address account) external view returns (uint256) {

        return _balances[account];

    }



    function lastTimeRewardApplicable() public view returns (uint256) {

        return min(block.timestamp, periodFinish);

    }



    function rewardPerToken() public view returns (uint256) {

        if (_totalSupply == 0) {

            return rewardPerTokenStored;

        }

        return

            rewardPerTokenStored.add(

                lastTimeRewardApplicable()

                    .sub(lastUpdateTime)

                    .mul(rewardRate)

                    .mul(1e18)

                    .div(_totalSupply)

            );

    }



    function earned(address account) public view returns (uint256) {

        return

            _balances[account]

                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))

                .div(1e18)

                .add(rewards[account]);

    }



    function getRewardForDuration() external view returns (uint256) {

        return rewardRate.mul(rewardsDuration);

    }



    function min(uint256 a, uint256 b) public pure returns (uint256) {

        return a < b ? a : b;

    }



    



    function stake(uint256 amount)

        external

        nonReentrant

        notPaused

        updateReward(msg.sender)

    {

        require(amount > 0, "Cannot stake 0");

        _totalSupply = _totalSupply.add(amount);

        _balances[msg.sender] = _balances[msg.sender].add(amount);

        stakingToken.safeTransferFrom(msg.sender, address(this), amount);

        emit Staked(msg.sender, amount);

    }



    function withdraw(uint256 amount)

        public

        nonReentrant

        updateReward(msg.sender)

    {

        require(amount > 0, "Cannot withdraw 0");

        _totalSupply = _totalSupply.sub(amount);

        _balances[msg.sender] = _balances[msg.sender].sub(amount);

        stakingToken.safeTransfer(msg.sender, amount);

        emit Withdrawn(msg.sender, amount);

    }



    function getReward() public nonReentrant updateReward(msg.sender) {

        uint256 reward = rewards[msg.sender];

        if (reward > 0) {

            rewards[msg.sender] = 0;

            rewardsToken.safeTransfer(msg.sender, reward);

            emit RewardPaid(msg.sender, reward);

        }

    }



    function exit() external {

        withdraw(_balances[msg.sender]);

        getReward();

    }



    



    function notifyRewardAmount(uint256 reward)

        external

        onlyOwner

        updateReward(address(0))

    {

        if (block.timestamp >= periodFinish) {

            rewardRate = reward.div(rewardsDuration);

        } else {

            uint256 remaining = periodFinish.sub(block.timestamp);

            uint256 leftover = remaining.mul(rewardRate);

            rewardRate = reward.add(leftover).div(rewardsDuration);

        }



        

        

        

        

        uint256 balance = rewardsToken.balanceOf(address(this));

        require(

            rewardRate <= balance.div(rewardsDuration),

            "Provided reward too high"

        );



        lastUpdateTime = block.timestamp;

        periodFinish = block.timestamp.add(rewardsDuration);

        emit RewardAdded(reward);

    }



    

    function recoverERC20(address tokenAddress, uint256 tokenAmount)

        external

        onlyOwner

    {

        

        require(

            tokenAddress != address(stakingToken) &&

                tokenAddress != address(rewardsToken),

            "Cannot withdraw the staking or rewards tokens"

        );

        IERC20(tokenAddress).safeTransfer(owner, tokenAmount);

        emit Recovered(tokenAddress, tokenAmount);

    }



    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {

        require(

            block.timestamp > periodFinish,

            "Previous rewards period must be complete before changing the duration for the new period"

        );

        rewardsDuration = _rewardsDuration;

        emit RewardsDurationUpdated(rewardsDuration);

    }



    



    modifier updateReward(address account) {

        rewardPerTokenStored = rewardPerToken();

        lastUpdateTime = lastTimeRewardApplicable();

        if (account != address(0)) {

            rewards[account] = earned(account);

            userRewardPerTokenPaid[account] = rewardPerTokenStored;

        }

        _;

    }



    



    event RewardAdded(uint256 reward);

    event Staked(address indexed user, uint256 amount);

    event Withdrawn(address indexed user, uint256 amount);

    event RewardPaid(address indexed user, uint256 reward);

    event RewardsDurationUpdated(uint256 newDuration);

    event Recovered(address token, uint256 amount);

}
