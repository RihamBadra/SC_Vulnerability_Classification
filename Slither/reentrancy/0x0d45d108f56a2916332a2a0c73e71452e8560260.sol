

pragma solidity 0.6.12;



interface ISateNFT {
    function ownerOf(uint256 tokenId) external view returns (address);
    function creators(uint256 tokenId) external view returns (address);
    function isApproved(uint256 _tokenId, address _operator) external view returns (bool);
    function sateInfo(uint256 tokenId) external view returns (uint256, uint256, uint256, uint256, uint8, uint8);

    function setPrimarySalePrice(uint256 _tokenId, uint256 _salePrice) external;
    function safeTransferFrom(address from, address to, uint256 tokenId) external;
}



library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}



library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}



interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



contract SateAuction is Ownable {
    using SafeMath for uint256;
    using Address for address payable;
    using SafeERC20 for IERC20;


    event AuctionCreated(
        uint256 indexed tokenId,
        uint256 reservePrice,
        uint256 startTimestamp,
        uint256 endTimestamp
    );

    event UpdateAuctionEndTime(
        uint256 indexed tokenId,
        uint256 endTime
    );

    event UpdateAuctionStartTime(
        uint256 indexed tokenId,
        uint256 startTime
    );

    event UpdateAuctionReservePrice(
        uint256 indexed tokenId,
        uint256 reservePrice
    );

    event UpdateMinBidIncrement(
        uint256 minBidIncrement
    );

    event UpdateBidWithdrawalLockTime(
        uint256 bidWithdrawalLockTime
    );

    event BidPlaced(
        uint256 indexed tokenId,
        address indexed bidder,
        uint256 bid
    );

    event BidWithdrawn(
        uint256 indexed tokenId,
        address indexed bidder,
        uint256 bid
    );

    event BidRefunded(
        address indexed bidder,
        uint256 bid
    );

    event AuctionResulted(
        uint256 indexed tokenId,
        address indexed winner,
        uint256 winningBid
    );

    event AuctionCancelled(
        uint256 indexed tokenId
    );

    
    struct Auction {
        uint256 reservePrice;
        uint256 startTime;
        uint256 endTime;
        bool resulted;
    }

    
    struct HighestBid {
        address payable bidder;
        uint256 bid;
        uint256 lastBidTime;
    }

    
    mapping(uint256 => Auction) public auctions;

    
    mapping(uint256 => HighestBid) public highestBids;

    
    ISateNFT public sateNft;

    
    IERC20 public token;

    
    uint256 public minBidIncrement = 100000000 * (10 ** 18);

    
    uint256 public bidWithdrawalLockTime = 30 minutes;

    
    uint256 public designerFee = 200;

    
    uint256 public vaultFee = 300;

    
    address payable public devFeeRecipient;

    
    address payable public vault;

    constructor(
        ISateNFT _sateNft,
        IERC20 _token,
        address payable _devFeeRecipient,
        address payable _vault
    ) public {
        require(address(_sateNft) != address(0), "Invalid NFT");
        require(address(_token) != address(0), "Invalid Token");
        require(_devFeeRecipient != address(0), "Invalid Dev Fee Recipient");
        require(_vault != address(0), "Invalid Vault");

        sateNft = _sateNft;
        token = _token;
        devFeeRecipient = _devFeeRecipient;
        vault = _vault;
    }

    
    function createAuction(
        uint256 _tokenId,
        uint256 _reservePrice,
        uint256 _startTimestamp,
        uint256 _endTimestamp
    ) external onlyOwner {
        
        require(
            sateNft.isApproved(_tokenId, address(this)),
            "Not approved"
        );

        _createAuction(
            _tokenId,
            _reservePrice,
            _startTimestamp,
            _endTimestamp
        );
    }


    
    function placeBid(uint256 _tokenId, uint256 _amount) external payable {
        require(_msgSender().isContract() == false, "No contracts permitted");

        
        Auction storage auction = auctions[_tokenId];

        
        require(
            _getNow() >= auction.startTime && _getNow() <= auction.endTime,
            "Bidding outside of the auction window"
        );

        
        HighestBid storage highestBid = highestBids[_tokenId];
        uint256 minBidRequired = highestBid.bid.add(minBidIncrement);
        require(_amount >= auction.reservePrice, "Failed to outbid min bid price");
        require(_amount >= minBidRequired, "Failed to outbid highest bidder");

        
        token.safeTransferFrom(_msgSender(), address(this), _amount);

        
        if (highestBid.bidder != address(0)) {
            _refundHighestBidder(highestBid.bidder, highestBid.bid);
        }

        
        highestBid.bidder = _msgSender();
        highestBid.bid = _amount;
        highestBid.lastBidTime = _getNow();

        emit BidPlaced(_tokenId, _msgSender(), _amount);
    }

    
    function withdrawBid(uint256 _tokenId) external {
        HighestBid storage highestBid = highestBids[_tokenId];

        
        require(highestBid.bidder == _msgSender(), "You are not the highest bidder");

        
        require(
            _getNow() >= highestBid.lastBidTime.add(bidWithdrawalLockTime),
            "Cannot withdraw until lock time has passed"
        );

        require(_getNow() < auctions[_tokenId].endTime, "Past auction end");

        uint256 previousBid = highestBid.bid;

        
        delete highestBids[_tokenId];

        
        _refundHighestBidder(_msgSender(), previousBid);

        emit BidWithdrawn(_tokenId, _msgSender(), previousBid);
    }


    
    
    

    
    function resultAuction(uint256 _tokenId) external onlyOwner {

        
        Auction storage auction = auctions[_tokenId];

        
        require(auction.endTime > 0, "Auction does not exist");

        
        require(_getNow() > auction.endTime, "The auction has not ended");

        
        require(!auction.resulted, "auction already resulted");

        
        require(sateNft.isApproved(_tokenId, address(this)), "auction not approved");

        
        HighestBid storage highestBid = highestBids[_tokenId];
        address winner = highestBid.bidder;
        uint256 winningBid = highestBid.bid;

        
        require(winningBid >= auction.reservePrice, "reserve not reached");

        
        require(winner != address(0), "no open bids");

        
        auctions[_tokenId].resulted = true;

        
        delete highestBids[_tokenId];

        
        uint256 primarySalePrice = winningBid;
        sateNft.setPrimarySalePrice(_tokenId, primarySalePrice);

        
        uint256 designerFeeAmount = winningBid.mul(designerFee).div(1000);

        
        uint256 vaultFeeAmount = winningBid.mul(vaultFee).div(1000);

        
        token.safeTransfer(sateNft.creators(_tokenId), designerFeeAmount);
        
        
        token.safeTransfer(vault, vaultFeeAmount);

        
        token.safeTransfer(devFeeRecipient, winningBid.sub(designerFeeAmount).sub(vaultFeeAmount));

        
        sateNft.safeTransferFrom(sateNft.ownerOf(_tokenId), winner, _tokenId);

        emit AuctionResulted(_tokenId, winner, winningBid);
    }

    
    function cancelAuction(uint256 _tokenId) external onlyOwner {

        
        Auction storage auction = auctions[_tokenId];

        
        require(auction.endTime > 0, "Auction does not exist");

        
        require(!auction.resulted, "Auction already resulted");

        
        HighestBid storage highestBid = highestBids[_tokenId];
        if (highestBid.bidder != address(0)) {
            _refundHighestBidder(highestBid.bidder, highestBid.bid);

            
            delete highestBids[_tokenId];
        }

        
        delete auctions[_tokenId];

        emit AuctionCancelled(_tokenId);
    }

    
    function updateMinBidIncrement(uint256 _minBidIncrement) external onlyOwner {
        minBidIncrement = _minBidIncrement;
        emit UpdateMinBidIncrement(_minBidIncrement);
    }

    
    function updateBidWithdrawalLockTime(uint256 _bidWithdrawalLockTime) external onlyOwner {
        bidWithdrawalLockTime = _bidWithdrawalLockTime;
        emit UpdateBidWithdrawalLockTime(_bidWithdrawalLockTime);
    }

    
    function updateAuctionReservePrice(uint256 _tokenId, uint256 _reservePrice) external onlyOwner {
        require(
            auctions[_tokenId].endTime > 0,
            "No Auction exists"
        );

        auctions[_tokenId].reservePrice = _reservePrice;
        emit UpdateAuctionReservePrice(_tokenId, _reservePrice);
    }

    
    function updateAuctionStartTime(uint256 _tokenId, uint256 _startTime) external onlyOwner {
        require(
            auctions[_tokenId].endTime > 0,
            "No Auction exists"
        );

        auctions[_tokenId].startTime = _startTime;
        emit UpdateAuctionStartTime(_tokenId, _startTime);
    }

    
    function updateAuctionEndTime(uint256 _tokenId, uint256 _endTimestamp) external onlyOwner {
        require(
            auctions[_tokenId].endTime > 0,
            "No Auction exists"
        );
        require(
            auctions[_tokenId].startTime < _endTimestamp,
            "End time must be greater than start"
        );
        require(
            _endTimestamp > _getNow(),
            "End time passed. Nobody can bid"
        );

        auctions[_tokenId].endTime = _endTimestamp;
        emit UpdateAuctionEndTime(_tokenId, _endTimestamp);
    }

    
    function updateDesignerFee(uint256 _designerFee) external onlyOwner {
        designerFee = _designerFee;
    }

    
    function updateVaultFee(uint256 _vaultFee) external onlyOwner {
        vaultFee = _vaultFee;
    }


    
    
    

    
    function getAuction(uint256 _tokenId)
    external
    view
    returns (uint256 _reservePrice, uint256 _startTime, uint256 _endTime, bool _resulted) {
        Auction storage auction = auctions[_tokenId];
        return (
            auction.reservePrice,
            auction.startTime,
            auction.endTime,
            auction.resulted
        );
    }

    
    function getHighestBidder(uint256 _tokenId) external view returns (
        address payable _bidder,
        uint256 _bid,
        uint256 _lastBidTime
    ) {
        HighestBid storage highestBid = highestBids[_tokenId];
        return (
            highestBid.bidder,
            highestBid.bid,
            highestBid.lastBidTime
        );
    }


    
    
    

    function _getNow() internal virtual view returns (uint256) {
        return block.timestamp;
    }

    
    function _createAuction(
        uint256 _tokenId,
        uint256 _reservePrice,
        uint256 _startTimestamp,
        uint256 _endTimestamp
    ) private {
        
        require(auctions[_tokenId].endTime == 0, "Cannot relist");

        
        require(_endTimestamp > _startTimestamp, "End time must be greater than start");
        require(_endTimestamp > _getNow(), "End time passed. Nobody can bid.");

        
        auctions[_tokenId] = Auction({
            reservePrice : _reservePrice,
            startTime : _startTimestamp,
            endTime : _endTimestamp,
            resulted : false
        });

        emit AuctionCreated(_tokenId, _reservePrice, _startTimestamp, _endTimestamp);
    }

    
    function _refundHighestBidder(address payable _currentHighestBidder, uint256 _currentHighestBid) private {
        token.safeTransfer(_currentHighestBidder, _currentHighestBid);
        emit BidRefunded(_currentHighestBidder, _currentHighestBid);
    }
}