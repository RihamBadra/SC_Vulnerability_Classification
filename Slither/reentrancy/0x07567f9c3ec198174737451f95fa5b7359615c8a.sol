

pragma solidity ^0.6.0;




library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}



abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    
    constructor (string memory name_, string memory symbol_) public {
        _name = name_;
        _symbol = symbol_;
        _decimals = 18;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}



contract TokenPool is Ownable {
    IERC20 public token;
    bool private _isTokenRescuable;

    constructor(IERC20 _token) public {
        token = _token;
        _isTokenRescuable = false;
    }

    function balance() public view returns (uint256) {
        return token.balanceOf(address(this));
    }

    function setRescuable(bool rescuable) public onlyOwner {
        _isTokenRescuable = rescuable;
    }

    function transfer(address to, uint256 value)
        external
        onlyOwner
        returns (bool)
    {
        return token.transfer(to, value);
    }

    function rescueFunds(
        address tokenToRescue,
        address to,
        uint256 amount
    ) external onlyOwner returns (bool) {
        if (!_isTokenRescuable) {
            require(
                address(token) != tokenToRescue,
                "TokenPool: Cannot claim token held by the contract"
            );
        }

        return IERC20(tokenToRescue).transfer(to, amount);
    }
}



interface IIouVesting {
    
    function getCurrentRewards(bool includeForfeited)
        external
        view
        returns (uint256);

    
    function getTotalPossibleRewards(bool includeForfeited)
        external
        view
        returns (uint256);

    
    function unstake(uint256 amount, uint256 donationRatio) external;

    
    function stake(uint256 amount) external;

    
    function totalStaked() external view returns (uint256);

    
    function totalLocked() external view returns (uint256);

    
    function totalStakedFor(address user) external view returns (uint256);

    
    function totalRewards() external view returns (uint256);

    
    function getEarnings(address user) external view returns (uint256);
}



contract IouVesting is IIouVesting, Ownable {
    using SafeMath for uint256;

    uint256 public startTimestamp;
    uint256 public availableForfeitedAmount;
    uint256 public totalUsers = 0;

    uint256 public constant ratio = 1449697206000000; 
    uint256 public constant totalMonths = 6;

    address public donationAddress;

    mapping(address => uint256) userShares;
    mapping(address => uint256) userEarnings;

    event RewardsClaimed(address indexed user, uint256 amount);
    event RewardsDonated(address indexed user, uint256 amount);
    event TokensLocked(address indexed user, uint256 amount);
    event TokensStaked(address indexed user, uint256 amount, uint256 total);

    TokenPool private _iouPool;
    TokenPool private _lockedIouPool;
    TokenPool private _rewardsPool;

    
    constructor(IERC20 iouToken, IERC20 rewardToken) public {
        startTimestamp = block.timestamp;
        availableForfeitedAmount = 0;
        _iouPool = new TokenPool(iouToken);
        _lockedIouPool = new TokenPool(iouToken);
        _rewardsPool = new TokenPool(rewardToken);
        _rewardsPool.setRescuable(true);
    }

    function setDonationAddress(address donationReceiver) external onlyOwner {
        donationAddress = donationReceiver;
    }

    
    function rescueRewards() external onlyOwner {
        require(_rewardsPool.balance() > 0, "IouVesting: Nothing to rescue");
        require(
            _rewardsPool.transfer(msg.sender, _rewardsPool.balance()),
            "IouVesting: rescue rewards from rewards pool failed"
        );
    }

    
    function getCurrentRewards(bool includeForfeited)
        public
        view
        override
        returns (uint256)
    {
        require(
            msg.sender != address(0),
            "IouVesting: Cannot get rewards for address(0)."
        );

        require(
            userShares[msg.sender] != uint256(0),
            "IouVesting: Sender hasn't staked anything."
        );

        return computeRewards(msg.sender, includeForfeited);
    }

    
    function getStakingToken() public view returns (IERC20) {
        return _iouPool.token();
    }

    
    function getRewardToken() public view returns (IERC20) {
        return _rewardsPool.token();
    }

    
    function getEarnings(address user) public view override returns (uint256) {
        return userEarnings[user];
    }

    
    function totalStaked() public view override returns (uint256) {
        return _iouPool.balance();
    }

    
    function totalLocked() public view override returns (uint256) {
        return _lockedIouPool.balance();
    }

    
    function totalStakedFor(address user)
        public
        view
        override
        returns (uint256)
    {
        return userShares[user];
    }

    
    function totalRewards() public view override returns (uint256) {
        return _rewardsPool.balance();
    }

    
    function rescueFundsFromStakingPool(
        address tokenToRescue,
        address to,
        uint256 amount
    ) public onlyOwner returns (bool) {
        return _iouPool.rescueFunds(tokenToRescue, to, amount);
    }

    
    function getTotalPossibleRewards(bool includeForfeited)
        external
        view
        override
        returns (uint256)
    {
        return computeUserTotalPossibleRewards(msg.sender, includeForfeited);
    }

    function getRatio(
        uint256 numerator,
        uint256 denominator,
        uint256 precision
    ) private view returns (uint256) {
        uint256 _numerator = numerator * 10**(precision + 1);
        uint256 _quotient = ((_numerator / denominator) + 5) / 10;
        return (_quotient);
    }

    function computeUserTotalPossibleRewards(
        address user,
        bool includeForfeited
    ) private view returns (uint256) {
        uint256 originalAmount = (userShares[user] * ratio) / (10**18);
        if (!includeForfeited) return originalAmount;

        uint256 shareVsTotalStakedRatio =
            getRatio(userShares[user], totalStaked(), 18);
        uint256 forfeitedAmount =
            (shareVsTotalStakedRatio * availableForfeitedAmount) / (10**18);

        return originalAmount.add(forfeitedAmount);
    }

    
    function computeRewards(address user, bool includeForfeited)
        private
        view
        returns (uint256)
    {
        uint256 nowTimestamp = block.timestamp;
        uint256 endTimestamp = startTimestamp + (totalMonths * 30 days);
        if (nowTimestamp > endTimestamp) {
            nowTimestamp = endTimestamp;
        }

        uint256 stakingMonths =
            (nowTimestamp - startTimestamp) / 60 / 60 / 24 / 30; 
        if (stakingMonths == uint256(0)) {
            
            stakingMonths = 1;
        }

        if (includeForfeited) {
            uint256 totalUserPossibleReward =
                computeUserTotalPossibleRewards(user, true);

            return (totalUserPossibleReward * stakingMonths) / totalMonths;
        } else {
            uint256 totalUserPossibleRewardWithoutForfeited =
                computeUserTotalPossibleRewards(user, false);
            uint256 rewardsWithoutForfeited =
                ((totalUserPossibleRewardWithoutForfeited * stakingMonths) /
                    totalMonths);

            if (!includeForfeited) return rewardsWithoutForfeited;
        }
    }

    
    function lockTokens(IERC20 iouToken, uint256 amount) external {
        
        uint256 supply = iouToken.totalSupply();
        uint256 necessaryRewardSupply = (supply * ratio) / (10**18);

        require(
            amount >= necessaryRewardSupply,
            "IouVesting: The amount provided for locking is not right"
        );

        require(
            _rewardsPool.token().transferFrom(
                msg.sender,
                address(_rewardsPool),
                amount
            ),
            "TokenGeyser: transfer into locked pool failed"
        );

        emit TokensLocked(msg.sender, amount);
    }

    
    function unstake(uint256 amount, uint256 donationRatio) external override {
        require(
            amount > uint256(0),
            "IouVesting: Unstake amount needs to be greater than 0"
        );
        require(
            userShares[msg.sender] != uint256(0),
            "IouVesting: There is nothing to unstake for you"
        );

        require(
            userShares[msg.sender] >= amount,
            "IouVesting: You cannot unstake more than you staked"
        );

        require(
            donationRatio <= uint256(100),
            "IouVesting: You cannot donate more than you earned"
        );

        uint256 amountVsSharesRatio =
            getRatio(amount, userShares[msg.sender], 18);
        uint256 totalUserPossibleRewards =
            (computeUserTotalPossibleRewards(msg.sender, false) *
                amountVsSharesRatio) / (10**18);

        uint256 totalCurrentUserRewards =
            (getCurrentRewards(true) * amountVsSharesRatio) / (10**18);

        
        if (totalRewards() > 0) {
            uint256 donationAmount = 0;
            if (donationAddress != address(0) && donationRatio > 0) {
                donationAmount =
                    (donationRatio * totalCurrentUserRewards) /
                    (10**18);
            }

            uint256 toTransferToUser = totalCurrentUserRewards;
            if (donationAmount > 0) {
                toTransferToUser = totalCurrentUserRewards - donationAmount;
                require(
                    _rewardsPool.transfer(donationAddress, donationAmount),
                    "IouVesting: transfer from rewards pool to donation receiver failed"
                );
            }

            require(
                _rewardsPool.transfer(msg.sender, toTransferToUser),
                "IouVesting: transfer from rewards pool failed"
            );
            emit RewardsClaimed(msg.sender, toTransferToUser);
            emit RewardsDonated(msg.sender, donationAmount);

            userEarnings[msg.sender] += totalCurrentUserRewards;

            availableForfeitedAmount += (totalUserPossibleRewards -
                totalCurrentUserRewards);
        }

        require(
            _iouPool.transfer(address(_lockedIouPool), amount),
            "IouVesting: transfer from iou pool to locked iou pool failed"
        );

        userShares[msg.sender] -= amount;
        if (userShares[msg.sender] == uint256(0)) {
            totalUsers--;
        }
    }

    
    function stake(uint256 amount) external override {
        require(amount > 0, "IouVesting: You cannot stake 0");
        require(
            _rewardsPool.balance() > 0,
            "IouVesting: No rewards are available"
        );

        require(
            _iouPool.token().transferFrom(
                msg.sender,
                address(_iouPool),
                amount
            ),
            "IouVesting: transfer into iou pool failed"
        );

        if (userShares[msg.sender] == uint256(0)) {
            totalUsers++;
        }
        userShares[msg.sender] += amount;

        emit TokensStaked(msg.sender, amount, totalStaked());
    }
}