







pragma solidity >=0.6.0 <0.8.0;


library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}






pragma solidity >=0.6.0 <0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}






pragma solidity >=0.6.2 <0.8.0;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}






pragma solidity >=0.6.0 <0.8.0;




library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}






pragma solidity >=0.6.0 <0.8.0;


abstract contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}






pragma solidity >=0.6.0 <0.8.0;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}






pragma solidity >=0.6.0 <0.8.0;


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}





pragma solidity 0.7.4;

interface IPoolAllowance is IERC20 {
    function mintAllowance(address _account, uint256 _amount) external;

    function burnAllowance(address _account, uint256 _amount) external;
}





pragma solidity 0.7.4;

interface IRewardsPool is IERC20 {
    function updateReward(address _account) external;

    function withdraw() external;

    function depositReward(uint256 _reward) external;
}





pragma solidity 0.7.4;

interface IOwnersRewardsPool is IRewardsPool {
    function withdraw(address _account) external;
}





pragma solidity 0.7.4;

interface IERC677 is IERC20 {
    function transferAndCall(address _to, uint256 _value, bytes calldata _data) external returns (bool success);
}





pragma solidity 0.7.4;








contract PoolOwners is ReentrancyGuard, Ownable {
    using SafeMath for uint256;
    using SafeERC20 for IERC677;

    IERC677 public stakingToken;
    uint256 public totalStaked;
    mapping(address => uint256) private stakedBalances;

    uint16 public totalRewardTokens;
    mapping(uint16 => address) public rewardTokens;
    mapping(address => address) public rewardPools;
    mapping(address => address) public allowanceTokens;
    mapping(address => mapping(address => uint256)) private mintedAllowanceTokens;

    event Staked(address indexed user, uint256 amount);
    event Withdrawn(address indexed user, uint256 amount);
    event RewardsWithdrawn(address indexed user);
    event AllowanceMinted(address indexed user);
    event RewardTokenAdded(address indexed token, address allowanceToken, address rewardsPool);
    event RewardTokenRemoved(address indexed token);

    constructor(address _stakingToken) {
        stakingToken = IERC677(_stakingToken);
    }

    modifier updateRewards(address _account) {
        for (uint16 i = 0; i < totalRewardTokens; i++) {
            IOwnersRewardsPool(rewardPools[rewardTokens[i]]).updateReward(_account);
        }
        _;
    }

    
    function balanceOf(address _account) public view returns (uint256) {
        return stakedBalances[_account];
    }

    
    function mintedAllowance(address _allowanceToken, address _account) public view returns (uint256) {
        return mintedAllowanceTokens[_allowanceToken][_account];
    }

    
    function totalSupply() public view returns (uint256) {
        return totalStaked;
    }

    
    function onTokenTransfer(address _sender, uint256 _value, bytes calldata) external nonReentrant {
        require(msg.sender == address(stakingToken), "Sender must be staking token");
        require(_value > 0, "Cannot stake 0");
        _stake(_sender, _value);
    }

    
    function stake(uint256 _amount) external nonReentrant {
        require(_amount > 0, "Cannot stake 0");
        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);
        _stake(msg.sender, _amount);
    }

    
    function withdraw(uint256 _amount) public nonReentrant updateRewards(msg.sender) {
        require(_amount > 0, "Cannot withdraw 0");
        stakedBalances[msg.sender] = stakedBalances[msg.sender].sub(_amount);
        totalStaked -= _amount;
        _burnAllowance(msg.sender);
        stakingToken.safeTransfer(msg.sender, _amount);
        emit Withdrawn(msg.sender, _amount);
    }

    
    function withdrawAllRewards() public nonReentrant {
        for (uint16 i = 0; i < totalRewardTokens; i++) {
            _withdrawReward(rewardTokens[i], msg.sender);
        }
        emit RewardsWithdrawn(msg.sender);
    }

    
    function exit() external {
        withdraw(balanceOf(msg.sender));
        withdrawAllRewards();
    }

    
    function mintAllowance() external nonReentrant {
        _mintAllowance(msg.sender);
        emit AllowanceMinted(msg.sender);
    }

    
    function addRewardToken(
        address _token,
        address _allowanceToken,
        address _rewardPool
    ) external onlyOwner() {
        require(rewardPools[_token] == address(0), "Reward token already exists");
        rewardTokens[totalRewardTokens] = _token;
        allowanceTokens[_token] = _allowanceToken;
        rewardPools[_token] = _rewardPool;
        totalRewardTokens++;
        emit RewardTokenAdded(_token, _allowanceToken, _rewardPool);
    }

    
    function removeRewardToken(uint16 _index) external onlyOwner() {
        require(_index < totalRewardTokens, "Reward token does not exist");
        address token = rewardTokens[_index];
        if (totalRewardTokens > 1) {
            rewardTokens[_index] = rewardTokens[totalRewardTokens - 1];
        }
        delete rewardTokens[totalRewardTokens - 1];
        delete allowanceTokens[token];
        delete rewardPools[token];
        totalRewardTokens--;
        emit RewardTokenRemoved(token);
    }

    
    function _stake(address _sender, uint256 _amount) private updateRewards(_sender) {
        stakedBalances[_sender] = stakedBalances[_sender].add(_amount);
        totalStaked += _amount;
        _mintAllowance(_sender);
        emit Staked(_sender, _amount);
    }

    
    function _withdrawReward(address _token, address _account) private {
        require(rewardPools[_token] != address(0), "Reward token does not exist");
        IOwnersRewardsPool(rewardPools[_token]).withdraw(_account);
    }

    
    function _mintAllowance(address _account) private {
        uint256 stakedAmount = balanceOf(_account);
        for (uint16 i = 0; i < totalRewardTokens; i++) {
            address token = allowanceTokens[rewardTokens[i]];
            uint256 minted = mintedAllowance(token, _account);
            if (minted < stakedAmount) {
                IPoolAllowance(token).mintAllowance(_account, stakedAmount.sub(minted));
                mintedAllowanceTokens[token][_account] = stakedAmount;
            }
        }
    }

    
    function _burnAllowance(address _account) private {
        uint256 stakedAmount = balanceOf(_account);
        for (uint16 i = 0; i < totalRewardTokens; i++) {
            address token = allowanceTokens[rewardTokens[i]];
            uint256 minted = mintedAllowance(token, _account);
            if (minted > stakedAmount) {
                IPoolAllowance(token).burnAllowance(_account, minted.sub(stakedAmount));
                mintedAllowanceTokens[token][_account] = stakedAmount;
            }
        }
    }
}