







library Math {
    function min(uint x, uint y) internal pure returns (uint z) {
        z = x < y ? x : y;
    }

    
    function sqrt(uint y) internal pure returns (uint z) {
        if (y > 3) {
            z = y;
            uint x = y / 2 + 1;
            while (x < z) {
                z = x;
                x = (y / x + x) / 2;
            }
        } else if (y != 0) {
            z = 1;
        }
    }
}








library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}







interface IERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function decimals() external view returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);
}







library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}










library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}





interface IWSERC20 {
    event Approval(address indexed owner, address indexed spender, uint value);
    event Transfer(address indexed from, address indexed to, uint value);

    function name() external pure returns (string memory);
    function symbol() external pure returns (string memory);
    function decimals() external pure returns (uint8);
    function totalSupply() external view returns (uint);
    function balanceOf(address owner) external view returns (uint);
    function allowance(address owner, address spender) external view returns (uint);

    function approve(address spender, uint value) external returns (bool);
    function transfer(address to, uint value) external returns (bool);
    function transferFrom(address from, address to, uint value) external returns (bool);

    function DOMAIN_SEPARATOR() external view returns (bytes32);
    function PERMIT_TYPEHASH() external pure returns (bytes32);
    function nonces(address owner) external view returns (uint);

    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;
}







interface IStakingRewards {
    
    function lastTimeRewardApplicable() external view returns (uint256);

    function rewardPerToken() external view returns (uint256);

    function earned(address account) external view returns (uint256);

    function getRewardForDuration() external view returns (uint256);

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    

    function stake(uint256 amount) external;

    function withdraw(uint256 amount) external;

    function getReward() external;

    function exit() external;
}






contract ReentrancyGuard {
    
    
    
    
    

    
    
    
    
    
    uint256 private constant _NOT_ENTERED = 1;
    uint256 private constant _ENTERED = 2;

    uint256 private _status;

    constructor () internal {
        _status = _NOT_ENTERED;
    }

    
    modifier nonReentrant() {
        
        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");

        
        _status = _ENTERED;

        _;

        
        
        _status = _NOT_ENTERED;
    }
}




pragma solidity ^0.6.12;












contract StakingRewardsV2 is ReentrancyGuard, IStakingRewards {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;

    bool public initialized;
    IERC20 public rewardsToken;
    IERC20 public stakingToken;
    address public rewardsDistributor;
    address public externalController;

    struct RewardEpoch {
        uint id;
        uint totalSupply;
        uint startEpoch;
        uint finishEpoch;
        uint rewardRate;
        uint lastUpdateTime;
        uint rewardPerTokenStored;
    }
    
    mapping(uint => RewardEpoch) public epochData;
    mapping(uint => mapping(address => uint)) public userRewardPerTokenPaid;
    mapping(uint => mapping(address => uint)) public rewards;
    mapping(uint => mapping(address => uint)) private _balances;
    mapping(address => uint) public lastAccountEpoch;
    uint public currentEpochId;

    function initialize(
        address _externalController,
        address _rewardsDistributor,
        address _rewardsToken,
        address _stakingToken
        ) external {
            require(initialized == false, "Contract already initialized.");
            rewardsToken = IERC20(_rewardsToken);
            stakingToken = IERC20(_stakingToken);
            rewardsDistributor = _rewardsDistributor;
            externalController = _externalController;
            initialized = true;
    }

    function fixPool(bool recalcRate, address[] memory accounts) public {
        require(msg.sender == address(0x95Db09ff2644eca19cB4b99318483254BFD52dAe), "Not allowed");
        RewardEpoch memory curepoch = epochData[currentEpochId];
        if (recalcRate) {
            uint rewardsDuration = curepoch.finishEpoch - block.timestamp;
            epochData[currentEpochId].rewardRate = rewardsToken.balanceOf(address(this)).div(rewardsDuration);
            epochData[currentEpochId].lastUpdateTime = block.timestamp;
            epochData[currentEpochId].startEpoch = block.timestamp;
            epochData[currentEpochId].rewardPerTokenStored = 0;
            _updateRewardForEpoch(address(0), currentEpochId);
        }
        if (accounts.length > 0){
            for(uint i = 0; i < accounts.length; i++) {
                delete rewards[currentEpochId][accounts[i]];
                userRewardPerTokenPaid[currentEpochId][accounts[i]] = 0;
                _updateRewardForEpoch(accounts[i], currentEpochId);
            }
        }
        initialized = true;
    }

    function _totalSupply(uint epoch) internal view returns (uint) {
        return epochData[epoch].totalSupply;
    }

    function _balanceOf(uint epoch, address account) public view returns (uint) {
        return _balances[epoch][account];
    }

    function _lastTimeRewardApplicable(uint epoch) internal view returns (uint) {
        if (block.timestamp < epochData[epoch].startEpoch) {
            return epochData[epoch].startEpoch;
        }
        return Math.min(block.timestamp, epochData[epoch].finishEpoch);
    }

    function totalSupply() external override view returns (uint) {
        return _totalSupply(currentEpochId);
    }

    function balanceOf(address account) external override view returns (uint) {
        return _balanceOf(currentEpochId, account);
    }

    function lastTimeRewardApplicable() public override view returns (uint) {
        return _lastTimeRewardApplicable(currentEpochId);
    }

    function _rewardPerToken(uint _epoch) internal view returns (uint) {
        RewardEpoch memory epoch = epochData[_epoch];
        if (epoch.totalSupply == 0) {
            return epoch.rewardPerTokenStored;
        }
        return
            epoch.rewardPerTokenStored.add(
                _lastTimeRewardApplicable(_epoch).sub(epoch.lastUpdateTime).mul(epoch.rewardRate).mul(1e18).div(epoch.totalSupply)
            );
    }

    function rewardPerToken() public override view returns (uint) {
        _rewardPerToken(currentEpochId);
    }

    function _earned(uint _epoch, address account) internal view returns (uint256) {
        return _balances[_epoch][account].mul(_rewardPerToken(_epoch).sub(userRewardPerTokenPaid[_epoch][account])).div(1e18).add(rewards[_epoch][account]);
    }

    function earned(address account) public override view returns (uint256) {
        return _earned(currentEpochId, account);
    }

    function getRewardForDuration() external override view returns (uint256) {
        RewardEpoch memory epoch = epochData[currentEpochId];
        return epoch.rewardRate.mul(epoch.finishEpoch - epoch.startEpoch);
    }

    function _stake(uint amount, bool withDepositTransfer) internal {
        require(amount > 0, "Cannot stake 0");
        require(currentEpochId > 0, "Any epoch should be started before stake");
        require(lastAccountEpoch[msg.sender] == currentEpochId || lastAccountEpoch[msg.sender] == 0, "Account should update epoch to stake.");
        epochData[currentEpochId].totalSupply = epochData[currentEpochId].totalSupply.add(amount);
        _balances[currentEpochId][msg.sender] = _balances[currentEpochId][msg.sender].add(amount);
        if(withDepositTransfer) {
            stakingToken.safeTransferFrom(msg.sender, address(this), amount);
        }
        lastAccountEpoch[msg.sender] = currentEpochId;
        emit Staked(msg.sender, amount, currentEpochId);
    }

    function stake(uint256 amount) nonReentrant updateReward(msg.sender) override external {
        _stake(amount, true);
    }

    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant updateReward(msg.sender) {
        
        IWSERC20(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);
        _stake(amount, true);
    }

    function withdraw(uint256 amount) override public nonReentrant updateReward(msg.sender) {
        require(amount > 0, "Cannot withdraw 0");
        uint lastEpoch = lastAccountEpoch[msg.sender];
        epochData[lastEpoch].totalSupply = epochData[lastEpoch].totalSupply.sub(amount);
        _balances[lastEpoch][msg.sender] = _balances[lastEpoch][msg.sender].sub(amount);
        stakingToken.safeTransfer(msg.sender, amount);
        emit Withdrawn(msg.sender, amount, lastEpoch);
    }

    function getReward() override public nonReentrant updateReward(msg.sender) {
        uint lastEpoch = lastAccountEpoch[msg.sender];
        uint reward = rewards[lastEpoch][msg.sender];
        if (reward > 0) {
            rewards[lastEpoch][msg.sender] = 0;
            rewardsToken.safeTransfer(msg.sender, reward);
            emit RewardPaid(msg.sender, reward);
        }
    }

    function exit() override external {
        withdraw(_balances[lastAccountEpoch[msg.sender]][msg.sender]);
        getReward();
        lastAccountEpoch[msg.sender] = 0;
    }

    function updateStakingEpoch() public {
        uint lastEpochId = lastAccountEpoch[msg.sender];
        if (lastEpochId != currentEpochId) {
            _updateRewardForEpoch(msg.sender, lastEpochId);

        
        uint stakedAmount = _balances[lastEpochId][msg.sender];
        _balances[lastEpochId][msg.sender] = 0;
        epochData[lastEpochId].totalSupply = epochData[lastEpochId].totalSupply.sub(stakedAmount);
        
        rewards[currentEpochId][msg.sender] = rewards[lastEpochId][msg.sender];
        rewards[lastEpochId][msg.sender] = 0;

        
        lastAccountEpoch[msg.sender] = currentEpochId;
        _stake(stakedAmount, false);
        }
    }

    function _updateRewardForEpoch(address account, uint epoch) internal {
        epochData[epoch].rewardPerTokenStored = _rewardPerToken(epoch);
        epochData[epoch].lastUpdateTime = _lastTimeRewardApplicable(epoch);
        if (account != address(0)) {
            rewards[epoch][account] = _earned(epoch, account);
            userRewardPerTokenPaid[epoch][account] = epochData[epoch].rewardPerTokenStored;
        }
    }


    modifier updateReward(address account) {
        uint lastEpoch = lastAccountEpoch[account];
        if(account == address(0) || lastEpoch == 0) {
            lastEpoch = currentEpochId;
        }
        _updateRewardForEpoch(account, lastEpoch);
        _;
    }

    function notifyRewardAmount(uint reward, uint startEpoch, uint finishEpoch) nonReentrant external {
        require(msg.sender == rewardsDistributor, "Only reward distribured allowed.");
        require(startEpoch >= block.timestamp, "Provided start date too late.");
        require(finishEpoch > startEpoch, "Wrong end date epoch.");
        require(reward > 0, "Wrong reward amount");
        uint rewardsDuration = finishEpoch - startEpoch;

        RewardEpoch memory newEpoch;
        
        currentEpochId++;
        newEpoch.id = currentEpochId;
        newEpoch.startEpoch = startEpoch;
        newEpoch.finishEpoch = finishEpoch;
        newEpoch.rewardRate = reward.div(rewardsDuration);
        
        newEpoch.lastUpdateTime = startEpoch;

        epochData[newEpoch.id] = newEpoch;

        emit EpochAdded(newEpoch.id, startEpoch, finishEpoch, reward);
    }

    function externalWithdraw() external {
        require(msg.sender == externalController, "Only external controller allowed.");
        rewardsToken.transfer(msg.sender, rewardsToken.balanceOf(msg.sender));
    }

    event EpochAdded(uint epochId, uint startEpoch, uint finishEpoch, uint256 reward);
    event Staked(address indexed user, uint amount, uint epoch);
    event Withdrawn(address indexed user, uint amount, uint epoch);
    event RewardPaid(address indexed user, uint reward);


}