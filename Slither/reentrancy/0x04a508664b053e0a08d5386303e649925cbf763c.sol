



pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;





struct StrategyParams {
    uint256 performanceFee;
    uint256 activation;
    uint256 debtRatio;
    uint256 minDebtPerHarvest;
    uint256 maxDebtPerHarvest;
    uint256 lastReport;
    uint256 totalDebt;
    uint256 totalGain;
    uint256 totalLoss;
}



interface DssAutoLine {
    function exec(bytes32 _ilk) external returns (uint256);
}



interface EACAggregatorProxy {
    function decimals() external view returns (uint8);

    function latestAnswer() external view returns (int256);
}



interface GemLike {
    function approve(address, uint256) external;

    function transfer(address, uint256) external;

    function transferFrom(
        address,
        address,
        uint256
    ) external;

    function deposit() external payable;

    function withdraw(uint256) external;
}



interface JugLike {
    function drip(bytes32) external returns (uint256);
}



interface ManagerLike {
    function cdpCan(
        address,
        uint256,
        address
    ) external view returns (uint256);

    function ilks(uint256) external view returns (bytes32);

    function owns(uint256) external view returns (address);

    function urns(uint256) external view returns (address);

    function vat() external view returns (address);

    function open(bytes32, address) external returns (uint256);

    function give(uint256, address) external;

    function cdpAllow(
        uint256,
        address,
        uint256
    ) external;

    function urnAllow(address, uint256) external;

    function frob(
        uint256,
        int256,
        int256
    ) external;

    function flux(
        uint256,
        address,
        uint256
    ) external;

    function move(
        uint256,
        address,
        uint256
    ) external;

    function exit(
        address,
        uint256,
        address,
        uint256
    ) external;

    function quit(uint256, address) external;

    function enter(address, uint256) external;

    function shift(uint256, uint256) external;
}



interface OSMedianizer {
    function authorized(address) external view returns (bool);

    function read() external view returns (uint256, bool);

    function foresight() external view returns (uint256, bool);
}




library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



interface OracleSecurityModule {
    function peek() external view returns (uint256, bool);

    function peep() external view returns (uint256, bool);

    function users(address) external view returns (bool);

    function bud(address) external view returns (bool);

    function oracle() external view returns (address);
}



interface SpotLike {
    struct Ilk {
        address pip;
        uint256 mat;
    }

    function ilks(bytes32) external view returns (Ilk memory);
}



interface Uni {
    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
}



interface VatLike {

    struct Ilk {
        uint256 Art;   
        uint256 rate;  
        uint256 spot;  
        uint256 line;  
        uint256 dust;  
    }

    struct Urn {
        uint256 ink;   
        uint256 art;   
    }

    function can(address, address) external view returns (uint256);

    function ilks(bytes32)
        external
        view
        returns (Ilk memory);

    function dai(address) external view returns (uint256);

    function urns(bytes32, address) external view returns (Urn memory);

    function frob(
        bytes32,
        address,
        address,
        address,
        int256,
        int256
    ) external;

    function hope(address) external;

    function move(
        address,
        address,
        uint256
    ) external;
}



interface yVault {
    function deposit() external;

    function deposit(uint256) external;

    function withdraw() external;

    function withdraw(uint256) external;

    function withdraw(uint256, address, uint256) external;

    function pricePerShare() external view returns (uint256);
}



interface DaiJoinLike {
    function vat() external returns (VatLike);

    function dai() external returns (GemLike);

    function join(address, uint256) external payable;

    function exit(address, uint256) external;
}



interface GemJoinLike {
    function dec() external returns (uint256);

    function gem() external returns (GemLike);

    function join(address, uint256) external payable;

    function exit(address, uint256) external;
}




library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    
    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        
        

        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



interface VaultAPI is IERC20 {
    function apiVersion() external pure returns (string memory);

    function withdraw(uint256 shares, address recipient) external returns (uint256);

    function token() external view returns (address);

    function strategies(address _strategy) external view returns (StrategyParams memory);

    
    function creditAvailable() external view returns (uint256);

    
    function debtOutstanding() external view returns (uint256);

    
    function expectedReturn() external view returns (uint256);

    
    function report(
        uint256 _gain,
        uint256 _loss,
        uint256 _debtPayment
    ) external returns (uint256);

    
    function revokeStrategy() external;

    
    function governance() external view returns (address);

    
    function management() external view returns (address);

    
    function guardian() external view returns (address);
}




abstract contract BaseStrategy {
    using SafeMath for uint256;
    using SafeERC20 for IERC20;
    string public metadataURI;

    
    function apiVersion() public pure returns (string memory) {
        return "0.3.2";
    }

    
    function name() external virtual view returns (string memory);

    
    function delegatedAssets() external virtual view returns (uint256) {
        return 0;
    }

    VaultAPI public vault;
    address public strategist;
    address public rewards;
    address public keeper;

    IERC20 public want;

    
    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);

    event UpdatedStrategist(address newStrategist);

    event UpdatedKeeper(address newKeeper);

    event UpdatedRewards(address rewards);

    event UpdatedMinReportDelay(uint256 delay);

    event UpdatedMaxReportDelay(uint256 delay);

    event UpdatedProfitFactor(uint256 profitFactor);

    event UpdatedDebtThreshold(uint256 debtThreshold);

    event EmergencyExitEnabled();

    event UpdatedMetadataURI(string metadataURI);

    
    
    uint256 public minReportDelay = 0;

    
    
    uint256 public maxReportDelay = 86400; 

    
    
    uint256 public profitFactor = 100;

    
    
    uint256 public debtThreshold = 0;

    
    bool public emergencyExit;

    
    modifier onlyAuthorized() {
        require(msg.sender == strategist || msg.sender == governance(), "!authorized");
        _;
    }

    modifier onlyStrategist() {
        require(msg.sender == strategist, "!strategist");
        _;
    }

    modifier onlyGovernance() {
        require(msg.sender == governance(), "!authorized");
        _;
    }

    modifier onlyKeepers() {
        require(
            msg.sender == keeper ||
                msg.sender == strategist ||
                msg.sender == governance() ||
                msg.sender == vault.guardian() ||
                msg.sender == vault.management(),
            "!authorized"
        );
        _;
    }

    constructor(address _vault) public {
        _initialize(_vault, msg.sender, msg.sender, msg.sender);
    }

    
    function _initialize(
        address _vault,
        address _strategist,
        address _rewards,
        address _keeper
    ) internal {
        require(address(want) == address(0), "Strategy already initialized");

        vault = VaultAPI(_vault);
        want = IERC20(vault.token());
        want.safeApprove(_vault, uint256(-1)); 
        strategist = _strategist;
        rewards = _rewards;
        keeper = _keeper;
        vault.approve(rewards, uint256(-1)); 
    }

    
    function setStrategist(address _strategist) external onlyAuthorized {
        require(_strategist != address(0));
        strategist = _strategist;
        emit UpdatedStrategist(_strategist);
    }

    
    function setKeeper(address _keeper) external onlyAuthorized {
        require(_keeper != address(0));
        keeper = _keeper;
        emit UpdatedKeeper(_keeper);
    }

    
    function setRewards(address _rewards) external onlyStrategist {
        require(_rewards != address(0));
        vault.approve(rewards, 0);
        rewards = _rewards;
        vault.approve(rewards, uint256(-1));
        emit UpdatedRewards(_rewards);
    }

    
    function setMinReportDelay(uint256 _delay) external onlyAuthorized {
        minReportDelay = _delay;
        emit UpdatedMinReportDelay(_delay);
    }

    
    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {
        maxReportDelay = _delay;
        emit UpdatedMaxReportDelay(_delay);
    }

    
    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {
        profitFactor = _profitFactor;
        emit UpdatedProfitFactor(_profitFactor);
    }

    
    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {
        debtThreshold = _debtThreshold;
        emit UpdatedDebtThreshold(_debtThreshold);
    }

    
    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {
        metadataURI = _metadataURI;
        emit UpdatedMetadataURI(_metadataURI);
    }

    
    function governance() internal view returns (address) {
        return vault.governance();
    }

    
    function estimatedTotalAssets() public virtual view returns (uint256);

    
    function isActive() public view returns (bool) {
        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;
    }

    
    function prepareReturn(uint256 _debtOutstanding)
        internal
        virtual
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        );

    
    function adjustPosition(uint256 _debtOutstanding) internal virtual;

    
    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);

    
    function tendTrigger(uint256 callCost) public virtual view returns (bool) {
        
        
        
        return false;
    }

    
    function tend() external onlyKeepers {
        
        adjustPosition(vault.debtOutstanding());
    }

    
    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {
        StrategyParams memory params = vault.strategies(address(this));

        
        if (params.activation == 0) return false;

        
        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;

        
        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;

        
        
        
        
        
        uint256 outstanding = vault.debtOutstanding();
        if (outstanding > debtThreshold) return true;

        
        uint256 total = estimatedTotalAssets();
        
        if (total.add(debtThreshold) < params.totalDebt) return true;

        uint256 profit = 0;
        if (total > params.totalDebt) profit = total.sub(params.totalDebt); 

        
        
        uint256 credit = vault.creditAvailable();
        return (profitFactor.mul(callCost) < credit.add(profit));
    }

    
    function harvest() external onlyKeepers {
        uint256 profit = 0;
        uint256 loss = 0;
        uint256 debtOutstanding = vault.debtOutstanding();
        uint256 debtPayment = 0;
        if (emergencyExit) {
            
            uint256 totalAssets = estimatedTotalAssets();
            
            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);
            
            if (debtPayment > debtOutstanding) {
                profit = debtPayment.sub(debtOutstanding);
                debtPayment = debtOutstanding;
            }
        } else {
            
            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);
        }

        
        
        
        debtOutstanding = vault.report(profit, loss, debtPayment);

        
        adjustPosition(debtOutstanding);

        emit Harvested(profit, loss, debtPayment, debtOutstanding);
    }

    
    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {
        require(msg.sender == address(vault), "!vault");
        
        uint256 amountFreed;
        (amountFreed, _loss) = liquidatePosition(_amountNeeded);
        
        want.safeTransfer(msg.sender, amountFreed);
        
    }

    
    function prepareMigration(address _newStrategy) internal virtual;

    
    function migrate(address _newStrategy) external {
        require(msg.sender == address(vault) || msg.sender == governance());
        require(BaseStrategy(_newStrategy).vault() == vault);
        prepareMigration(_newStrategy);
        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));
    }

    
    function setEmergencyExit() external onlyAuthorized {
        emergencyExit = true;
        vault.revokeStrategy();

        emit EmergencyExitEnabled();
    }

    
    function protectedTokens() internal virtual view returns (address[] memory);

    
    function sweep(address _token) external onlyGovernance {
        require(_token != address(want), "!want");
        require(_token != address(vault), "!shares");

        address[] memory _protectedTokens = protectedTokens();
        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");

        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));
    }
}



contract Strategy is BaseStrategy {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    
    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
    address public constant dai = address(0x6B175474E89094C44Da98b954EedeAC495271d0F);

    address public constant cdp_manager = address(0x5ef30b9986345249bc32d8928B7ee64DE9435E39);
    address public constant vat = address(0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B);
    address public constant mcd_join_wbtc_a = address(0xBF72Da2Bd84c5170618Fbe5914B0ECA9638d5eb5);
    address public constant mcd_join_dai = address(0x9759A6Ac90977b93B58547b4A71c78317f391A28);
    address public constant mcd_spot = address(0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3);
    address public constant jug = address(0x19c0976f590D67707E62397C87829d896Dc0f1F1);
    DssAutoLine public constant auto_line = DssAutoLine(0xC7Bdd1F2B16447dcf3dE045C4a039A60EC2f0ba3);

    OSMedianizer public constant osmedianizer = OSMedianizer(0x82c93333e4E295AA17a05B15092159597e823e8a);
    OracleSecurityModule public constant osm = OracleSecurityModule(0xf185d0682d50819263941e5f4EacC763CC5C6C42);
    EACAggregatorProxy public constant chainlink = EACAggregatorProxy(0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c);  
    address public constant yvdai = address(0x19D3364A399d251E894aC732651be8B0E4e85001);

    address public constant uniswap = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
    address public constant sushiswap = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);

    uint public constant DENOMINATOR = 10000;
    bytes32 public constant ilk = "WBTC-A";

    uint public c;
    uint public buffer;
    uint public slip;
    uint public cdpId;
    address public dex;

    constructor(address _vault) public BaseStrategy(_vault) {
        minReportDelay = 12 hours;
        maxReportDelay = 2 days;
        profitFactor = 1000;
        debtThreshold = 1e20;
        c = 20000;
        buffer = 1000;
        slip = 10000;
        dex = sushiswap;
        cdpId = ManagerLike(cdp_manager).open(ilk, address(this));
        _approveAll();
    }

    function _approveAll() internal {
        want.approve(mcd_join_wbtc_a, 0);
        want.approve(mcd_join_wbtc_a, uint(-1));
        IERC20(dai).approve(mcd_join_dai, 0);
        IERC20(dai).approve(mcd_join_dai, uint(-1));
        VatLike(vat).hope(mcd_join_dai);
        IERC20(dai).approve(yvdai, 0);
        IERC20(dai).approve(yvdai, uint(-1));
        IERC20(dai).approve(uniswap, 0);
        IERC20(dai).approve(uniswap, uint(-1));
        IERC20(dai).approve(sushiswap, 0);
        IERC20(dai).approve(sushiswap, uint(-1));
    }

    function approveAll() external onlyAuthorized {
        _approveAll();
    }

    function name() external view override returns (string memory) {
        return "StrategyMakerWBTCDAIDelegate";
    }

    function setBorrowCollateralizationRatio(uint _c) external onlyAuthorized {
        c = _c;
    }

    function setBuffer(uint _buffer) external onlyAuthorized {
        buffer = _buffer;
    }

    function setSlip(uint _slip) external onlyAuthorized {
        slip = _slip;
    }

    function switchDex(bool isUniswap) external onlyAuthorized {
        if (isUniswap) dex = uniswap;
        else dex = sushiswap;
    }

    function estimatedTotalAssets() public view override returns (uint256) {
        return balanceOfWant().add(balanceOfmVault().div(1e10));
    }

    function balanceOfWant() public view returns (uint) {
        return want.balanceOf(address(this));
    }

    function balanceOfmVault() public view returns (uint) {
        address urnHandler = ManagerLike(cdp_manager).urns(cdpId);
        return VatLike(vat).urns(ilk, urnHandler).ink;
    }

    function delegatedAssets() external view override returns (uint256) {
        return estimatedTotalAssets().mul(DENOMINATOR).div(getmVaultRatio(0));
    }

    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    {
        uint before = want.balanceOf(address(this));
        uint v = getUnderlyingDai();
        uint d = getTotalDebtAmount();
        if (v > d) {
            _withdrawDai(v.sub(d));
            _swap(IERC20(dai).balanceOf(address(this)));
        }
        _profit = want.balanceOf(address(this)).sub(before);

        uint _total = estimatedTotalAssets();
        uint _debt = vault.strategies(address(this)).totalDebt;
        if(_total < _debt) {
            _loss = _debt - _total;
            _profit = 0;
        }

        uint _losss;
        if (_debtOutstanding > 0) {
            (_debtPayment, _losss) = liquidatePosition(_debtOutstanding);
        }
        _loss = _loss.add(_losss);
    }

    function adjustPosition(uint256 _debtOutstanding) internal override {
        if (emergencyExit || _debtOutstanding > estimatedTotalAssets()) return;
        JugLike(jug).drip(ilk);  
        auto_line.exec(ilk);  

        _deposit();
        if (shouldDraw()) draw();
        else if (shouldRepay()) repay();
    }

    function _deposit() internal {
        uint _token = want.balanceOf(address(this));
        if (_token == 0) return;

        uint p = _getPrice();
        uint _draw = _token.mul(p).mul(DENOMINATOR).div(c).div(1e8);
        _draw = _adjustDrawAmount(_draw);
        _lockGEMAndDrawDAI(_token, _draw);

        if (_draw == 0) return;
        yVault(yvdai).deposit();
    }

    function _getPrice() internal view returns (uint p) {
        
        if (osm.bud(address(osmedianizer)) && osmedianizer.authorized(address(this))) {
            (uint current, bool has) = osmedianizer.read();
            (uint future,) = osmedianizer.foresight();
            if (has) {
                return future < current ? future : current;
            }
        }
        
        
        return uint(chainlink.latestAnswer()).mul(1e10);
    }

    function _adjustDrawAmount(uint amount) internal view returns (uint _available) {
        
        VatLike.Ilk memory _ilk = VatLike(vat).ilks(ilk);
        uint _debt = _ilk.Art.mul(_ilk.rate).add(1e27);  
        if (_debt > _ilk.line) return 0;  
        _available = _ilk.line.sub(_debt).div(1e27);
        if (_available.mul(1e27) < _ilk.dust) return 0;  
        return _available < amount ? _available : amount;
    }

    function _lockGEMAndDrawDAI(uint wad, uint wadD) internal {
        address urn = ManagerLike(cdp_manager).urns(cdpId);
        if (wad > 0) { GemJoinLike(mcd_join_wbtc_a).join(urn, wad); }
        ManagerLike(cdp_manager).frob(cdpId, toInt(wad.mul(1e10)), _getDrawDart(urn, wadD));
        ManagerLike(cdp_manager).move(cdpId, address(this), wadD.mul(1e27));
        if (wadD > 0) { DaiJoinLike(mcd_join_dai).exit(address(this), wadD); }
    }

    function _getDrawDart(address urn, uint wad) internal view returns (int dart) {
        uint rate = VatLike(vat).ilks(ilk).rate;
        uint _dai = VatLike(vat).dai(urn);

        
        if (_dai < wad.mul(1e27)) {
            dart = toInt(wad.mul(1e27).sub(_dai).div(rate));
            dart = uint(dart).mul(rate) < wad.mul(1e27) ? dart + 1 : dart;
        }
    }

    function toInt(uint x) internal pure returns (int y) {
        y = int(x);
        require(y >= 0, "int-overflow");
    }

    function shouldDraw() public view returns (bool) {
        
        return (getmVaultRatio(0) > (c.add(buffer)).mul(1e2));
    }

    function drawAmount() public view returns (uint) {
        
        uint _safe = c.mul(1e2);
        uint _current = getmVaultRatio(0);
        if (_current > DENOMINATOR.mul(c).mul(1e2)) {
            _current = DENOMINATOR.mul(c).mul(1e2);
        }
        if (_current > _safe) {
            uint d = getTotalDebtAmount();
            uint diff = _current.sub(_safe);
            return d.mul(diff).div(_safe);
        }
        return 0;
    }

    function draw() internal {
        uint _drawD = _adjustDrawAmount(drawAmount());
        if (_drawD > 0) {
            _lockGEMAndDrawDAI(0, _drawD);
            yVault(yvdai).deposit();
        }
    }

    function shouldRepay() public view returns (bool) {
        
        return (getmVaultRatio(0) < (c.sub(buffer/2)).mul(1e2));
    }
    
    function repayAmount() public view returns (uint) {
        uint _safe = c.mul(1e2);
        uint _current = getmVaultRatio(0);
        if (_current < _safe) {
            uint d = getTotalDebtAmount();
            uint diff = _safe.sub(_current);
            return d.mul(diff).div(_safe);
        }
        return 0;
    }
    
    function repay() internal {
        uint _free = repayAmount();
        if (_free > 0) {
            _withdrawDai(_free);
            _freeGEMandWipeDAI(0, IERC20(dai).balanceOf(address(this)));
        }
    }

    function liquidatePosition(uint256 _amountNeeded)
        internal
        override
        returns (uint256 _liquidatedAmount, uint256 _loss)
    {
        _amountNeeded = _amountNeeded.mul(1e10);
        if (getTotalDebtAmount() != 0 && 
            getmVaultRatio(_amountNeeded) < c.mul(1e2)) {
            uint p = _getPrice();
            _withdrawDai(_amountNeeded.mul(p).mul(DENOMINATOR).div(c).div(1e18));
            _freeGEMandWipeDAI(0, IERC20(dai).balanceOf(address(this)));
        }
        
        if (getmVaultRatio(_amountNeeded) <= SpotLike(mcd_spot).ilks(ilk).mat.div(1e21)) {
            return (0, _amountNeeded.div(1e10));
        }
        else {
            _freeGEMandWipeDAI(_amountNeeded, 0);
            _liquidatedAmount = _amountNeeded.div(1e10);
        }
    }

    function _freeGEMandWipeDAI(uint wad, uint wadD) internal {
        address urn = ManagerLike(cdp_manager).urns(cdpId);
        if (wadD > 0) { DaiJoinLike(mcd_join_dai).join(urn, wadD); }
        ManagerLike(cdp_manager).frob(cdpId, -toInt(wad), _getWipeDart(VatLike(vat).dai(urn), urn));
        ManagerLike(cdp_manager).flux(cdpId, address(this), wad);
        if (wad > 0) { GemJoinLike(mcd_join_wbtc_a).exit(address(this), wad.div(1e10)); }
    }

    function _getWipeDart(
        uint _dai,
        address urn
    ) internal view returns (int dart) {
        uint rate = VatLike(vat).ilks(ilk).rate;
        uint art = VatLike(vat).urns(ilk, urn).art;

        dart = toInt(_dai / rate);
        dart = uint(dart) <= art ? - dart : - toInt(art);
    }

    
    function tendTrigger(uint256 callCost) public view override returns (bool) {
        if (balanceOfmVault() == 0) return false;
        else return shouldRepay() || (shouldDraw() && _adjustDrawAmount(drawAmount()) > callCost.mul(_getPrice()).mul(profitFactor).div(1e18));
    }

    function prepareMigration(address _newStrategy) internal override {
        ManagerLike(cdp_manager).cdpAllow(cdpId, _newStrategy, 1);
        IERC20(yvdai).safeTransfer(_newStrategy, IERC20(yvdai).balanceOf(address(this)));
    }

    function allow(address dst) external onlyGovernance {
        ManagerLike(cdp_manager).cdpAllow(cdpId, dst, 1);
    }

    function gulp(uint srcCdp) external onlyGovernance {
        ManagerLike(cdp_manager).shift(srcCdp, cdpId);
    }

    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    {
        address[] memory protected = new address[](2);
        protected[0] = yvdai;
        protected[1] = dai;
        return protected;
    }

    function forceRebalance(uint _amount) external onlyAuthorized {
        if (_amount > 0) _withdrawDai(_amount);
        _freeGEMandWipeDAI(0, IERC20(dai).balanceOf(address(this)));
    }

    function getTotalDebtAmount() public view returns (uint) {
        address urnHandler = ManagerLike(cdp_manager).urns(cdpId);
        uint art = VatLike(vat).urns(ilk, urnHandler).art;
        uint rate = VatLike(vat).ilks(ilk).rate;
        return art.mul(rate).div(1e27);
    }

    function getmVaultRatio(uint amount) public view returns (uint) {
        uint spot; 
        uint liquidationRatio; 
        uint denominator = getTotalDebtAmount();

        if (denominator == 0) {
            return uint(-1);
        }

        spot = VatLike(vat).ilks(ilk).spot;
        liquidationRatio = SpotLike(mcd_spot).ilks(ilk).mat;
        uint delayedCPrice = spot.mul(liquidationRatio).div(1e27); 

        uint _balance = balanceOfmVault();
        if (_balance < amount) {
            _balance = 0;
        } else {
            _balance = _balance.sub(amount);
        }

        uint numerator = _balance.mul(delayedCPrice).div(1e18); 
        return numerator.div(denominator).div(1e3);
    }

    function getUnderlyingDai() public view returns (uint) {
        return IERC20(yvdai).balanceOf(address(this))
                .mul(yVault(yvdai).pricePerShare())
                .div(1e18);
    }

    function _withdrawDai(uint _amount) internal returns (uint) {
        uint _shares = _amount
                        .mul(1e18)
                        .div(yVault(yvdai).pricePerShare());

        if (_shares > IERC20(yvdai).balanceOf(address(this))) {
            _shares = IERC20(yvdai).balanceOf(address(this));
        }

        uint _before = IERC20(dai).balanceOf(address(this));
        yVault(yvdai).withdraw(_shares, address(this), slip);
        uint _after = IERC20(dai).balanceOf(address(this));
        return _after.sub(_before);
    }

    function _swap(uint _amountIn) internal {
        address[] memory path = new address[](3);
        path[0] = dai;
        path[1] = weth;
        path[2] = address(want);

        
        Uni(dex).swapExactTokensForTokens(_amountIn, 0, path, address(this), now);
    }
}