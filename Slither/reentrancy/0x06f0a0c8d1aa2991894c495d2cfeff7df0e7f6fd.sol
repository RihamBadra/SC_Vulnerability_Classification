

pragma solidity ^0.5.17;




contract Context {
    
    
    constructor () internal { }
    

    function _msgSender() internal view returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view returns (bytes memory) {
        this; 
        return msg.data;
    }
}





contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        _owner = _msgSender();
        emit OwnershipTransferred(address(0), _owner);
    }

    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(isOwner(), "Ownable: caller is not the owner");
        _;
    }

    
    function isOwner() public view returns (bool) {
        return _msgSender() == _owner;
    }

    
    function renounceOwnership() public onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public onlyOwner {
        _transferOwnership(newOwner);
    }

    
    function _transferOwnership(address newOwner) internal {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}


interface IERC165 {
    
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
}


contract IERC721 is IERC165 {
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

    
    function balanceOf(address owner) public view returns (uint256 balance);

    
    function ownerOf(uint256 tokenId) public view returns (address owner);

    
    function safeTransferFrom(address from, address to, uint256 tokenId) public;
    
    function transferFrom(address from, address to, uint256 tokenId) public;
    function approve(address to, uint256 tokenId) public;
    function getApproved(uint256 tokenId) public view returns (address operator);

    function setApprovalForAll(address operator, bool _approved) public;
    function isApprovedForAll(address owner, address operator) public view returns (bool);


    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;
}


contract IERC721Receiver {
    
    function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data)
    public returns (bytes4);
}


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        
        
        
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        
        assembly { codehash := extcodehash(account) }
        return (codehash != 0x0 && codehash != accountHash);
    }

    
    function toPayable(address account) internal pure returns (address payable) {
        return address(uint160(account));
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call.value(amount)("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}


library Counters {
    using SafeMath for uint256;

    struct Counter {
        
        
        
        uint256 _value; 
    }

    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }

    function increment(Counter storage counter) internal {
        counter._value += 1;
    }

    function decrement(Counter storage counter) internal {
        counter._value = counter._value.sub(1);
    }
}


contract ERC165 is IERC165 {
    
    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;

    
    mapping(bytes4 => bool) private _supportedInterfaces;

    constructor () internal {
        
        
        _registerInterface(_INTERFACE_ID_ERC165);
    }

    
    function supportsInterface(bytes4 interfaceId) external view returns (bool) {
        return _supportedInterfaces[interfaceId];
    }

    
    function _registerInterface(bytes4 interfaceId) internal {
        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");
        _supportedInterfaces[interfaceId] = true;
    }
}


contract ERC721 is Context, ERC165, IERC721 {
    using SafeMath for uint256;
    using Address for address;
    using Counters for Counters.Counter;

    
    
    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;

    
    mapping (uint256 => address) private _tokenOwner;

    
    mapping (uint256 => address) private _tokenApprovals;

    
    mapping (address => Counters.Counter) private _ownedTokensCount;

    
    mapping (address => mapping (address => bool)) private _operatorApprovals;

    
    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;

    constructor () public {
        
        _registerInterface(_INTERFACE_ID_ERC721);
    }

    
    function balanceOf(address owner) public view returns (uint256) {
        require(owner != address(0), "ERC721: balance query for the zero address");

        return _ownedTokensCount[owner].current();
    }

    
    function ownerOf(uint256 tokenId) public view returns (address) {
        address owner = _tokenOwner[tokenId];
        require(owner != address(0), "ERC721: owner query for nonexistent token");

        return owner;
    }

    
    function approve(address to, uint256 tokenId) public {
        address owner = ownerOf(tokenId);
        require(to != owner, "ERC721: approval to current owner");

        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),
            "ERC721: approve caller is not owner nor approved for all"
        );

        _tokenApprovals[tokenId] = to;
        emit Approval(owner, to, tokenId);
    }

    
    function getApproved(uint256 tokenId) public view returns (address) {
        require(_exists(tokenId), "ERC721: approved query for nonexistent token");

        return _tokenApprovals[tokenId];
    }

    
    function setApprovalForAll(address to, bool approved) public {
        require(to != _msgSender(), "ERC721: approve to caller");

        _operatorApprovals[_msgSender()][to] = approved;
        emit ApprovalForAll(_msgSender(), to, approved);
    }

    
    function isApprovedForAll(address owner, address operator) public view returns (bool) {
        return _operatorApprovals[owner][operator];
    }

    
    function transferFrom(address from, address to, uint256 tokenId) public {
        
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

        _transferFrom(from, to, tokenId);
    }

    
    function safeTransferFrom(address from, address to, uint256 tokenId) public {
        safeTransferFrom(from, to, tokenId, "");
    }

    
    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        _safeTransferFrom(from, to, tokenId, _data);
    }

    
    function _safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) internal {
        _transferFrom(from, to, tokenId);
        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _exists(uint256 tokenId) internal view returns (bool) {
        address owner = _tokenOwner[tokenId];
        return owner != address(0);
    }

    
    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {
        require(_exists(tokenId), "ERC721: operator query for nonexistent token");
        address owner = ownerOf(tokenId);
        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));
    }

    
    function _safeMint(address to, uint256 tokenId) internal {
        _safeMint(to, tokenId, "");
    }

    
    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal {
        _mint(to, tokenId);
        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");
    }

    
    function _mint(address to, uint256 tokenId) internal {
        require(to != address(0), "ERC721: mint to the zero address");
        require(!_exists(tokenId), "ERC721: token already minted");

        _tokenOwner[tokenId] = to;
        _ownedTokensCount[to].increment();

        emit Transfer(address(0), to, tokenId);
    }

    
    function _burn(address owner, uint256 tokenId) internal {
        require(ownerOf(tokenId) == owner, "ERC721: burn of token that is not own");

        _clearApproval(tokenId);

        _ownedTokensCount[owner].decrement();
        _tokenOwner[tokenId] = address(0);

        emit Transfer(owner, address(0), tokenId);
    }

    
    function _burn(uint256 tokenId) internal {
        _burn(ownerOf(tokenId), tokenId);
    }

    
    function _transferFrom(address from, address to, uint256 tokenId) internal {
        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");
        require(to != address(0), "ERC721: transfer to the zero address");

        _clearApproval(tokenId);

        _ownedTokensCount[from].decrement();
        _ownedTokensCount[to].increment();

        _tokenOwner[tokenId] = to;

        emit Transfer(from, to, tokenId);
    }

    
    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
        internal returns (bool)
    {
        if (!to.isContract()) {
            return true;
        }

        bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);
        return (retval == _ERC721_RECEIVED);
    }

    
    function _clearApproval(uint256 tokenId) private {
        if (_tokenApprovals[tokenId] != address(0)) {
            _tokenApprovals[tokenId] = address(0);
        }
    }
}



contract IERC721Metadata is IERC721 {
    function name() external view returns (string memory);
    function symbol() external view returns (string memory);
    function tokenURI(uint256 tokenId) external view returns (string memory);
}

contract ERC721Metadata is Context, ERC165, ERC721, IERC721Metadata {
    
    string private _name;

    
    string private _symbol;

    
    mapping(uint256 => string) private _tokenURIs;
    
    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;

    
    constructor (string memory name, string memory symbol) public {
        _name = name;
        _symbol = symbol;

        
        _registerInterface(_INTERFACE_ID_ERC721_METADATA);
    }

    
    function name() external view returns (string memory) {
        return _name;
    }

    
    function symbol() external view returns (string memory) {
        return _symbol;
    }


    


    
    function _setTokenURI(uint256 tokenId, string memory uri) internal {
        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
        _tokenURIs[tokenId] = uri;
    }

    
    function _burn(address owner, uint256 tokenId) internal {
        super._burn(owner, tokenId);

        
        if (bytes(_tokenURIs[tokenId]).length != 0) {
            delete _tokenURIs[tokenId];
        }
    }
}


library Utilities {
	
    function concat(bytes memory a, bytes memory b)
            internal pure returns (bytes memory) {
        return abi.encodePacked(a, b);
    }

    
    function toBytes(address x) internal pure returns (bytes memory b) {
		b = new bytes(20);

		for (uint i = 0; i < 20; i++)
			b[i] = byte(uint8(uint(x) / (2**(8*(19 - i)))));
	}

	
	function toBytes(uint256 x) internal pure returns (bytes memory b) {
    	b = new bytes(32);
    	assembly { mstore(add(b, 32), x) }
	}
}

contract MolScribe {
    using SafeMath for uint256;

    uint256 public nftCount; 
    address public mol = 0xF09631d7BA044bfe44bBFec22c0A362c7e9DCDd8;
    address payable public molBank = 0xF09631d7BA044bfe44bBFec22c0A362c7e9DCDd8; 
    uint256 public molFee = 5; 

    struct NFT {
        address tokenAddress;
        uint256 tokenId;
        address payable currentOwner;
        uint8 startingRoyalties;
    }

    struct Owner {
        address payable ownerAddress;
        uint8 royalties;
        uint256 royaltiesReceived;
        uint8 gifted; 
    }

    struct Buyer {
        address payable buyerAddress;
        uint256 transactionValue;
        uint8 ownerOffered; 
    }

    mapping(bytes => NFT) public NFTs;
	mapping (bytes => Owner[]) public owners;
	mapping (bytes => Buyer) public buyers;

    event molFeesUpdated(uint256 indexed _molFees);
    event molBankUpdated(address indexed _molBank);
    event molUpdated(address indexed _mol);

    function giftLexART(address tokenAddress, uint256 tokenId, address payable communityAddress) public payable {
        bytes memory tokenKey = getTokenKey(tokenAddress, tokenId);

        require(ERC721(tokenAddress).ownerOf(tokenId) == msg.sender, "Sender not authorized to make offer!");
        
        
        ERC721(tokenAddress).transferFrom(owners[tokenKey][owners[tokenKey].length - 1].ownerAddress, communityAddress, tokenId);

        
        uint8 newDecayedRoyalties = decayRoyalties(owners[tokenKey][owners[tokenKey].length - 1].royalties);
        owners[tokenKey].push(Owner(communityAddress, newDecayedRoyalties, 0, 0));
        owners[tokenKey][owners[tokenKey].length - 1].gifted = 1;
        
        
        NFTs[tokenKey].currentOwner = communityAddress;
    }

    function scribeNFT(address tokenAddress, uint256 tokenId, address payable communityAddress, uint8 startingRoyalties) public {
        bytes memory tokenKey = getTokenKey(tokenAddress, tokenId);
		require(ERC721(tokenAddress).ownerOf(tokenId) == msg.sender, "Sender not authorized to scribe!");
        require(NFTs[tokenKey].currentOwner != msg.sender, "NFT already scribed!");

        NFTs[tokenKey].tokenAddress = tokenAddress;
        NFTs[tokenKey].tokenId = tokenId;
        NFTs[tokenKey].currentOwner = msg.sender;
        NFTs[tokenKey].startingRoyalties = startingRoyalties;

        owners[tokenKey].push(Owner(communityAddress, startingRoyalties, 0, 0)); 
        owners[tokenKey].push(Owner(msg.sender, startingRoyalties - 1, 0, 0));

        nftCount++;
	}

    function decayRoyalties(uint8 _royalties) internal pure returns (uint8) {
        return _royalties - 1;
    }

    function makeOffer(address tokenAddress, uint256 tokenId, address payable buyer, uint256 transactionValue) public {
		require(ERC721(tokenAddress).ownerOf(tokenId) == msg.sender, "Sender not authorized to make offer!");
        require(nftCount > 0, "Wrap an NFT first!");

        bytes memory tokenKey = getTokenKey(tokenAddress, tokenId);
        require(NFTs[tokenKey].tokenAddress == tokenAddress && NFTs[tokenKey].tokenId == tokenId, "This NFT has not been wrapped!");
        require(buyer != owners[tokenKey][owners[tokenKey].length - 1].ownerAddress, "Owner cannot be a buyer!");
        require(transactionValue != 0, "Transaction value cannot be 0!");
        
        buyers[tokenKey].buyerAddress = buyer;
        buyers[tokenKey].transactionValue = transactionValue;
        buyers[tokenKey].ownerOffered = 1;
    }

    function distributeRoyalties(bytes memory _tokenKey, uint256 _transactionValue) internal returns (uint256) {
        uint256 royaltyPayout;

        for (uint256 i = 0; i < owners[_tokenKey].length; i++) {
            uint256 eachPayout;

            eachPayout = _transactionValue.mul(owners[_tokenKey][i].royalties);
            eachPayout = eachPayout.div(100);
            
            royaltyPayout += eachPayout;

            (bool success, ) = owners[_tokenKey][i].ownerAddress.call.value(eachPayout)("");
            require(success, "transfer failed");
            owners[_tokenKey][i].royaltiesReceived += eachPayout;
        }
        return royaltyPayout;
    }

    function acceptOffer(address tokenAddress, uint256 tokenId) public payable {
        bytes memory tokenKey = getTokenKey(tokenAddress, tokenId);

        require(msg.sender == buyers[tokenKey].buyerAddress, "You are not the buyer to accept owner's offer!");
        require(msg.value == buyers[tokenKey].transactionValue, "Incorrect payment amount!");
        require(buyers[tokenKey].ownerOffered == 1, "Owner has not made any offer!");

        
        uint256 royaltyPayout = distributeRoyalties(tokenKey, buyers[tokenKey].transactionValue);

        
        uint256 molPayout = (molFee * buyers[tokenKey].transactionValue).div(100);
        (bool success, ) = molBank.call.value(molPayout)("");
        require(success, "transfer failed");

        
        uint256 buyersCut = buyers[tokenKey].transactionValue.sub(molPayout).sub(royaltyPayout);
        (success, ) = owners[tokenKey][owners[tokenKey].length - 1].ownerAddress.call.value(buyersCut)("");
        require(success, "transfer failed");
        
        
        ERC721(tokenAddress).transferFrom(owners[tokenKey][owners[tokenKey].length - 1].ownerAddress, buyers[tokenKey].buyerAddress, tokenId);

        
        uint8 newDecayedRoyalties = decayRoyalties(owners[tokenKey][owners[tokenKey].length - 1].royalties);
        owners[tokenKey].push(Owner(msg.sender, newDecayedRoyalties, 0, 0));

        
        buyers[tokenKey].ownerOffered = 0;

        
        NFTs[tokenKey].currentOwner = msg.sender;
    }

    
	function getTokenKey(address tokenAddress, uint256 tokenId) public pure returns (bytes memory) {
		return Utilities.concat(Utilities.toBytes(tokenAddress), Utilities.toBytes(tokenId));
	}
	
	
    modifier onlyMol () {
        require(msg.sender == mol, "caller not lexDAO");
        _;
    }

    function updateMolFees(uint256 _molFee) public onlyMol {
        molFee = _molFee;

        emit molFeesUpdated(molFee);
    }

    function updateMolBank(address payable _molBank) public onlyMol {
        molBank = _molBank;
        
        emit molBankUpdated(molBank);

    }
    
    function updateMol(address payable _mol) public onlyMol {
        mol = _mol;
        
        emit molUpdated(mol);
    }
}