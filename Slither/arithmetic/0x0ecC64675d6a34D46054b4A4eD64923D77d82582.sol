





pragma solidity ^0.7.1;

interface ISaffronBase {
  enum Tranche {S, AA, A}
  enum LPTokenType {dsec, principal}

  
  struct TrancheUint256 {
    uint256 S;
    uint256 AA;
    uint256 A;
  }

  struct epoch_params {
    uint256 start_date;       
    uint256 duration;         
  }
}




pragma solidity ^0.7.1;


interface ISaffronStrategy is ISaffronBase{
  function deploy_all_capital() external;
  function select_adapter_for_liquidity_removal() external returns(address);
  function add_adapter(address adapter_address) external;
  function add_pool(address pool_address) external;
  function delete_adapters() external;
  function set_governance(address to) external;
  function get_adapter_address(uint256 adapter_index) external view returns(address);
  function set_pool_SFI_reward(uint256 poolIndex, uint256 reward) external;
}




pragma solidity ^0.7.1;

interface ISaffronPool is ISaffronBase {
  function add_liquidity(uint256 amount, Tranche tranche) external;
  function remove_liquidity(address v1_dsec_token_address, uint256 dsec_amount, address v1_principal_token_address, uint256 principal_amount) external;
  function get_base_asset_address() external view returns(address);
  function hourly_strategy(address adapter_address) external;
  function wind_down_epoch(uint256 epoch, uint256 amount_sfi) external;
  function set_governance(address to) external;
  function get_epoch_cycle_params() external view returns (uint256, uint256);
  function shutdown() external;
}




pragma solidity ^0.7.1;

interface ISaffronAdapter is ISaffronBase {
    function deploy_capital(uint256 amount) external;
    function return_capital(uint256 base_asset_amount, address to) external;
    function approve_transfer(address addr,uint256 amount) external;
    function get_base_asset_address() external view returns(address);
    function set_base_asset(address addr) external;
    function get_holdings() external returns(uint256);
    function get_interest(uint256 principal) external returns(uint256);
    function set_governance(address to) external;
}




pragma solidity ^0.7.1;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




pragma solidity ^0.7.1;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}




pragma solidity ^0.7.1;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: value }(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {
        return functionStaticCall(target, data, "Address: low-level static call failed");
    }

    
    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {
        require(isContract(target), "Address: static call to non-contract");

        
        (bool success, bytes memory returndata) = target.staticcall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    
    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {
        return functionDelegateCall(target, data, "Address: low-level delegate call failed");
    }

    
    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        require(isContract(target), "Address: delegate call to non-contract");

        
        (bool success, bytes memory returndata) = target.delegatecall(data);
        return _verifyCallResult(success, returndata, errorMessage);
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




pragma solidity ^0.7.1;





library SafeERC20 {
  using SafeMath for uint256;
  using Address for address;

  function safeTransfer(IERC20 token, address to, uint256 value) internal {
    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
  }

  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
  }

  
  function safeApprove(IERC20 token, address spender, uint256 value) internal {
    
    
    
    
    require((value == 0) || (token.allowance(address(this), spender) == 0),
      "SafeERC20: approve from non-zero to non-zero allowance"
    );
    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
  }

  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
    uint256 newAllowance = token.allowance(address(this), spender).add(value);
    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
  }

  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
    uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
  }

  
  function _callOptionalReturn(IERC20 token, bytes memory data) private {
    
    
    

    bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
    if (returndata.length > 0) { 
      
      require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
    }
  }
}





interface AggregatorV3Interface {

  function decimals()
    external
    view
    returns (
      uint8
    );

  function description()
    external
    view
    returns (
      string memory
    );

  function version()
    external
    view
    returns (
      uint256
    );

  
  
  
  function getRoundData(
    uint80 _roundId
  )
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

  function latestRoundData()
    external
    view
    returns (
      uint80 roundId,
      int256 answer,
      uint256 startedAt,
      uint256 updatedAt,
      uint80 answeredInRound
    );

}




pragma solidity ^0.7.1;


contract ChainlinkRewardOracle {

  mapping(uint16 => uint256[]) public base_SFI_rewards;
  mapping(uint16 => uint256[]) public bonus_SFI_rewards;

  mapping(uint256 => AggregatorV3Interface) public pool_feed;
  mapping(uint256 => uint256) public base_asset_price_begin;
  mapping(uint256 => uint256) public base_asset_price_end;
  mapping(uint256 => uint256) public limit; 

  mapping(uint16 => uint16[]) public tracked_pools;

  enum states {UNSET, REWARD_SET, STARTED, ENDED}
  mapping(uint16 => states) public epoch_state;

  address public governance;
  address public _new_governance;
  address public strategy;

  constructor(address strategyAddr) {
    governance = msg.sender;
    strategy = strategyAddr;
  }

  function set_feed(uint16 epoch, uint16 pool, address feedAddr, uint256 maxPct, uint256 alt_reward) public {
    require(msg.sender == strategy || msg.sender == governance, "must be strategy or gov");
    require(epoch_state[epoch] == states.REWARD_SET, "rewards must be set and not started");
    require(pool < base_SFI_rewards[epoch].length, "cannot feed pool with undefined reward");
    require(maxPct < 1 ether, "can't award on no change"); 
    uint256 index = pack(epoch, pool);
    pool_feed[index] = AggregatorV3Interface(feedAddr);
    tracked_pools[epoch].push(pool);
    limit[index] = maxPct;
    bonus_SFI_rewards[epoch][pool] = alt_reward;
  }

  function set_base_reward(uint16 epoch, uint256[] calldata SFI_rewards) public {
    require(msg.sender == strategy || msg.sender == governance, "must be strategy or gov");
    require(epoch_state[epoch] == states.UNSET || epoch_state[epoch] == states.REWARD_SET, "must not be started");
    epoch_state[epoch] = states.REWARD_SET;
    base_SFI_rewards[epoch] = SFI_rewards;
    bonus_SFI_rewards[epoch] = SFI_rewards;
  }

  event BeginEpoch(uint16 epoch);

  function begin_epoch(uint16 epoch) public {
    require(msg.sender == strategy || msg.sender == governance, "must be strategy or gov");
    require(epoch_state[epoch] == states.REWARD_SET, "must set rewards first");
    epoch_state[epoch] = states.STARTED;
    emit BeginEpoch(epoch);
    for (uint256 i = 0; i < tracked_pools[epoch].length; i++) {
      uint256 index = pack(epoch, tracked_pools[epoch][i]);
      base_asset_price_begin[index] = get_latest_price(index);
    }
  }

  event EndEpoch(uint16 epoch);

  function end_epoch(uint16 epoch) public {
    require(msg.sender == strategy || msg.sender == governance, "must be strategy or gov");
    require(epoch_state[epoch] == states.STARTED, "must be started");
    epoch_state[epoch] = states.ENDED;
    emit EndEpoch(epoch);
    for (uint256 i = 0; i < tracked_pools[epoch].length; i++) {
      uint256 index = pack(epoch, tracked_pools[epoch][i]);
      base_asset_price_end[index] = get_latest_price(index);
    }
  }

  event OracleGetReward(uint256 index, uint256 begin, uint256 end, uint256 reward);

  function get_reward(uint16 epoch, uint16 pool) public view returns (uint256 index, uint256 begin, uint256 end, uint256 reward) {
    require(epoch_state[epoch] == states.ENDED, "must be ended");
    if (pool > base_SFI_rewards[epoch].length) {
      return (index, begin, end, reward);
    }

    index = pack(epoch, pool);

    if (pool_feed[index] == AggregatorV3Interface(0x0)) {
      reward = base_SFI_rewards[epoch][pool];
      return (index, begin, end, reward);
    }

    begin = base_asset_price_begin[index];
    end = base_asset_price_end[index];

    if (end >= begin) {
      reward = base_SFI_rewards[epoch][pool];
      return (index, begin, end, reward);
    }

    uint256 pct = limit[index];
    uint256 max_price_move = begin * pct / 1e18;

    reward = base_SFI_rewards[epoch][pool] + calc_reward_bonus(begin, end, pct, max_price_move, bonus_SFI_rewards[epoch][pool]);

    return (index, begin, end, reward);
  }

  function calc_reward_bonus(uint256 begin, uint256 end, uint256 pct, uint256 max_price_move, uint256 bonus_SFI_reward) internal pure returns (uint256) {
    if (end <= max_price_move) return bonus_SFI_reward;
    uint256 delta = (begin - end);
    uint256 delta_pct = (delta * 1 ether) / begin;
    uint256 reward_multiplier = delta_pct * 1 ether / (1 ether - pct);
    return bonus_SFI_reward * reward_multiplier / 1 ether;
  }

  function get_latest_price(uint256 index) internal view returns (uint256) {
    AggregatorV3Interface priceFeed = pool_feed[index];
    require(priceFeed != AggregatorV3Interface(0x0), "no feed found");
    
    (,int price,,,) = priceFeed.latestRoundData();
    return uint256(price);
  }

  function pack(uint16 epoch, uint16 pool) internal pure returns (uint256) {
    return uint256(epoch) | uint256(pool) << 16;
  }

  
  
  

  event SetGovernance(address prev, address next);
  event AcceptGovernance(address who);

  function set_governance(address to) external {
    require(msg.sender == governance, "must be governance");
    _new_governance = to;
    emit SetGovernance(msg.sender, to);
  }

  function accept_governance() external {
    require(msg.sender == _new_governance, "must be new governance");
    governance = msg.sender;
    emit AcceptGovernance(msg.sender);
  }

  function set_strategy(address to) external {
    require(msg.sender == governance, "must be governance");
    strategy = to;
  }
}




pragma solidity ^0.7.1;


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}




pragma solidity ^0.7.1;






contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    
    constructor (string memory name_, string memory symbol_) {
        _name = name_;
        _symbol = symbol_;
        _decimals = 18;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}




pragma solidity ^0.7.1;



contract SFI is ERC20 {
  using SafeERC20 for IERC20;

  address public governance;
  address public SFI_minter;
  uint256 public MAX_TOKENS = 100000 ether;

  constructor (string memory name, string memory symbol) ERC20(name, symbol) {
    
    governance = msg.sender;
  }

  function mint_SFI(address to, uint256 amount) public {
    require(msg.sender == SFI_minter, "must be SFI_minter");
    require(this.totalSupply() + amount < MAX_TOKENS, "cannot mint more than MAX_TOKENS");
    _mint(to, amount);
  }

  function set_minter(address to) external {
    require(msg.sender == governance, "must be governance");
    SFI_minter = to;
  }

  function set_governance(address to) external {
    require(msg.sender == governance, "must be governance");
    governance = to;
  }

  event ErcSwept(address who, address to, address token, uint256 amount);
  function erc_sweep(address _token, address _to) public {
    require(msg.sender == governance, "must be governance");

    IERC20 tkn = IERC20(_token);
    uint256 tBal = tkn.balanceOf(address(this));
    tkn.safeTransfer(_to, tBal);

    emit ErcSwept(msg.sender, _to, _token, tBal);
  }
}




pragma solidity ^0.7.1;











contract SaffronStrategy is ISaffronStrategy {
  using SafeERC20 for IERC20;
  using SafeMath for uint256;

  ChainlinkRewardOracle public oracle;
  address public governance;
  address public team_address;
  address public SFI_address;
  address[] public pools;
  address[] public adapters;
  mapping(address=>uint256) private adapter_indexes;
  mapping(uint256=>address) private adapter_addresses;
  uint256[] public pool_SFI_rewards = [
	10500000000000000000,     
	33750000000000000000,     
	22500000000000000000,     
	1500000000000000000	,     
	15500000000000000000,     
	1500000000000000000,      
	1500000000000000000,      
	33750000000000000000,     
	1500000000000000000,      
	10500000000000000000,     
	1500000000000000000,      
	10500000000000000000,     
	10500000000000000000      
  ];

  
  mapping(uint256=>bool) public epoch_wound_down;

  uint256 public last_deploy;     
  uint256 public deploy_interval; 

  epoch_params public epoch_cycle = epoch_params({
    start_date: 1604239200,   
    duration:   14 days       
  });

  constructor(address _sfi_address, address _team_address, bool epoch_cycle_reset) {
    governance = msg.sender;
    team_address = _team_address;
    SFI_address = _sfi_address;
    deploy_interval = 1 hours;
    epoch_cycle.duration = (epoch_cycle_reset ? 30 minutes : 14 days); 
    epoch_cycle.start_date = (epoch_cycle_reset ? (block.timestamp) - (4 * epoch_cycle.duration) : 1604239200); 
  }

  function set_oracle(address oracleAddr) external {
    require(msg.sender == team_address || msg.sender == governance, "must be team or governance");
    oracle = ChainlinkRewardOracle(oracleAddr);
  }

  function oracle_set_reward(uint16 epoch) external {
    require(msg.sender == team_address || msg.sender == governance, "must be team or governance");
    oracle.set_base_reward(epoch, pool_SFI_rewards);
  }

  function wind_down_epoch(uint256 epoch) external {
    require(epoch == 20, "v1.20: only epoch 20");
    require(!epoch_wound_down[epoch], "epoch already wound down");
    require(msg.sender == team_address || msg.sender == governance, "must be team or governance");
    uint256 current_epoch = get_current_epoch();
    require(epoch < current_epoch, "cannot wind down future epoch");
    epoch_wound_down[epoch] = true;

    
    uint256 team_sfi = 54 * 1 ether;
    SFI(SFI_address).mint_SFI(team_address, team_sfi);

    for (uint256 i = 0; i < pools.length; i++) {
      uint256 rewardSFI = 0;
      if (i < pool_SFI_rewards.length) {
        rewardSFI = pool_SFI_rewards[i];
        SFI(SFI_address).mint_SFI(pools[i], rewardSFI);
      }
      ISaffronPool(pools[i]).wind_down_epoch(epoch, rewardSFI);
    }
  }

  function wind_down_epoch_oracle(uint256 epoch) external {
    require(epoch == 20, "v1.20: only epoch 20");
    require(!epoch_wound_down[epoch], "epoch already wound down");
    require(msg.sender == team_address || msg.sender == governance, "must be team or governance");
    uint256 current_epoch = get_current_epoch();
    require(epoch < current_epoch, "cannot wind down future epoch");
    epoch_wound_down[epoch] = true;

    require(oracle != ChainlinkRewardOracle(0x0), "no oracle");

    
    uint256 team_sfi = 54 * 1 ether;
    SFI(SFI_address).mint_SFI(team_address, team_sfi);

    oracle.end_epoch(uint16(epoch));

    for (uint16 i = 0; i < pools.length; i++) {
      uint256 rewardSFI = 0;
      if (i < pool_SFI_rewards.length) {
        (,,,rewardSFI) = oracle.get_reward(uint16(epoch), i);
        require(rewardSFI <= 34 ether, "oracle failure: rewards too high");
        SFI(SFI_address).mint_SFI(pools[i], rewardSFI);
      }
      ISaffronPool(pools[i]).wind_down_epoch(epoch, rewardSFI);
    }
  }

  
  function wind_down_pool(uint256 pool, uint256 epoch) external {
    require(msg.sender == team_address || msg.sender == governance, "must be team or governance");
    require(epoch == 20, "v1.20: only epoch 20");
    uint256 current_epoch = get_current_epoch();
    require(epoch < current_epoch, "cannot wind down future epoch");

    if (pool == uint(-1)) {
      require(!epoch_wound_down[epoch], "epoch already wound down");
      epoch_wound_down[epoch] = true;

      
      uint256 team_sfi = 54 * 1 ether;
      SFI(SFI_address).mint_SFI(team_address, team_sfi);
    } else {
      uint256 rewardSFI = 0;
      if (pool < pool_SFI_rewards.length) {
        rewardSFI = pool_SFI_rewards[pool];
        SFI(SFI_address).mint_SFI(pools[pool], rewardSFI);
      }
      ISaffronPool(pools[pool]).wind_down_epoch(epoch, rewardSFI);
    }
  }

  
  function deploy_all_capital() external override {
    require(block.timestamp >= last_deploy + (deploy_interval), "deploy call too soon" );
    last_deploy = block.timestamp;

    
    ISaffronPool pool = ISaffronPool(pools[0]);
    IERC20 base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[0]) > 0) pool.hourly_strategy(adapters[0]);

    
    pool = ISaffronPool(pools[9]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[9]) > 0) pool.hourly_strategy(adapters[1]);

    
    pool = ISaffronPool(pools[4]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[4]) > 0) pool.hourly_strategy(adapters[2]);

    
    pool = ISaffronPool(pools[11]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[11]) > 0) pool.hourly_strategy(adapters[3]);
    
    
    pool = ISaffronPool(pools[12]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[12]) > 0) pool.hourly_strategy(adapters[4]);
  }

  function deploy_all_capital_single_pool(uint256 pool_index, uint256 adapter_index) public {
    require(msg.sender == governance, "must be governance");
    ISaffronPool pool = ISaffronPool(pools[pool_index]);
    IERC20 base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[pool_index]) > 0) pool.hourly_strategy(adapters[adapter_index]);
  }

  function v01_final_deploy() external {
    require(msg.sender == governance, "must be governance");
    
    ISaffronPool pool = ISaffronPool(pools[0]);
    IERC20 base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[0]) > 0) pool.hourly_strategy(adapters[0]);

    
    pool = ISaffronPool(pools[9]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[9]) > 0) pool.hourly_strategy(adapters[1]);

    
    pool = ISaffronPool(pools[4]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[4]) > 0) pool.hourly_strategy(adapters[2]);

    
    pool = ISaffronPool(pools[11]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[11]) > 0) pool.hourly_strategy(adapters[3]);

    
    pool = ISaffronPool(pools[12]);
    base_asset = IERC20(pool.get_base_asset_address());
    if (base_asset.balanceOf(pools[12]) > 0) pool.hourly_strategy(adapters[4]);

    for (uint256 i = 0; i < pools.length; i++) {
      ISaffronPool(pools[i]).shutdown();
    }
  }

  
  function add_adapter(address adapter_address) external override {
    require(msg.sender == governance, "add_adapter: must be governance");
    adapter_indexes[adapter_address] = adapters.length;
    adapters.push(adapter_address);
  }

  
  function get_adapter_index(address adapter_address) public view returns(uint256) {
    return adapter_indexes[adapter_address];
  }

  
  function get_adapter_address(uint256 index) external view override returns(address) {
    return address(adapters[index]);
  }

  function add_pool(address pool_address) external override {
    require(msg.sender == governance, "add_pool: must be governance");
    pools.push(pool_address);
  }

  function delete_adapters() external override {
    require(msg.sender == governance, "delete_adapters: must be governance");
    delete adapters;
  }

  function set_team_address(address to) public {
    require(msg.sender == governance || msg.sender == team_address, "permission");
    team_address = to;
  }

  function set_governance(address to) external override {
    require(msg.sender == governance, "set_governance: must be governance");
    governance = to;
  }

  function set_pool_SFI_reward(uint256 poolIndex, uint256 reward) external override {
    require(msg.sender == governance, "set_governance: must be governance");
    pool_SFI_rewards[poolIndex] = reward;
  }

  function shutdown_pool(uint256 poolIndex) external {
    require(msg.sender == governance, "must be governance");
    ISaffronPool(pools[poolIndex]).shutdown();
  }

  function select_adapter_for_liquidity_removal() external view override returns(address) {
    return adapters[0]; 
  }
  
  

  
  function get_epoch_end(uint256 epoch) public view returns (uint256) {
    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration));
  }

  function get_current_epoch() public view returns (uint256) {
    require(block.timestamp > epoch_cycle.start_date, "before epoch 0");
    return (block.timestamp - epoch_cycle.start_date) / epoch_cycle.duration;
  }

  function get_seconds_until_epoch_end(uint256 epoch) public view returns (uint256) {
    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration)).sub(block.timestamp);
  }

  event ErcSwept(address who, address to, address token, uint256 amount);
  function erc_sweep(address _token, address _to) public {
    require(msg.sender == governance, "must be governance");

    IERC20 tkn = IERC20(_token);
    uint256 tBal = tkn.balanceOf(address(this));
    tkn.safeTransfer(_to, tBal);

    emit ErcSwept(msg.sender, _to, _token, tBal);
  }
}