pragma solidity 0.6.12;

abstract contract ERC20Interface {


    function totalSupply() public virtual view returns (uint);


    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);


    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);


    function transfer(address to, uint256 tokens) public virtual returns (bool success);


    function approve(address spender, uint256 tokens) public virtual returns (bool success);


    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);





    event Transfer(address indexed from, address indexed to, uint256 tokens);


    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);


}

contract Owned {


    address payable public owner;





    event OwnershipTransferred(address indexed _from, address indexed _to);





    constructor() public {


        owner = msg.sender;


    }





    modifier onlyOwner {


        require(msg.sender == owner);


        _;


    }





    function transferOwnership(address payable _newOwner) public onlyOwner {


        owner = _newOwner;


        emit OwnershipTransferred(msg.sender, _newOwner);


    }


}

contract SBX_TOKEN is ERC20Interface, Owned {


    using SafeMath for uint256;


    string public symbol = "SBX";


    string public  name = "Sports Betting Marketplace";


    uint256 public decimals = 18;


    uint256 _totalSupply = 2e8* 10 ** (decimals);  





    uint256 public lockedTokens;


    uint256 _contractStartTime;


    uint256 _lastUpdated;


    


    mapping(address => uint256) balances;


    mapping(address => mapping(address => uint256)) allowed;


    


    


    


    


    constructor() public {


        owner = 0xe93ae81fe7Fa777DE976876BC276218e0C292d48;


        balances[owner] = totalSupply();


        


        lockedTokens = 3e7 * 10 ** (decimals); 


        _contractStartTime = now;


        


        emit Transfer(address(0),address(owner), totalSupply());


    }


    


    


    


    


    


    


    function totalSupply() public override view returns (uint256){


       return _totalSupply; 


    }


    


    


    


    


    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {


        return balances[tokenOwner];


    }





    


    


    


    


    


    function transfer(address to, uint256 tokens) public override returns (bool success) {


        


        unlockTokens();


        


        


        require(address(to) != address(0));


        require(balances[msg.sender] >= tokens);


        require(balances[to] + tokens >= balances[to]);


        if(msg.sender == owner){


            require(balances[msg.sender].sub(tokens) >= lockedTokens);


        }


        


        balances[msg.sender] = balances[msg.sender].sub(tokens);


        balances[to] = balances[to].add(tokens);


        


        emit Transfer(msg.sender,to,tokens);


        return true;


    }


    


    


    


    


    


    function approve(address spender, uint256 tokens) public override returns (bool success){


        allowed[msg.sender][spender] = tokens;


        emit Approval(msg.sender,spender,tokens);


        return true;


    }





    


    


    


    


    


    


    


    


    


    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){


        


        unlockTokens();


        


        require(tokens <= allowed[from][msg.sender]); 


        require(balances[from] >= tokens);


        if(from == owner){


            require(balances[msg.sender].sub(tokens) >= lockedTokens);


        }


            


        balances[from] = balances[from].sub(tokens);


        balances[to] = balances[to].add(tokens);


        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);


        emit Transfer(from,to,tokens);


        return true;


    }


    


    


    


    


    


    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {


        return allowed[tokenOwner][spender];


    }


    


    


    


    


    function unlockTokens() internal{


        


        uint256 timeFrame = 7 days; 


        uint256 relativeTimeDifference = (now.sub(_contractStartTime)).div(timeFrame);


        if(relativeTimeDifference > _lastUpdated){


            uint256 tokensToRelease = (relativeTimeDifference.sub(_lastUpdated)).mul(1e5 * 10 ** (decimals)); 


            lockedTokens = lockedTokens.sub(tokensToRelease);


            _lastUpdated = relativeTimeDifference;


        }


        


    }


}

library SafeMath {


  function mul(uint256 a, uint256 b) internal pure returns (uint256) {


    if (a == 0) {


      return 0;


    }


    uint256 c = a * b;


    assert(c / a == b);


    return c;


  }





  function div(uint256 a, uint256 b) internal pure returns (uint256) {


    


    uint256 c = a / b;


    


    return c;


  }





  function sub(uint256 a, uint256 b) internal pure returns (uint256) {


    assert(b <= a);


    return a - b;


  }





  function add(uint256 a, uint256 b) internal pure returns (uint256) {


    uint256 c = a + b;


    assert(c >= a);


    return c;


  }


  


  function ceil(uint a, uint m) internal pure returns (uint r) {


    return (a + m - 1) / m * m;


  }


}
