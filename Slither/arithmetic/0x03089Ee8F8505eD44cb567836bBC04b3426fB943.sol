



pragma solidity >=0.4.24 <0.7.0;



contract Initializable {

  
  bool private initialized;

  
  bool private initializing;

  
  modifier initializer() {
    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");

    bool isTopLevelCall = !initializing;
    if (isTopLevelCall) {
      initializing = true;
      initialized = true;
    }

    _;

    if (isTopLevelCall) {
      initializing = false;
    }
  }

  
  function isConstructor() private view returns (bool) {
    
    
    
    
    
    address self = address(this);
    uint256 cs;
    assembly { cs := extcodesize(self) }
    return cs == 0;
  }

  
  uint256[50] private ______gap;
}



pragma solidity ^0.6.0;



contract ContextUpgradeSafe is Initializable {
    
    

    function __Context_init() internal initializer {
        __Context_init_unchained();
    }

    function __Context_init_unchained() internal initializer {


    }


    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }

    uint256[50] private __gap;
}



pragma solidity ^0.6.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}



pragma solidity ^0.6.0;


library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}



pragma solidity ^0.6.2;


library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        
        bytes32 codehash;
        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;
        
        assembly { codehash := extcodehash(account) }
        return (codehash != accountHash && codehash != 0x0);
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }
}



pragma solidity ^0.6.0;







contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    

    function __ERC20_init(string memory name, string memory symbol) internal initializer {
        __Context_init_unchained();
        __ERC20_init_unchained(name, symbol);
    }

    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {


        _name = name;
        _symbol = symbol;
        _decimals = 18;

    }


    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }

    uint256[44] private __gap;
}



pragma solidity ^0.6.0;





library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function safeApprove(IERC20 token, address spender, uint256 value) internal {
        
        
        
        
        require((value == 0) || (token.allowance(address(this), spender) == 0),
            "SafeERC20: approve from non-zero to non-zero allowance"
        );
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));
    }

    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).add(value);
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));
    }

    
    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        
        

        
        
        
        
        
        require(address(token).isContract(), "SafeERC20: call to non-contract");

        
        (bool success, bytes memory returndata) = address(token).call(data);
        require(success, "SafeERC20: low-level call failed");

        if (returndata.length > 0) { 
            
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}



pragma solidity ^0.6.0;



contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    

    function __Ownable_init() internal initializer {
        __Context_init_unchained();
        __Ownable_init_unchained();
    }

    function __Ownable_init_unchained() internal initializer {


        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);

    }


    
    function owner() public view returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }

    uint256[49] private __gap;
}



pragma solidity ^0.6.0;




contract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {
    
    event Paused(address account);

    
    event Unpaused(address account);

    bool private _paused;

    

    function __Pausable_init() internal initializer {
        __Context_init_unchained();
        __Pausable_init_unchained();
    }

    function __Pausable_init_unchained() internal initializer {


        _paused = false;

    }


    
    function paused() public view returns (bool) {
        return _paused;
    }

    
    modifier whenNotPaused() {
        require(!_paused, "Pausable: paused");
        _;
    }

    
    modifier whenPaused() {
        require(_paused, "Pausable: not paused");
        _;
    }

    
    function _pause() internal virtual whenNotPaused {
        _paused = true;
        emit Paused(_msgSender());
    }

    
    function _unpause() internal virtual whenPaused {
        _paused = false;
        emit Unpaused(_msgSender());
    }

    uint256[49] private __gap;
}



pragma solidity 0.6.2;

interface IERC20Extended {
    function decimals() external view returns (uint8);
    function burnFrom(address account, uint256 amount) external;
}



pragma solidity 0.6.2;

interface IPriceEstimator {
    function getEstimatedETHforERC20(
        uint256 erc20Amount,
        address token
    ) external view returns (uint256[] memory);

    function getEstimatedERC20forETH(
        uint256 etherAmountInWei,
        address tokenAddress
    ) external view returns (uint256[] memory);
}



pragma solidity 0.6.2;







contract SmartSwap is Initializable, OwnableUpgradeSafe, PausableUpgradeSafe {
    using SafeERC20 for IERC20;
    using SafeMath for uint256;
    using Address for address;

    enum Status {
        OPEN,
        CLOSED,
        CANCELLED
    }

    enum SwapType {
        ETH_TO_ERC20,
        ERC20_TO_ETH,
        ERC20_TO_ERC20
    }

    struct Swap {
        uint256 openValue;
        uint256 closeValue;
        address payable openTrader;
        address payable closeTrader;
        address openContractAddress;
        address closeContractAddress;
        SwapType swapType;
        Status status;
    }

    address constant private ETH_ADDRESS = address(
        0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE
    );

    uint256 constant private DEV_FEE_PERCENTAGE = 10;
    uint256 constant private BURN_FEE_PERCENTAGE = 10;

    
    uint256 private _swapId;

    mapping (uint256 => Swap) private _swaps;

    IERC20 private _swapToken;

    
    address payable private _feesWallet;

    
    address private _devWallet;

    uint256 private _ethFeePercentage;
    uint256 private _allowedFeeSlippagePercentage;
    uint256 private _uniswapFeePercentage;

    IPriceEstimator private _priceEstimator;

    
    mapping(address => bool) private _listFreeTokens;

    event Open(uint256 indexed id, address indexed openTrader, address indexed closeTrader);
    event Cancel(uint256 indexed id);
    event Close(uint256 indexed id);
    event FeeWalletChanged(address indexed wallet);
    event DevWalletChanged(address indexed wallet);
    event SwapTokenUpdated(address indexed swapTokenAddress);

    modifier onlyContract(address account)
    {
        require(account.isContract(), "[Validation] The address does not contain a contract");
        _;
    }

    modifier onlyOpenSwaps(uint256 id) {
        Swap memory swap = _swaps[id];
        require (swap.status == Status.OPEN);
        _;
    }

    
    function initialize(
        address swapTokenAddress,
        address payable feesWallet,
        address devWallet,
        address priceEstimator
    )
    external
    onlyContract(swapTokenAddress)
    onlyContract(priceEstimator)
    {
        __SmartSwap_init(swapTokenAddress, feesWallet, devWallet, priceEstimator);
    }

    function __SmartSwap_init(
        address swapTokenAddress,
        address payable feesWallet,
        address devWallet,
        address priceEstimator
    )
    internal
    initializer
    {
        __Context_init_unchained();
        __Ownable_init_unchained();
        __Pausable_init_unchained();
        __SmartSwap_init_unchained(swapTokenAddress, feesWallet, devWallet, priceEstimator);
    }

    function __SmartSwap_init_unchained(
        address swapTokenAddress,
        address payable feesWallet,
        address devWallet,
        address priceEstimator
    )
    internal
    initializer
    {
        require(
            swapTokenAddress != address(0),
            "[Validation] Invalid swap token address"
        );
        require(feesWallet != address(0), "[Validation] feesWallet is the zero address");
        require(devWallet != address(0), "[Validation] devWallet is the zero address");
        require(
            priceEstimator != address(0),
            "[Validation] Invalid price estimator address"
        );

        _swapToken = IERC20(swapTokenAddress);
        _feesWallet = feesWallet;
        _devWallet = devWallet;
        _priceEstimator = IPriceEstimator(priceEstimator);
        _ethFeePercentage = 3;
        _allowedFeeSlippagePercentage = 5;
        _uniswapFeePercentage = 3;
    }

    
    function pause()
    external
    onlyOwner 
    {
        _pause();
    }

    
    function unpause()
    external
    onlyOwner
    {
        _unpause();
    }

    
    function setSwapToken(address swapTokenAddress)
    external
    onlyOwner
    onlyContract(swapTokenAddress)
    {
        require(
            swapTokenAddress != address(0),
            "[Validation]: Invalid swap token address"
        );
        _swapToken = IERC20(swapTokenAddress);
        emit SwapTokenUpdated(swapTokenAddress);
    }

    
    function setFeeWallet(address payable wallet)
    external
    onlyOwner
    {
        require(
            wallet != address(0),
            "[Validation] feesWallet is the zero address"
        );
        _feesWallet = wallet;

        emit FeeWalletChanged(wallet);
    }

    
    function setDevWallet(address payable wallet)
    external
    onlyOwner
    {
        require(
            wallet != address(0),
            "[Validation] devWallet is the zero address"
        );
        _devWallet = wallet;

        emit DevWalletChanged(wallet);
    }

    
    function setPriceEstimator(address priceEstimator)
    external
    onlyOwner
    onlyContract(priceEstimator)
    {
        require(
            priceEstimator != address(0),
            "[Validation]: Invalid price estimator address"
        );
        _priceEstimator = IPriceEstimator(priceEstimator);
    }

    
    function setEthFeePercentage(uint8 ethFeePercentage)
    external
    onlyOwner
    {
        require(
            ethFeePercentage >= 0 && ethFeePercentage <= 100,
            "[Validation]: ETH Fee percentage must be between 0 to 100"
        );
        _ethFeePercentage = ethFeePercentage;
    }

    
    function setAllowedFeeSlippagePercentage(uint8 allowedFeeSlippagePercentage)
    external
    onlyOwner
    {
        require(
            allowedFeeSlippagePercentage >= 0 && allowedFeeSlippagePercentage <= 100,
            "[Validation]: Allowed Fee Slippage percentage must be between 0 to 100"
        );
        _allowedFeeSlippagePercentage = allowedFeeSlippagePercentage;
    }

    
    function setUniswapFeePercentage(uint8 uniswapFeePercentage)
    external
    onlyOwner
    {
        require(
            uniswapFeePercentage >= 0 && uniswapFeePercentage <= 100,
            "[Validation]: Uniswap Fee percentage must be between 0 to 100"
        );
        _uniswapFeePercentage = uniswapFeePercentage;
    }

    function getFeeInEthForEth(uint256 amount)
    public
    view
    returns (uint256) 
    {
        
        return amount.mul(_ethFeePercentage).div(1000); 
    }

    function getFeeInEthForERC20(uint256 amount, address token)
    public 
    view
    returns (uint256)
    {
        if(isFreeToken(token)) {
            return 0;
        } else {
            
            uint256 tokenBits = 10 ** uint256(IERC20Extended(token).decimals());
            uint256 estFeesInEthPerUnit = _priceEstimator.getEstimatedETHforERC20(tokenBits, token)[0];
            
            
            estFeesInEthPerUnit = estFeesInEthPerUnit.sub(estFeesInEthPerUnit.mul(_uniswapFeePercentage).div(1000));
            uint256 equivEth = amount.mul(estFeesInEthPerUnit).div(tokenBits); 
            return getFeeInEthForEth(equivEth);
        }
    }

    function getFeeInEthForERC20UsingTotalSupply(uint256 amount, address token)
    public
    view
    returns (uint256)
    {
        if(isFreeToken(token)) {
            return 0;
        } else {
            
            uint256 tokenTotalSupply = IERC20(token).totalSupply();
            uint256 percentage = amount.mul(tokenTotalSupply).mul(100).div(tokenTotalSupply);
            uint256 ethFeeInWei = 100000000000000000; 
            return percentage.mul(ethFeeInWei).div(tokenTotalSupply);
        }
    }

    function getFeeInSwapForETH(uint256 amount)
    public
    view
    returns (uint256)
    {
        uint256 feesInEth = getFeeInEthForEth(amount);
        return _getEquivSwapFee(feesInEth);
    }

    function getFeeInSwapForERC20(uint256 amount, address token, bool calcFeeUsingTotalSupply)
    public
    view
    returns (uint256)
    {
        uint256 feesInEth = calcFeeUsingTotalSupply ? 
            getFeeInEthForERC20UsingTotalSupply(amount, token) : 
            getFeeInEthForERC20(amount, token);
        return _getEquivSwapFee(feesInEth);
    }

    function _getEquivSwapFee(uint256 feesInEth)
    private
    view
    returns (uint256)
    {
        uint256 feesInEthIfPaidViaSwap = feesInEth.div(2);
        uint256 swapPerEth = _priceEstimator.getEstimatedERC20forETH(1, address(_swapToken))[0];
        
        
        uint256 estSwapPerEth = swapPerEth.sub(swapPerEth.mul(_uniswapFeePercentage).div(1000));
        return feesInEthIfPaidViaSwap.mul(estSwapPerEth);
    }

    function _distributeFees(uint256 fee)
    private
    {
        uint256 devAmount = fee.mul(DEV_FEE_PERCENTAGE).div(100); 
        uint256 burnAmount = fee.mul(BURN_FEE_PERCENTAGE).div(100); 
        uint256 remAmount = fee.sub(devAmount).sub(burnAmount); 

        _swapToken.safeTransferFrom(msg.sender, _feesWallet, remAmount);
        _swapToken.safeTransferFrom(msg.sender, _devWallet, devAmount);
        IERC20Extended(address(_swapToken)).burnFrom(msg.sender, burnAmount);
    }

    function open(
        uint256 openValue,
        address openContractAddress,
        uint256 closeValue,
        address payable closeTrader,
        address closeContractAddress,
        uint256 fee,
        bool isFeeInSwap,
        bool calcFeeUsingTotalSupply
    )
    external
    payable
    whenNotPaused
    {
        require(openValue > 0, "[Validation] The open value has to be larger than 0");
        require(closeValue > 0, "[Validation] The close value has to be larger than 0");
        if(!isFreeToken(openContractAddress)) {
        require(fee > 0, "[Validation] The fee has to be larger than 0");
        }
        require(closeTrader != address(0), "[Validation] Invalid close trader address");

        if(ETH_ADDRESS == openContractAddress)
        {
            _openEtherToERC20(
                openValue,
                closeValue,
                closeTrader,
                closeContractAddress,
                fee,
                isFeeInSwap
            );
        } 
        else if(ETH_ADDRESS == closeContractAddress)
        {
            _openERC20ToEther(
                openValue,
                openContractAddress,
                closeTrader,
                closeValue,
                fee,
                isFeeInSwap,
                calcFeeUsingTotalSupply
            );
        }
        else
        {
            _openERC20ToERC20(
                openValue,
                openContractAddress,
                closeValue,
                closeTrader,
                closeContractAddress,
                fee,
                isFeeInSwap,
                calcFeeUsingTotalSupply
            );
        }
    }

    function _openEtherToERC20(
        uint256 ethValue,
        uint256 erc20Value,
        address payable erc20Trader,
        address erc20ContractAddress,
        uint256 fee,
        bool isFeeInSwap
    )
    private
    whenNotPaused
    onlyContract(erc20ContractAddress)
    {
        require(ethValue > 0, "[Validation] The ETH amount has to be larger than 0");
        require(erc20Value > 0, "[Validation] The ERC-20 amount has to be larger than 0");
        require(fee > 0, "[Validation] The fee has to be larger than 0");

        
        if(isFeeInSwap){
            require(msg.value >= ethValue, "[Validation] Enough ETH not sent");
            uint256 minRequiredFeeInSwap = getFeeInSwapForETH(ethValue);
            uint256 feeDiff = 0;
            if( fee < minRequiredFeeInSwap ) {
                feeDiff = minRequiredFeeInSwap.sub(fee);
                uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);
                
                require(feeSlippagePercentage < _allowedFeeSlippagePercentage, "[Validation] Fee (SWAP) is below minimum required fee");
            }
            _distributeFees(minRequiredFeeInSwap);
        }
        else {
            uint256 minRequiredFeeInEth = getFeeInEthForEth(ethValue);
            require(fee >= minRequiredFeeInEth, "[Validation] Fee (ETH) is below minimum required fee");
            require(msg.value >= ethValue.add(minRequiredFeeInEth), "[Validation] Enough ETH not sent");
            (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)("");
            require(success, "[Validation] Transfer of fee failed");
        }

        _swapId = _swapId.add(1);

        
        _swaps[_swapId] = Swap({
            openValue: ethValue,
            openTrader: msg.sender,
            openContractAddress: ETH_ADDRESS,
            closeValue: erc20Value,
            closeTrader: erc20Trader,
            closeContractAddress: erc20ContractAddress,
            swapType: SwapType.ETH_TO_ERC20,
            status: Status.OPEN
        });

        emit Open(_swapId, msg.sender, erc20Trader);
    }

    function _openERC20ToEther(
        uint256 erc20Value,
        address erc20ContractAddress,
        address payable ethTrader,
        uint256 ethValue,
        uint256 fee,
        bool isFeeInSwap,
        bool calcFeeUsingTotalSupply
    )
    private
    whenNotPaused
    onlyContract(erc20ContractAddress)
    {
        require(ethValue > 0, "[Validation] The ETH amount has to be larger than 0");
        require(erc20Value > 0, "[Validation] The ERC-20 amount has to be larger than 0");
        
        if(!isFreeToken(erc20ContractAddress)) {
            
            if(isFeeInSwap){
                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(erc20Value, erc20ContractAddress, calcFeeUsingTotalSupply);
                uint256 feeDiff = 0;
                if( fee < minRequiredFeeInSwap ) {
                    feeDiff = minRequiredFeeInSwap.sub(fee);
                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);
                    
                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, "[Validation] Fee (SWAP) is below minimum required fee");
                }
                _distributeFees(minRequiredFeeInSwap);
            }
            else {
                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? 
                    getFeeInEthForERC20UsingTotalSupply(erc20Value, erc20ContractAddress) : 
                    getFeeInEthForERC20(erc20Value, erc20ContractAddress);
                require(fee >= minRequiredFeeInEth, "[Validation] Fee (ETH) is below minimum required fee");
                require(msg.value >= minRequiredFeeInEth, "[Validation] msg.value doesn't contain enough ETH for fee");
                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)("");
                require(success, "[Validation] Transfer of fee failed");
            }
        }
        
        IERC20 openERC20Contract = IERC20(erc20ContractAddress);
        require(erc20Value <= openERC20Contract.allowance(msg.sender, address(this)));
        require(openERC20Contract.transferFrom(msg.sender, address(this), erc20Value));

        _swapId = _swapId.add(1);

        
        _swaps[_swapId] = Swap({
            openValue: erc20Value,
            openTrader: msg.sender,
            openContractAddress: erc20ContractAddress,
            closeValue: ethValue,
            closeTrader: ethTrader,
            closeContractAddress: ETH_ADDRESS,
            swapType: SwapType.ERC20_TO_ETH,
            status: Status.OPEN
        });

        emit Open(_swapId, msg.sender, ethTrader);
    }

    function _openERC20ToERC20(
        uint256 openValue,
        address openContractAddress,
        uint256 closeValue,
        address payable closeTrader,
        address closeContractAddress,
        uint256 fee,
        bool isFeeInSwap,
        bool calcFeeUsingTotalSupply
    )
    private
    whenNotPaused
    {
        require(openValue > 0, "[Validation] The open ERC-20 amount has to be larger than 0");
        require(closeValue > 0, "[Validation] The close ERC-20 amount has to be larger than 0");
        
        if(!isFreeToken(openContractAddress)) {
            
            if(isFeeInSwap){
                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(openValue, openContractAddress, calcFeeUsingTotalSupply);
                uint256 feeDiff = 0;
                if( fee < minRequiredFeeInSwap ) {
                    feeDiff = minRequiredFeeInSwap.sub(fee);
                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);
                    
                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, "[Validation] Fee (SWAP) is below minimum required fee");
                }
                _distributeFees(minRequiredFeeInSwap);
            }
            else {
                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? 
                    getFeeInEthForERC20UsingTotalSupply(openValue, openContractAddress) : 
                    getFeeInEthForERC20(openValue, openContractAddress);
                require(fee >= minRequiredFeeInEth, "[Validation] Fee (ETH) is below minimum required fee");
                require(msg.value >= minRequiredFeeInEth, "[Validation] msg.value doesn't contain enough ETH for fee");
                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)("");
                require(success, "[Validation] Transfer of fee failed");
            }
        }

        
        IERC20 openERC20Contract = IERC20(openContractAddress);
        require(openValue <= openERC20Contract.allowance(msg.sender, address(this)));
        require(openERC20Contract.transferFrom(msg.sender, address(this), openValue));

        _swapId = _swapId.add(1);

        
        _swaps[_swapId] = Swap({
            openValue: openValue,
            openTrader: msg.sender,
            openContractAddress: openContractAddress,
            closeValue: closeValue,
            closeTrader: closeTrader,
            closeContractAddress: closeContractAddress,
            swapType: SwapType.ERC20_TO_ERC20,
            status: Status.OPEN
        });

        emit Open(_swapId, msg.sender, closeTrader);
    }

    function close(
        uint256 id,
        uint256 fee,
        bool isFeeInSwap,
        bool calcFeeUsingTotalSupply
    )
    external
    payable
    onlyOpenSwaps(id)
    {
        Swap memory swap = _swaps[id];
        require(swap.closeTrader == _msgSender(), "[Validation]: The caller is not authorized to close the trade");
        if(SwapType.ETH_TO_ERC20 == swap.swapType)
        {
            _closeEtherToERC20(
                id,
                fee,
                isFeeInSwap,
                calcFeeUsingTotalSupply
            );
        } 
        else if(SwapType.ERC20_TO_ETH == swap.swapType)
        {
            _closeERC20ToEther(
                id,
                fee,
                isFeeInSwap
            );
        }
        else
        {
            _closeERC20ToERC20(
                id,
                fee,
                isFeeInSwap,
                calcFeeUsingTotalSupply
            );
        }
    }

    function _closeEtherToERC20(
        uint256 id,
        uint256 fee,
        bool isFeeInSwap,
        bool calcFeeUsingTotalSupply
    )
    private
    onlyOpenSwaps(id)
    {
        Swap storage swap = _swaps[id];

        if(!isFreeToken(swap.closeContractAddress)) {
            
            if(isFeeInSwap){
                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(swap.closeValue, swap.closeContractAddress, calcFeeUsingTotalSupply);
                uint256 feeDiff = 0;
                if( fee < minRequiredFeeInSwap ) {
                    feeDiff = minRequiredFeeInSwap.sub(fee);
                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);
                    
                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, "[Validation] Fee (SWAP) is below minimum required fee");
                }
                _distributeFees(minRequiredFeeInSwap);
            }
            else {
                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? 
                    getFeeInEthForERC20UsingTotalSupply(swap.closeValue, swap.closeContractAddress) : 
                    getFeeInEthForERC20(swap.closeValue, swap.closeContractAddress);
                require(fee >= minRequiredFeeInEth, "[Validation] Fee (ETH) is below minimum required fee");
                require(msg.value >= minRequiredFeeInEth, "[Validation] msg.value doesn't contain enough ETH for fee");
                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)("");
                require(success, "[Validation] Transfer of fee failed");
            }
        }
        
        swap.status = Status.CLOSED;

        
        IERC20 erc20Contract = IERC20(swap.closeContractAddress);
        require(swap.closeValue <= erc20Contract.allowance(swap.closeTrader, address(this)));
        require(erc20Contract.transferFrom(swap.closeTrader, swap.openTrader, swap.closeValue));

        
        swap.closeTrader.transfer(swap.openValue);
        
        emit Close(id);
    }

    function _closeERC20ToEther(
        uint256 id,
        uint256 fee,
        bool isFeeInSwap
    )
    private
    onlyOpenSwaps(id)
    {
        Swap storage swap = _swaps[id];

        
        if(isFeeInSwap){
            require(msg.value >= swap.closeValue, "[Validation] Enough ETH not sent");
            uint256 minRequiredFeeInSwap = getFeeInSwapForETH(swap.closeValue);
            uint256 feeDiff = 0;
            if( fee < minRequiredFeeInSwap ) {
                feeDiff = minRequiredFeeInSwap.sub(fee);
                uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);
                
                require(feeSlippagePercentage < _allowedFeeSlippagePercentage, "[Validation] Fee (SWAP) is below minimum required fee");
            }
            _distributeFees(minRequiredFeeInSwap);
        }
        else {
            uint256 minRequiredFeeInEth = getFeeInEthForEth(swap.closeValue);
            require(fee >= minRequiredFeeInEth, "[Validation] Fee (ETH) is below minimum required fee");
            require(msg.value >= swap.closeValue.add(minRequiredFeeInEth), "[Validation] Enough ETH not sent");
            (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)("");
            require(success, "[Validation] Transfer of fee failed");
        }

        
        swap.status = Status.CLOSED;

        
        IERC20 openERC20Contract = IERC20(swap.openContractAddress);
        require(openERC20Contract.transfer(swap.closeTrader, swap.openValue));

        (bool success,) = swap.openTrader.call.value(swap.closeValue)("");
        require(success, "[Validation] Transfer of eth failed");
        
        emit Close(id);
    }

    function _closeERC20ToERC20(
        uint256 id,
        uint256 fee,
        bool isFeeInSwap,
        bool calcFeeUsingTotalSupply
    )
    private
    onlyOpenSwaps(id)
    {
        Swap storage swap = _swaps[id];

        if(!isFreeToken(swap.closeContractAddress)) {
            
            if(isFeeInSwap){
                uint256 minRequiredFeeInSwap = getFeeInSwapForERC20(swap.closeValue, swap.closeContractAddress, calcFeeUsingTotalSupply);
                uint256 feeDiff = 0;
                if( fee < minRequiredFeeInSwap ) {
                    feeDiff = minRequiredFeeInSwap.sub(fee);
                    uint256 feeSlippagePercentage = feeDiff.mul(100).div(minRequiredFeeInSwap);
                    
                    require(feeSlippagePercentage < _allowedFeeSlippagePercentage, "[Validation] Fee (SWAP) is below minimum required fee");
                }
                _distributeFees(minRequiredFeeInSwap);
            }
            else {
                uint256 minRequiredFeeInEth = calcFeeUsingTotalSupply ? 
                    getFeeInEthForERC20UsingTotalSupply(swap.closeValue, swap.closeContractAddress) : 
                    getFeeInEthForERC20(swap.closeValue, swap.closeContractAddress);
                require(fee >= minRequiredFeeInEth, "[Validation] Fee (ETH) is below minimum required fee");
                require(msg.value >= minRequiredFeeInEth, "[Validation] msg.value doesn't contain enough ETH for fee");
                (bool success,) = _feesWallet.call.value(minRequiredFeeInEth)("");
                require(success, "[Validation] Transfer of fee failed");
            }
        }

        
        swap.status = Status.CLOSED;

        
        IERC20 closeERC20Contract = IERC20(swap.closeContractAddress);
        require(swap.closeValue <= closeERC20Contract.allowance(swap.closeTrader, address(this)));
        require(closeERC20Contract.transferFrom(swap.closeTrader, swap.openTrader, swap.closeValue));

        
        IERC20 openERC20Contract = IERC20(swap.openContractAddress);
        require(openERC20Contract.transfer(swap.closeTrader, swap.openValue));

        emit Close(id);
    }

    function cancel(uint256 id)
    external
    onlyOpenSwaps(id)
    {
        Swap memory swap = _swaps[id];
        require(swap.openTrader == _msgSender(), "[Validation]: The caller is not authorized to cancel the trade");
        if(SwapType.ETH_TO_ERC20 == swap.swapType) {
            _cancelEtherToERC20(id);
        }
        else {
            _cancelERC20(id);
        }
    }

    function _cancelEtherToERC20(uint256 id)
    private
    onlyOpenSwaps(id)
    {
        
        Swap storage swap = _swaps[id];
        swap.status = Status.CANCELLED;

        
        swap.openTrader.transfer(swap.openValue);
        emit Cancel(id);
    }

    function _cancelERC20(uint256 id)
    private
    onlyOpenSwaps(id)
    {
        
        Swap storage swap = _swaps[id];
        swap.status = Status.CANCELLED;

        
        IERC20 openERC20Contract = IERC20(swap.openContractAddress);
        require(openERC20Contract.transfer(swap.openTrader, swap.openValue));

        emit Cancel(id);
    }

    function check(uint256 id)
    external
    view
    returns (
        uint256 openValue,
        address openTrader,
        address openContractAddress,
        uint256 closeValue,
        address closeTrader,
        address closeContractAddress,
        SwapType swapType,
        Status status
    )
    {
        Swap memory swap = _swaps[id];
        return (
            swap.openValue, 
            swap.openTrader, 
            swap.openContractAddress, 
            swap.closeValue, 
            swap.closeTrader, 
            swap.closeContractAddress,
            swap.swapType,
            swap.status
        );
    }

    
    function addTokenToFreeList(address token)
    external
    onlyOwner
    onlyContract(token)
    {
        _listFreeTokens[token] = true;
    }

    
    function removeTokenFromFreeList(address token)
    external
    onlyOwner
    onlyContract(token)
    {
        _listFreeTokens[token] = false;
    }

    
    function isFreeToken(address token)
    public
    view
    returns(bool)
    {
        return _listFreeTokens[token];
    }
}