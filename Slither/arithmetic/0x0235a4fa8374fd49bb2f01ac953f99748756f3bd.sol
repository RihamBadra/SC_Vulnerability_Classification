







pragma solidity 0.6.12;





interface PunkC {
	function ownerOf(uint256 _user) external view returns(address);
    function balanceOf(address owner) external view returns (uint256);
     function totalSupply() external view returns (uint256);
}




library Address {
    
    function isContract(address account) internal view returns (bool) {
        
        
        

        uint256 size;
        
        assembly { size := extcodesize(account) }
        return size > 0;
    }

    
    function sendValue(address payable recipient, uint256 amount) internal {
        require(address(this).balance >= amount, "Address: insufficient balance");

        
        (bool success, ) = recipient.call{ value: amount }("");
        require(success, "Address: unable to send value, recipient may have reverted");
    }

    
    function functionCall(address target, bytes memory data) internal returns (bytes memory) {
      return functionCall(target, data, "Address: low-level call failed");
    }

    
    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {
        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");
    }

    
    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {
        require(address(this).balance >= value, "Address: insufficient balance for call");
        return _functionCallWithValue(target, data, value, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        
        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);
        if (success) {
            return returndata;
        } else {
            
            if (returndata.length > 0) {
                

                
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }
}




abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}




interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
}




contract ERC20 is Context, IERC20 {
    using SafeMath for uint256;
    using Address for address;

    mapping (address => uint256) private _balances;

    mapping (address => mapping (address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;
    uint8 private _decimals;

    
    constructor (string memory name, string memory symbol) public {
        _name = name;
        _symbol = symbol;
        _decimals = 18;
    }

    
    function name() public view returns (string memory) {
        return _name;
    }

    
    function symbol() public view returns (string memory) {
        return _symbol;
    }

    
    function decimals() public view returns (uint8) {
        return _decimals;
    }

    
    function totalSupply() public view override returns (uint256) {
        return _totalSupply;
    }

    
    function balanceOf(address account) public view override returns (uint256) {
        return _balances[account];
    }

    
    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(_msgSender(), recipient, amount);
        return true;
    }

    
    function allowance(address owner, address spender) public view virtual override returns (uint256) {
        return _allowances[owner][spender];
    }

    
    function approve(address spender, uint256 amount) public virtual override returns (bool) {
        _approve(_msgSender(), spender, amount);
        return true;
    }

    
    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {
        _transfer(sender, recipient, amount);
        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));
        return true;
    }

    
    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));
        return true;
    }

    
    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {
        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));
        return true;
    }

    
    function _transfer(address sender, address recipient, uint256 amount) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
        _balances[recipient] = _balances[recipient].add(amount);
        emit Transfer(sender, recipient, amount);
    }

    
    function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply = _totalSupply.add(amount);
        _balances[account] = _balances[account].add(amount);
        emit Transfer(address(0), account, amount);
    }

    
    function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");
        _totalSupply = _totalSupply.sub(amount);
        emit Transfer(account, address(0), amount);
    }

    
    function _approve(address owner, address spender, uint256 amount) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }

    
    function _setupDecimals(uint8 decimals_) internal {
        _decimals = decimals_;
    }

    
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }
}



contract Charge is ERC20("Charge", "CHARGE") {
	using SafeMath for uint256;

uint256 constant public rewardtimeframe = 86400; 
	uint256 public BASE_RATE = 10 ether; 
	uint256 public FirstRedeemRate = 70 ether; 
	    bool public isPauseEnabled;

	mapping(uint256 => uint256) public rewards;
	mapping(uint256 => uint256) public lastUpdate;
	
	address private _owner;

	PunkC public PunkContract;

	event RewardPaid(address indexed user, uint256 reward);
	event ChangeIsPausedEnabled(bool _isPauseEnabled);
	event BaseRateSet(uint256 baserate);
	event FirstRedeemRateSet(uint256 redeemfirstrate);
	constructor(address _punks) public{
		PunkContract = PunkC(_punks);
		_owner = _msgSender();
	}

    function setBaseRate(uint256 _baserate) external {
	       require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _baserate = _baserate * 1 ether;
		BASE_RATE=_baserate;
        emit BaseRateSet(_baserate);
    }
   function setFirstRedeemRate(uint256 _FirstRedeemRate) external {
	       require(_owner == _msgSender(), "Ownable: caller is not the owner");
        _FirstRedeemRate = _FirstRedeemRate * 1 ether;
		FirstRedeemRate=_FirstRedeemRate;
        emit FirstRedeemRateSet(_FirstRedeemRate);
    }

	function getRewards(uint256[] calldata _tokenIds) external {
		uint256 ramount;
		uint256 tamount;
		 for(uint256 i = 0; i < _tokenIds.length; i++) {
			 uint256 _punk = _tokenIds[i];
		require(msg.sender == address(PunkContract.ownerOf(_punk)), "You are not the owner of this punk");
		require(!isPauseEnabled, "Staking is on pause");
		uint256 time = block.timestamp;
				if(lastUpdate[_punk] == 0) {
		   ramount= FirstRedeemRate;
		}else{
		ramount = uint(time - lastUpdate[_punk]) / rewardtimeframe * BASE_RATE; 
		}
		if(ramount>1){
			lastUpdate[_punk] = time;
			tamount=tamount+ramount;
		}}
		 require(tamount > 1, "Your punks didn't work hard enough");	
			_mint(msg.sender, tamount);
			emit RewardPaid(msg.sender, tamount);
	}

	function getTotalClaimableU(address address_) external view returns(uint256) {
		
		
		  uint _balance = PunkContract.balanceOf(address_); 
        uint contractMaxToken = PunkContract.totalSupply(); 
        uint[] memory _tokens = new uint[](_balance); 
		require(_balance>=1,"You do not own a punk");
        uint _index;
            for (uint id = 1; id <= contractMaxToken; id++) {
                if (address_ == PunkContract.ownerOf(id)) { _tokens[_index] = id; _index++;}
            }
        uint256 _punk;
		uint256 tamount;
		for (uint256 ind = 0; ind < _tokens.length; ind++) {
			_punk=_tokens[ind];
		uint256 time = block.timestamp;
		uint256 ramount;
				if(lastUpdate[_punk] == 0) {
			ramount= FirstRedeemRate;
		}else{
		ramount = uint(time - lastUpdate[_punk]) / rewardtimeframe * BASE_RATE;} 
	
		    
		tamount= tamount+ramount;
		
	}
	return tamount; }
	
	function getTotalClaimable(uint256[] calldata _tokenIds) external view returns(uint256) {
		
		uint256 _punk;
		uint256 tamount;
		for (uint256 ind = 0; ind < _tokenIds.length; ind++) {
			_punk=_tokenIds[ind];
		uint256 time = block.timestamp;
		uint256 ramount;
				if(lastUpdate[_punk] == 0) {
			ramount= FirstRedeemRate;
		}else{
		ramount = uint(time - lastUpdate[_punk]) / rewardtimeframe * BASE_RATE;} 
	
		    
		tamount= tamount+ramount;
		
	}return tamount; }
	
	function getClaimable(uint256 _punk) external view returns(uint256) {
		uint256 time = block.timestamp;
		uint256 ramount;
	
				if(lastUpdate[_punk] == 0) {
			ramount= FirstRedeemRate;
		}else{
		ramount = uint(time - lastUpdate[_punk]) / rewardtimeframe * BASE_RATE;
        } 
	
		    
		return ramount;
		
	}
	
		function burn(uint256 _amount) external {
	       require(_owner == _msgSender(), "Ownable: caller is not the owner");
    	    
    	    _amount = _amount * 1 ether;
		_burn(_msgSender(), _amount);
	}
	
	
	function getReward(uint256 _punk) external {
		require(msg.sender == address(PunkContract.ownerOf(_punk)), "You are not the owner of this punk");
		require(!isPauseEnabled, "Staking is on pause");
		uint256 ramount;
		uint256 time = block.timestamp;
				if(lastUpdate[_punk] == 0) {
		   ramount= FirstRedeemRate;
		}else{
		ramount = uint(time - lastUpdate[_punk]) / rewardtimeframe * BASE_RATE; } 

			require(ramount > 1, "Your punk didn't work hard enough");
			lastUpdate[_punk] = time;
			_mint(msg.sender, ramount);
			emit RewardPaid(msg.sender, ramount);
	}


	  function setPauseStatus(bool _isPauseEnabled) external {
	       require(_owner == _msgSender(), "Ownable: caller is not the owner");
        isPauseEnabled = _isPauseEnabled;
        emit ChangeIsPausedEnabled(_isPauseEnabled);
    }
	
	 function TokensOfOwner(address address_) public view returns (uint[] memory) {
        uint _balance = PunkContract.balanceOf(address_); 
        uint contractMaxToken = PunkContract.totalSupply(); 
        uint[] memory _tokens = new uint[](_balance); 
		require(_balance>=1,"You do not own a punk");
        uint _index;
            for (uint id = 1; id <= contractMaxToken; id++) {
                if (address_ == PunkContract.ownerOf(id)) { _tokens[_index] = id; _index++;}
            }
        return _tokens; 
    }
    

	function omint(uint256 coins) external {
	    require(_owner == _msgSender(), "Ownable: caller is not the owner");
	    coins = coins * 1 ether;
        			_mint(msg.sender, coins);
			emit RewardPaid(msg.sender, coins);
	}
	
	function airdrop(address[] calldata _addresses,uint256 coins) external {
	    require(_owner == _msgSender(), "Ownable: caller is not the owner");
		coins = coins * 1 ether;
		for (uint256 ind = 0; ind < _addresses.length; ind++) {
        			_mint(_addresses[ind], coins);
			emit RewardPaid(_addresses[ind], coins);
	}
	}
	function airdropToTokens(uint256[] calldata _tokenIds,uint256 coins) external {
	    require(_owner == _msgSender(), "Ownable: caller is not the owner");
		coins = coins * 1 ether;
		for (uint256 ind = 0; ind < _tokenIds.length; ind++) {
        			_mint(address(PunkContract.ownerOf(_tokenIds[ind])), coins);
			emit RewardPaid(PunkContract.ownerOf(_tokenIds[ind]), coins);
	}
	}	
}