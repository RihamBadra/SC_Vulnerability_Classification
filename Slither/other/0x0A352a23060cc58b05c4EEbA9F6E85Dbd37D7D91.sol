
















pragma solidity 0.5.12;


contract DSPauseAbstract {
    function delay() public view returns (uint256);
    function plot(address, bytes32, bytes memory, uint256) public;
    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);
}


contract PotAbstract {
    function file(bytes32, uint256) external;
    function drip() external returns (uint256);
}


contract JugAbstract {
    function file(bytes32, bytes32, uint256) external;
    function drip(bytes32) external returns (uint256);
}


contract VatAbstract {
    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);
    function file(bytes32, uint256) external;
    function file(bytes32, bytes32, uint256) external;
}


contract FlipAbstract {
    function file(bytes32, uint256) external;
    function wards(address) external view returns (uint256);
}


contract FlipperMomAbstract {
    function rely(address) external;
    function deny(address) external;
}


contract IlkRegistryAbstract {
    function list() external view returns (bytes32[] memory);
    function flip(bytes32) external view returns (address);
}


contract ChainlogAbstract {
    function getAddress(bytes32) public view returns (address);
}

contract SpellAction {
    
    
    
    ChainlogAbstract constant CHANGELOG =
        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);

    
    
    
    
    
    
    uint256 constant ZERO_PCT_RATE = 1000000000000000000000000000;

    
    
    uint256 constant WAD = 10**18;
    uint256 constant RAY = 10**27;
    uint256 constant RAD = 10**45;
    uint256 constant MLN = 10**6;
    uint256 constant BLN = 10**9;

    function execute() external {
        address MCD_VAT      = CHANGELOG.getAddress("MCD_VAT");
        address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");
        address MCD_POT      = CHANGELOG.getAddress("MCD_POT");
        address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
        uint256 totalLine = 0;

        

        
        
        PotAbstract(MCD_POT).drip();

        
        
        
        
        PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE);

        
        
        IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);
        bytes32[] memory ilks = registry.list();

        for (uint i = 0; i < ilks.length; i++) {
            
            
            if (ilks[i] == "USDC-B") {
                continue;
            }

            
            
            JugAbstract(MCD_JUG).drip(ilks[i]);

            
            
            JugAbstract(MCD_JUG).file(ilks[i], "duty", ZERO_PCT_RATE);

            
            
            (,,, uint256 ilkLine,) = VatAbstract(MCD_VAT).ilks(ilks[i]);
            totalLine += ilkLine;
        }

        
        
        
        
        
        
        (,,, uint256 ilkLine,) = VatAbstract(MCD_VAT).ilks("USDC-B");
        uint256 USDC_B_LINE = ilkLine + (50 * MLN * RAD);
        VatAbstract(MCD_VAT).file("USDC-B", "line", USDC_B_LINE);
        totalLine += USDC_B_LINE;

        
        
        VatAbstract(MCD_VAT).file("Line", totalLine);
    }
}

contract DssSpell {
    
    
    
    ChainlogAbstract constant CHANGELOG =
        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);

    DSPauseAbstract  public pause;
    address          public action;
    bytes32          public tag;
    uint256          public eta;
    bytes            public sig;
    uint256          public expiration;
    bool             public done;

    uint256 constant T2021_07_01_1200UTC = 1625140800;

    
    string constant public description = "DEFCON-1 Emergency Spell";

    constructor() public {
        address MCD_PAUSE = CHANGELOG.getAddress("MCD_PAUSE");
        sig = abi.encodeWithSignature("execute()");
        action = address(new SpellAction());
        bytes32 _tag;
        address _action = action;
        assembly { _tag := extcodehash(_action) }
        tag = _tag;
        pause = DSPauseAbstract(MCD_PAUSE);
        expiration = T2021_07_01_1200UTC;
    }

    function schedule() public {
        require(now <= expiration, "This contract has expired");
        require(eta == 0, "This spell has already been scheduled");
        address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
        address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
        eta = now + pause.delay();
        pause.plot(action, tag, sig, eta);

        
        
        IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);
        bytes32[] memory ilks = registry.list();

        for (uint i = 0; i < ilks.length; i++) {
            
            
            
            
            
            if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
                FlipperMomAbstract(FLIPPER_MOM).deny(registry.flip(ilks[i]));
            }
        }
    }

    function cast() public {
        require(!done, "spell-already-cast");
        done = true;
        pause.exec(action, tag, sig, eta);
    }
}