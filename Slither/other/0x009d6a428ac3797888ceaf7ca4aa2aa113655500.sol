


pragma solidity >=0.8;




abstract contract ERC721 {
    
    
    
    address public owner = msg.sender;

    uint256 constant MINT_FEE = 0.0099 ether; 
    
    uint256 constant MAX_GIVEAWAY_SUPPLY = 500;

    uint256 constant maxMintPerWallet = 25;

    uint256 constant MAX_SUPPLY = 6969;

    address constant MF_TEAM = address(0xA0c8041d9e225cba96089778C0cA3bf9fb7AFb7D); 

    string constant unrevealedURI = "https:

    
    
    

    uint256 public giveawaySupply;

    uint256 public totalSupply;

    uint256 public revealedSupply;

    string public revealedURI;

    
    
    

    function giveaway(address account, uint256 amount) external {
        
        require(totalSupply + amount <= MAX_SUPPLY);
        
        require(msg.sender == MF_TEAM);
        
        require(giveawaySupply + amount < MAX_GIVEAWAY_SUPPLY);

        for (uint i; i < amount; i++) {
            
            totalSupply++;
            
            giveawaySupply++;
            
            _mint(account, totalSupply);
        }
    }

    function withdraw(address account, uint256 amount) external {
        
        require(msg.sender == MF_TEAM);
        
        
        payable(account).transfer(amount);
    }

    function reveal(string memory updatedURI, uint256 _revealedSupply) external {
        
        require(msg.sender == MF_TEAM);

        require(revealedSupply <= MAX_SUPPLY);

        revealedSupply = _revealedSupply;

        revealedURI = updatedURI;
    }
    
    
    


    function mint(address account) external payable {
        
        require(balanceOf[account] + 1 <= maxMintPerWallet);
        
        if (totalSupply > 500) require(msg.value >= MINT_FEE);


        require(totalSupply + 1 <= MAX_SUPPLY);
        totalSupply++;

        _mint(account, totalSupply);

    }

    function batchMint(address account, uint256 amount) external payable {
        
        require(balanceOf[account] + 1 <= maxMintPerWallet);

        require(totalSupply + amount <= MAX_SUPPLY);

  
        if (totalSupply > 500) require(msg.value >= MINT_FEE * amount);

        for (uint i; i < amount; i++) {

            totalSupply++;

            _mint(account, totalSupply);

        }
    }

    function tokenURI(uint256 tokenId) public override view returns (string memory) {

        if (tokenId > revealedSupply) return unrevealedURI;

        return string(abi.encodePacked(revealedURI, "/", _toString(tokenId), ".json"));
    }


    
    
    

    function _toString(uint256 value) internal pure returns (string memory) {
        
        

        if (value == 0) {
            return "0";
        }
        uint256 temp = value;
        uint256 digits;
        while (temp != 0) {
            digits++;
            temp /= 10;
        }
        bytes memory buffer = new bytes(digits);
        while (value != 0) {
            digits -= 1;
            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));
            value /= 10;
        }
        return string(buffer);
    }

}