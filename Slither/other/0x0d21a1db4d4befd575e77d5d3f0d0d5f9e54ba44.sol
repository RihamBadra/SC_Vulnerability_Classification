





pragma solidity =0.7.6;


library SafeMath {
    
    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        uint256 c = a + b;
        if (c < a) return (false, 0);
        return (true, c);
    }

    
    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b > a) return (false, 0);
        return (true, a - b);
    }

    
    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        
        
        
        if (a == 0) return (true, 0);
        uint256 c = a * b;
        if (c / a != b) return (false, 0);
        return (true, c);
    }

    
    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a / b);
    }

    
    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {
        if (b == 0) return (false, 0);
        return (true, a % b);
    }

    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");
        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b <= a, "SafeMath: subtraction overflow");
        return a - b;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) return 0;
        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");
        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: division by zero");
        return a / b;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        require(b > 0, "SafeMath: modulo by zero");
        return a % b;
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        return a - b;
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a / b;
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        return a % b;
    }
}


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}


abstract contract Context {
    function _msgSender() internal view virtual returns (address payable) {
        return msg.sender;
    }

    function _msgData() internal view virtual returns (bytes memory) {
        this; 
        return msg.data;
    }
}


abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    
    constructor () internal {
        address msgSender = _msgSender();
        _owner = msgSender;
        emit OwnershipTransferred(address(0), msgSender);
    }

    
    function owner() public view virtual returns (address) {
        return _owner;
    }

    
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }

    
    function renounceOwnership() public virtual onlyOwner {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner);
        _owner = newOwner;
    }
}



contract SimpleStaking is Ownable {
    using SafeMath for uint;

    uint constant doubleScale = 10 ** 36;

    
    IERC20 public stakeToken;

    
    IERC20 public rewardToken;

    
    uint public rewardSpeed;

    
    mapping(address => uint) public userCollateral;
    uint public totalCollateral;

    
    
    mapping(address => uint) public userIndex;
    uint public index;

    mapping(address => uint) public userAccrued;

    
    uint public lastDistributedBlock;

    
    event Deposit(address user, uint amount);
    event Withdraw(address user, uint amount);
    event RewardSpeedUpdated(uint oldSpeed, uint newSpeed);
    event RewardDistributed(address indexed user, uint delta, uint index);

    constructor(IERC20 _stakeToken, IERC20 _rewardToken) Ownable(){
        stakeToken = _stakeToken;
        rewardToken = _rewardToken;
        index = doubleScale;
    }

    function deposit(uint amount) public {
        updateIndex();
        distributeReward(msg.sender);
        require(stakeToken.transferFrom(msg.sender, address(this), amount), "transferFrom failed");
        userCollateral[msg.sender] = userCollateral[msg.sender].add(amount);
        totalCollateral = totalCollateral.add(amount);
        emit Deposit(msg.sender, amount);
    }

    function withdraw(uint amount) public {
        updateIndex();
        distributeReward(msg.sender);
        require(stakeToken.transfer(msg.sender, amount), "transfer failed");
        userCollateral[msg.sender] = userCollateral[msg.sender].sub(amount);
        totalCollateral = totalCollateral.sub(amount);
        emit Withdraw(msg.sender, amount);
    }

    function setRewardSpeed(uint speed) public onlyOwner {
        updateIndex();
        uint oldSpeed = rewardSpeed;
        rewardSpeed = speed;
        emit RewardSpeedUpdated(oldSpeed, speed);
    }

    function updateIndex() private {
        uint blockDelta = block.number.sub(lastDistributedBlock);
        if (blockDelta == 0) {
            return;
        }
        uint rewardAccrued = blockDelta.mul(rewardSpeed);
        if (totalCollateral > 0) {
            uint indexDelta = rewardAccrued.mul(doubleScale).div(totalCollateral);
            index = index.add(indexDelta);
        }
        lastDistributedBlock = block.number;
    }

    function distributeReward(address user) private {
        if (userIndex[user] == 0 && index > 0) {
            userIndex[user] = doubleScale;
        }
        uint indexDelta = index - userIndex[user];
        userIndex[user] = index;
        uint rewardDelta = indexDelta.mul(userCollateral[user]).div(doubleScale);
        userAccrued[user] = userAccrued[user].add(rewardDelta);
        if (rewardToken.balanceOf(address(this)) >= userAccrued[user] && userAccrued[user] > 0) {
            if (rewardToken.transfer(user, userAccrued[user])) {
                userAccrued[user] = 0;
            }
        }
        emit RewardDistributed(user, rewardDelta, index);
    }

    function claimReward(address[] memory user) public {
        updateIndex();
        for (uint i = 0; i < user.length; i++) {
            distributeReward(user[i]);
        }
    }

    function withdrawRemainReward() public onlyOwner {
        uint balance = rewardToken.balanceOf(address(this));
        rewardToken.transfer(owner(), balance);
    }

    function pendingReward(address user) public view returns (uint){
        uint blockDelta = block.number.sub(lastDistributedBlock);
        uint rewardAccrued = blockDelta.mul(rewardSpeed);
        if (totalCollateral == 0) {
            return userAccrued[user];
        }
        uint ratio = rewardAccrued.mul(doubleScale).div(totalCollateral);
        uint currentIndex = index.add(ratio);
        uint uIndex = userIndex[user] == 0 && index > 0 ? doubleScale : userIndex[user];
        uint indexDelta = currentIndex - uIndex;
        uint rewardDelta = indexDelta.mul(userCollateral[user]).div(doubleScale);
        return rewardDelta + userAccrued[user];
    }
}