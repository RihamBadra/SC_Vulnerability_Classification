

pragma solidity ^0.6.0;



library SafeMath {
    
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    
    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        
        
        
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    
    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        

        return c;
    }

    
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {
        return mod(a, b, "SafeMath: modulo by zero");
    }

    
    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b != 0, errorMessage);
        return a % b;
    }
    
    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {
        require(m != 0, "SafeMath: to ceil number shall not be zero");
        return (a + m - 1) / m * m;
    }
}







interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




contract Owned {
    address payable public owner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() public {
        owner = msg.sender;
    }

    modifier onlyOwner {
        require(msg.sender == owner, "Only allowed by owner");
        _;
    }

    function transferOwnership(address payable _newOwner) public onlyOwner {
        require(_newOwner != address(0), "Invalid address");
        owner = _newOwner;
        emit OwnershipTransferred(msg.sender, _newOwner);
    }
}





contract KittycoinPresale is Owned {
    using SafeMath for uint256;
    uint256 public decimals = 18;
    address public TOKEN;
    
    uint256 minLimit = 10000000000000000; 
    uint256 maxLimit = 10 ether; 
    
    uint256 rate = 8000000; 
    struct User{
        uint256 tokens;
        uint256 presale;
    }
    
    uint256 saleStart;
    uint256 saleEnd = 0;
    
    mapping(address => User) public users;
    uint256 public totalPresale;
    uint256 public presaleClaimed;
    
    event TokenPurchased(address by, uint256 _bnbSent, uint256 _tokensPurchased);
    
    
    
    
    constructor(address payable _owner, address _tokenAddress) public {
        owner = _owner;
        TOKEN = _tokenAddress;
        saleStart = block.timestamp; 
    }
    
    
    receive() external payable saleIsOpen {
        _preValidatePurchase();
        uint256 tokens = _calculateTokens(msg.value);
        purchaseToken(msg.value, tokens);
        totalPresale = totalPresale.add(msg.value);
    }
    
    function _preValidatePurchase() private {
        users[msg.sender].presale = users[msg.sender].presale.add(msg.value);
        require(users[msg.sender].presale >= minLimit, "Amount lower than min limit");
        require(users[msg.sender].presale <= maxLimit, "Amount exceeds max limit");
    } 
    
    
    function purchaseToken(uint256 _amount, uint256 _tokens) private {
        users[msg.sender].tokens = users[msg.sender].tokens.add(_tokens);
        emit TokenPurchased(msg.sender, _amount, _tokens);
    }
    
    function _calculateTokens(uint256 _amount) private view returns(uint256 _tokens) {
        return _amount.mul(rate);
    }
    
    function ClaimTokens() external {
        require(saleEnd > 0 && block.timestamp > saleEnd + 30 days, "Presale tokens are available to withdraw 30 days after presale ends");
        uint256 toClaim = users[msg.sender].tokens;
        require(toClaim > 0, "nothing to be claimed");
        users[msg.sender].tokens = 0;
        require(IERC20(TOKEN).transfer(msg.sender, toClaim), "Error sending tokens");
    }
    
    function endSale() external onlyOwner{
        require(saleEnd == 0, "Presale is already ended");
        saleEnd = block.timestamp;
    }
    
    function getUnSoldTokens(uint256 amount) external onlyOwner{
        require(block.timestamp > saleEnd, "Wait for Presale to end");
        require(IERC20(TOKEN).transfer(msg.sender, amount), "Error sending tokens");
    }
    
    function claimPresale(uint256 claimAmount) external onlyOwner{
        owner.transfer(claimAmount);
        presaleClaimed = presaleClaimed.add(claimAmount);
    }
    
    modifier saleIsOpen{
        require(block.timestamp > saleStart, "Presale has not started");
        require(saleEnd == 0, "Presale has ended");
        require(IERC20(TOKEN).balanceOf(address(this)) > 0, "Insufficient tokens for Presale");
        _;
    }
}