





pragma solidity ^0.8.0;


interface IERC777 {
    
    function name() external view returns (string memory);

    
    function symbol() external view returns (string memory);

    
    function granularity() external view returns (uint256);

    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address owner) external view returns (uint256);

    
    function send(
        address recipient,
        uint256 amount,
        bytes calldata data
    ) external;

    
    function burn(uint256 amount, bytes calldata data) external;

    
    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);

    
    function authorizeOperator(address operator) external;

    
    function revokeOperator(address operator) external;

    
    function defaultOperators() external view returns (address[] memory);

    
    function operatorSend(
        address sender,
        address recipient,
        uint256 amount,
        bytes calldata data,
        bytes calldata operatorData
    ) external;

    
    function operatorBurn(
        address account,
        uint256 amount,
        bytes calldata data,
        bytes calldata operatorData
    ) external;

    event Sent(
        address indexed operator,
        address indexed from,
        address indexed to,
        uint256 amount,
        bytes data,
        bytes operatorData
    );

    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);

    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);

    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);

    event RevokedOperator(address indexed operator, address indexed tokenHolder);
}




pragma solidity ^0.8.0;


interface IERC777Sender {
    
    function tokensToSend(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external;
}




pragma solidity ^0.8.0;


interface IERC777Recipient {
    
    function tokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes calldata userData,
        bytes calldata operatorData
    ) external;
}




pragma solidity ^0.8.0;


interface IERC20 {
    
    function totalSupply() external view returns (uint256);

    
    function balanceOf(address account) external view returns (uint256);

    
    function transfer(address recipient, uint256 amount) external returns (bool);

    
    function allowance(address owner, address spender) external view returns (uint256);

    
    function approve(address spender, uint256 amount) external returns (bool);

    
    function transferFrom(
        address sender,
        address recipient,
        uint256 amount
    ) external returns (bool);

    
    event Transfer(address indexed from, address indexed to, uint256 value);

    
    event Approval(address indexed owner, address indexed spender, uint256 value);
}




pragma solidity ^0.8.0;


interface IERC1820Registry {
    
    function setManager(address account, address newManager) external;

    
    function getManager(address account) external view returns (address);

    
    function setInterfaceImplementer(
        address account,
        bytes32 _interfaceHash,
        address implementer
    ) external;

    
    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);

    
    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);

    
    function updateERC165Cache(address account, bytes4 interfaceId) external;

    
    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);

    
    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);

    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);

    event ManagerChanged(address indexed account, address indexed newManager);
}



pragma solidity 0.8.12;



interface IDiamondCut {
    enum FacetCutAction {Add, Replace, Remove}
    

    struct FacetCut {
        address facetAddress;
        FacetCutAction action;
        bytes4[] functionSelectors;
    }

    
    
    
    
    
    
    function diamondCut(
        FacetCut[] calldata _diamondCut,
        address _init,
        bytes calldata _calldata
    ) external;

    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);
}



pragma solidity 0.8.12;



library LibDiamond {
    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256("diamond.standard.diamond.storage");

    struct DiamondStorage {
        
        
        
        mapping(bytes4 => bytes32) facets;
        
        
        mapping(uint256 => bytes32) selectorSlots; 
        
        
        mapping(bytes4 => bool) supportedInterfaces;
        
        
        uint16 selectorCount;
        
        address contractOwner;
    }

    function diamondStorage() internal pure returns (DiamondStorage storage ds) {
        bytes32 position = DIAMOND_STORAGE_POSITION;
        assembly {
            ds.slot := position
        }
    }

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    function setContractOwner(address _newOwner) internal {
        DiamondStorage storage ds = diamondStorage();
        address previousOwner = ds.contractOwner;
        ds.contractOwner = _newOwner;
        emit OwnershipTransferred(previousOwner, _newOwner);
    }

    function contractOwner() internal view returns (address contractOwner_) {
        contractOwner_ = diamondStorage().contractOwner;
    }

    function enforceIsContractOwner() internal view {
        require(msg.sender == diamondStorage().contractOwner, "Must be contract owner");
    }

    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);

    bytes32 constant CLEAR_ADDRESS_MASK = bytes32(uint256(0xffffffffffffffffffffffff));
    bytes32 constant CLEAR_SELECTOR_MASK = bytes32(uint256(0xffffffff << 224));

    
    
    
    
    
    
    function diamondCut(
        IDiamondCut.FacetCut[] memory _diamondCut,
        address _init,
        bytes memory _calldata
    ) internal {
        DiamondStorage storage ds = diamondStorage();
        uint256 originalSelectorCount = ds.selectorCount;
        uint256 selectorCount = originalSelectorCount;
        bytes32 selectorSlot;
        
        
        if (selectorCount & 7 > 0) {
            
            
            selectorSlot = ds.selectorSlots[selectorCount >> 3];
        }
        
        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {
            (selectorCount, selectorSlot) = addReplaceRemoveFacetSelectors(
                selectorCount,
                selectorSlot,
                _diamondCut[facetIndex].facetAddress,
                _diamondCut[facetIndex].action,
                _diamondCut[facetIndex].functionSelectors
            );
        }
        if (selectorCount != originalSelectorCount) {
            ds.selectorCount = uint16(selectorCount);
        }
        
        
        if (selectorCount & 7 > 0) {
            
            ds.selectorSlots[selectorCount >> 3] = selectorSlot;
        }
        emit DiamondCut(_diamondCut, _init, _calldata);
        initializeDiamondCut(_init, _calldata);
    }

    function addReplaceRemoveFacetSelectors(
        uint256 _selectorCount,
        bytes32 _selectorSlot,
        address _newFacetAddress,
        IDiamondCut.FacetCutAction _action,
        bytes4[] memory _selectors
    ) internal returns (uint256, bytes32) {
        DiamondStorage storage ds = diamondStorage();
        require(_selectors.length > 0, "LibDiamondCut: No selectors in facet to cut");
        if (_action == IDiamondCut.FacetCutAction.Add) {
            enforceHasContractCode(_newFacetAddress, "LibDiamondCut: Add facet has no code");
            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {
                bytes4 selector = _selectors[selectorIndex];
                bytes32 oldFacet = ds.facets[selector];
                require(address(bytes20(oldFacet)) == address(0), "LibDiamondCut: Can't add function that already exists");
                
                ds.facets[selector] = bytes20(_newFacetAddress) | bytes32(_selectorCount);
                
                uint256 selectorInSlotPosition = (_selectorCount & 7) << 5;
                
                _selectorSlot = (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> selectorInSlotPosition)) | (bytes32(selector) >> selectorInSlotPosition);
                
                if (selectorInSlotPosition == 224) {
                    
                    ds.selectorSlots[_selectorCount >> 3] = _selectorSlot;
                    _selectorSlot = 0;
                }
                _selectorCount++;
            }
        } else if (_action == IDiamondCut.FacetCutAction.Replace) {
            enforceHasContractCode(_newFacetAddress, "LibDiamondCut: Replace facet has no code");
            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {
                bytes4 selector = _selectors[selectorIndex];
                bytes32 oldFacet = ds.facets[selector];
                address oldFacetAddress = address(bytes20(oldFacet));
                
                require(oldFacetAddress != address(this), "LibDiamondCut: Can't replace immutable function");
                require(oldFacetAddress != _newFacetAddress, "LibDiamondCut: Can't replace function with same function");
                require(oldFacetAddress != address(0), "LibDiamondCut: Can't replace function that doesn't exist");
                
                ds.facets[selector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(_newFacetAddress);
            }
        } else if (_action == IDiamondCut.FacetCutAction.Remove) {
            require(_newFacetAddress == address(0), "LibDiamondCut: Remove facet address must be address(0)");
            
            uint256 selectorSlotCount = _selectorCount >> 3;
            
            uint256 selectorInSlotIndex = _selectorCount & 7;
            for (uint256 selectorIndex; selectorIndex < _selectors.length; selectorIndex++) {
                if (_selectorSlot == 0) {
                    
                    selectorSlotCount--;
                    _selectorSlot = ds.selectorSlots[selectorSlotCount];
                    selectorInSlotIndex = 7;
                } else {
                    selectorInSlotIndex--;
                }
                bytes4 lastSelector;
                uint256 oldSelectorsSlotCount;
                uint256 oldSelectorInSlotPosition;
                
                {
                    bytes4 selector = _selectors[selectorIndex];
                    bytes32 oldFacet = ds.facets[selector];
                    require(address(bytes20(oldFacet)) != address(0), "LibDiamondCut: Can't remove function that doesn't exist");
                    
                    require(address(bytes20(oldFacet)) != address(this), "LibDiamondCut: Can't remove immutable function");
                    
                    
                    lastSelector = bytes4(_selectorSlot << (selectorInSlotIndex << 5));
                    if (lastSelector != selector) {
                        
                        ds.facets[lastSelector] = (oldFacet & CLEAR_ADDRESS_MASK) | bytes20(ds.facets[lastSelector]);
                    }
                    delete ds.facets[selector];
                    uint256 oldSelectorCount = uint16(uint256(oldFacet));
                    
                    oldSelectorsSlotCount = oldSelectorCount >> 3;
                    
                    oldSelectorInSlotPosition = (oldSelectorCount & 7) << 5;
                }
                if (oldSelectorsSlotCount != selectorSlotCount) {
                    bytes32 oldSelectorSlot = ds.selectorSlots[oldSelectorsSlotCount];
                    
                    oldSelectorSlot =
                        (oldSelectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |
                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);
                    
                    ds.selectorSlots[oldSelectorsSlotCount] = oldSelectorSlot;
                } else {
                    
                    _selectorSlot =
                        (_selectorSlot & ~(CLEAR_SELECTOR_MASK >> oldSelectorInSlotPosition)) |
                        (bytes32(lastSelector) >> oldSelectorInSlotPosition);
                }
                if (selectorInSlotIndex == 0) {
                    delete ds.selectorSlots[selectorSlotCount];
                    _selectorSlot = 0;
                }
            }
            _selectorCount = selectorSlotCount * 8 + selectorInSlotIndex;
        } else {
            revert("LibDiamondCut: Incorrect FacetCutAction");
        }
        return (_selectorCount, _selectorSlot);
    }

    function initializeDiamondCut(address _init, bytes memory _calldata) internal {
        if (_init == address(0)) {
            require(_calldata.length == 0, "LibDiamondCut: _init is address(0) but_calldata is not empty");
        } else {
            require(_calldata.length > 0, "LibDiamondCut: _calldata is empty but _init is not address(0)");
            if (_init != address(this)) {
                enforceHasContractCode(_init, "LibDiamondCut: _init address has no code");
            }
            (bool success, bytes memory error) = _init.delegatecall(_calldata);
            if (!success) {
                if (error.length > 0) {
                    
                    revert(string(error));
                } else {
                    revert("LibDiamondCut: _init function reverted");
                }
            }
        }
    }

    function isContract(address _contract) internal view returns (bool) {
        uint256 contractSize;
        assembly {
            contractSize := extcodesize(_contract)
        }
        return contractSize > 0;
    }

    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {
        require(isContract(_contract), _errorMessage);
    }
}



pragma solidity 0.8.12;





struct ERC777Storage {
    mapping(address => uint256) _balances;

    uint256 _totalSupply;

    string _name;
    string _symbol;

    
    address[] _defaultOperatorsArray;

    
    mapping(address => bool) _defaultOperators;

    
    mapping(address => mapping(address => bool)) _operators;
    mapping(address => mapping(address => bool)) _revokedDefaultOperators;

    
    mapping(address => mapping(address => uint256)) _allowances;

    
    uint256 _entered;

    
    

}

contract MNFTERC777Facet is IERC777, IERC20 {

    event PartnerAdded(address indexed partner, uint16 cashbackRate);
    event PartnerUpdated(address indexed partner, uint16 cashbackRate);
    event PartnerRemoved(address indexed partner);

    function getERC777Storage() internal pure returns(ERC777Storage storage es) {
        
        assembly {
            es.slot := 0x8fb040e626dc81be524f960fd04848fa1f8d9000e8b837b9a8ed86951edba988
        }
    }

    
    function name() external view override returns (string memory) {
        ERC777Storage storage es = getERC777Storage();
        return es._name;
    }

    
    function symbol() external view override returns (string memory) {
        ERC777Storage storage es = getERC777Storage();
        return es._symbol;
    }

    
    function decimals() external pure returns (uint8) {
        return 18;
    }

    
    function granularity() external pure override returns (uint256) {
        return 1;
    }

    
    function totalSupply() external view override(IERC20, IERC777) returns (uint256) {
        ERC777Storage storage es = getERC777Storage();
        return es._totalSupply;
    }

    
    function balanceOf(address tokenHolder) external view override(IERC20, IERC777) returns (uint256) {
        ERC777Storage storage es = getERC777Storage();
        return es._balances[tokenHolder];
    }

    
    function send(
        address recipient,
        uint256 amount,
        bytes memory data
    ) external override {
        _send(msg.sender, recipient, amount, data, "", true);
    }

    
    function transfer(address recipient, uint256 amount) external override returns (bool) {
        require(recipient != address(0), "ERC777: transfer to the zero address");
        require(getERC777Storage()._entered == 0, 'Undergoing transaction');

        address from = msg.sender;

        _callTokensToSend(from, from, recipient, amount, "", "");

        _move(from, from, recipient, amount, "", "");

        _callTokensReceived(from, from, recipient, amount, "", "", false);

        return true;
    }

    
    function burn(uint256 amount, bytes memory data) external override {
        _burn(msg.sender, amount, data, "");
    }

    
    function isOperatorFor(address operator, address tokenHolder) external view override returns (bool) {
        return _isOperatorFor(operator, tokenHolder);
    }

    
    function _isOperatorFor(address operator, address tokenHolder) internal view returns (bool) {
        ERC777Storage storage es = getERC777Storage();

        return
            operator == tokenHolder ||
            (es._defaultOperators[operator] && !es._revokedDefaultOperators[tokenHolder][operator]) ||
            es._operators[tokenHolder][operator];
    }

    
    function authorizeOperator(address operator) external override {
        require(msg.sender != operator, "ERC777: authorizing self as operator");
        ERC777Storage storage es = getERC777Storage();

        if (es._defaultOperators[operator]) {
            delete es._revokedDefaultOperators[msg.sender][operator];
        } else {
            es._operators[msg.sender][operator] = true;
        }

        emit AuthorizedOperator(operator, msg.sender);
    }

    
    function revokeOperator(address operator) external override {
        require(operator != msg.sender, "ERC777: revoking self as operator");
        ERC777Storage storage es = getERC777Storage();

        if (es._defaultOperators[operator]) {
            es._revokedDefaultOperators[msg.sender][operator] = true;
        } else {
            delete es._operators[msg.sender][operator];
        }

        emit RevokedOperator(operator, msg.sender);
    }

    
    function defaultOperators() external view override returns (address[] memory) {
        ERC777Storage storage es = getERC777Storage();

        return es._defaultOperatorsArray;
    }

    
    function operatorSend(
        address sender,
        address recipient,
        uint256 amount,
        bytes memory data,
        bytes memory operatorData
    ) external override {
        require(_isOperatorFor(msg.sender, sender), "ERC777: caller is not an operator for holder");
        _send(sender, recipient, amount, data, operatorData, true);
    }

    
    function operatorBurn(
        address account,
        uint256 amount,
        bytes memory data,
        bytes memory operatorData
    ) external override {
        require(_isOperatorFor(msg.sender, account), "ERC777: caller is not an operator for holder");
        _burn(account, amount, data, operatorData);
    }

    
    function allowance(address holder, address spender) external view override returns (uint256) {
        ERC777Storage storage es = getERC777Storage();

        return es._allowances[holder][spender];
    }

    
    function approve(address spender, uint256 value) external override returns (bool) {
        address holder = msg.sender;
        _approve(holder, spender, value);
        return true;
    }

    
    function transferFrom(
        address holder,
        address recipient,
        uint256 amount
    ) external override returns (bool) {
        require(recipient != address(0), "ERC777: transfer to the zero address");
        require(holder != address(0), "ERC777: transfer from the zero address");
        
        ERC777Storage storage es = getERC777Storage();
        require(es._entered == 0, 'Undergoing transaction');

        address spender = msg.sender;

        _callTokensToSend(spender, holder, recipient, amount, "", "");

        _move(spender, holder, recipient, amount, "", "");

       
        uint256 currentAllowance = es._allowances[holder][spender];
        require(currentAllowance >= amount, "ERC777: transfer amount exceeds allowance");
        _approve(holder, spender, currentAllowance - amount);

        _callTokensReceived(spender, holder, recipient, amount, "", "", false);

        return true;
    }

    
    function mint(
        address account,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData,
        bool requireReceptionAck
    ) external {
        LibDiamond.enforceIsContractOwner();
        _mint(account, amount, userData, operatorData, requireReceptionAck);
    }

    
    function _mint(
        address account,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData,
        bool requireReceptionAck
    ) internal {
        require(account != address(0), "ERC777: mint to the zero address");
        ERC777Storage storage es = getERC777Storage();

        require((es._totalSupply + amount) <= 4200000000000000000000000000 , 'Mint amount exceed total supply');

        address operator = msg.sender;

        _beforeTokenTransfer(operator, address(0), account, amount);

        unchecked {
            es._totalSupply += amount;
            es._balances[account] += amount;
        }

        _callTokensReceived(operator, address(0), account, amount, userData, operatorData, requireReceptionAck);

        emit Minted(operator, account, amount, userData, operatorData);
        emit Transfer(address(0), account, amount);
    }

    
    function _send(
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData,
        bool requireReceptionAck
    ) internal {
        require(from != address(0), "ERC777: send from the zero address");
        require(to != address(0), "ERC777: send to the zero address");
        require(getERC777Storage()._entered == 0, 'Undergoing transaction');

        address operator = msg.sender;

        _callTokensToSend(operator, from, to, amount, userData, operatorData);

        _move(operator, from, to, amount, userData, operatorData);

        _callTokensReceived(operator, from, to, amount, userData, operatorData, requireReceptionAck);
    }

    
    function _burn(
        address from,
        uint256 amount,
        bytes memory data,
        bytes memory operatorData
    ) internal {
        LibDiamond.enforceIsContractOwner();
        require(from != address(0), "ERC777: burn from the zero address");

        ERC777Storage storage es = getERC777Storage();
        require(es._entered == 0, "Undergoing account transaction");

        address operator = msg.sender;

        _callTokensToSend(operator, from, address(0), amount, data, operatorData);

        _beforeTokenTransfer(operator, from, address(0), amount);

        
        uint256 fromBalance = es._balances[from];
        require(fromBalance >= amount, "ERC777: burn amount exceeds balance");
        unchecked {
            es._balances[from] = fromBalance - amount;
            es._totalSupply -= amount;
        }

        emit Burned(operator, from, amount, data, operatorData);
        emit Transfer(from, address(0), amount);
    }

    function _move(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData
    ) private {
        _beforeTokenTransfer(operator, from, to, amount);
        ERC777Storage storage es = getERC777Storage();
        
        
        
        uint256 fromBalance = es._balances[from];
        require(fromBalance >= amount, "ERC777: transfer amount exceeds balance");
        unchecked {
            es._balances[from] = fromBalance - amount;
            es._balances[to] += amount;
        }

        emit Sent(operator, from, to, amount, userData, operatorData);
        emit Transfer(from, to, amount);
    }

    
    function _approve(
        address holder,
        address spender,
        uint256 value
    ) internal {
        require(holder != address(0), "ERC777: approve from the zero address");
        require(spender != address(0), "ERC777: approve to the zero address");
        
        ERC777Storage storage es = getERC777Storage();
        es._allowances[holder][spender] = value;
        emit Approval(holder, spender, value);
    }

    
    function _callTokensToSend(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData
    ) private {
        address implementer = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24)
                                .getInterfaceImplementer(from, 0x29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe895);
        if (implementer != address(0)) {
            ERC777Storage storage es = getERC777Storage();
            es._entered = 1;
            IERC777Sender(implementer).tokensToSend(operator, from, to, amount, userData, operatorData);
            es._entered = 0;
        }
    }

    
    function _callTokensReceived(
        address operator,
        address from,
        address to,
        uint256 amount,
        bytes memory userData,
        bytes memory operatorData,
        bool requireReceptionAck
    ) private {
        address implementer = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24)
                                .getInterfaceImplementer(to, 0xb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b);
        if (implementer != address(0)) {
            IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, userData, operatorData);
        } else if (requireReceptionAck) {
            require(!LibDiamond.isContract(to), "ERC777: token recipient contract has no implementer for ERC777TokensRecipient");
        }
    }

    
    function _beforeTokenTransfer(
        address operator,
        address from,
        address to,
        uint256 amount
    ) internal {}

    function withdrawEth() external {
        LibDiamond.enforceIsContractOwner();
        (bool os, ) = payable(LibDiamond.diamondStorage().contractOwner).call{value: address(this).balance}("");
        require(os);
    }
}